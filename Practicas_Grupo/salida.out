Grammar:

Rule 0     S' -> Programa
Rule 1     Programa -> Clase
Rule 2     Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
Rule 3     Clase -> CLASS TYPEID INHERITS TYPEID { }
Rule 4     cuerpo_clase -> cuerpo_clase caracteristica ;
Rule 5     cuerpo_clase -> <empty>
Rule 6     caracteristica -> Metodo ;
Rule 7     caracteristica -> Atributo ;
Rule 8     Atributo -> OBJECTID : TYPEID ASSIGN expr  [precedence=right, level=1]
Rule 9     Atributo -> OBJECTID : TYPEID
Rule 10    Metodo -> OBJECTID ( formal ) : TYPEID { expr }
Rule 11    Metodo -> OBJECTID ( ) : TYPEID { expr }
Rule 12    Metodo -> OBJECTID ( ) : TYPEID { }
Rule 13    formal -> OBJECTID : TYPEID
Rule 14    formal -> <empty>
Rule 15    expr -> BOOL_CONST
Rule 16    expr -> STR_CONST
Rule 17    expr -> INT_CONST
Rule 18    expr -> OBJECTID
Rule 19    expr -> { expr }
Rule 20    expr -> NEW TYPEID
Rule 21    expr -> CASE expr OF { cuerpo_case } ESAC
Rule 22    expr -> CASE expr OF { } ESAC
Rule 23    expr -> LET OBJECTID : TYPEID lista_inicia IN expr
Rule 24    expr -> WHILE expr LOOP expr POOL
Rule 25    expr -> IF expr THEN expr ELSE expr FI
Rule 26    expr -> OBJECTID ( )
Rule 27    expr -> OBJECTID ( expr )
Rule 28    expr -> expr @ TYPEID . OBJECTID ( expr )
Rule 29    expr -> expr @ TYPEID . OBJECTID ( )
Rule 30    expr -> ( expr )
Rule 31    expr -> ~ expr
Rule 32    expr -> ISVOID expr  [precedence=left, level=5]
Rule 33    expr -> NOT expr  [precedence=left, level=2]
Rule 34    expr -> expr = expr
Rule 35    expr -> expr LE expr
Rule 36    expr -> expr < expr
Rule 37    expr -> expr / expr  [precedence=left, level=4]
Rule 38    expr -> expr * expr  [precedence=left, level=4]
Rule 39    expr -> expr - expr  [precedence=left, level=3]
Rule 40    expr -> expr + expr  [precedence=left, level=3]
Rule 41    expr -> OBJECTID ASSIGN expr  [precedence=right, level=1]
Rule 42    lista_inicia -> OBJECTID : TYPEID
Rule 43    cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ;
Rule 44    cuerpo_case -> <empty>

Unused terminals:

    ERROR
    NUMBER
    COMMENT_BLOQUE
    COMMENT_1LINEA

Terminals, with rules where they appear:

(                    : 10 11 12 26 27 28 29 30
)                    : 10 11 12 26 27 28 29 30
*                    : 38
+                    : 40
-                    : 39
.                    : 28 29
/                    : 37
:                    : 8 9 10 11 12 13 23 42 43
;                    : 4 6 7 43
<                    : 36
=                    : 34
@                    : 28 29
ASSIGN               : 8 41
BOOL_CONST           : 15
CASE                 : 21 22
CLASS                : 2 3
COMMENT_1LINEA       : 
COMMENT_BLOQUE       : 
DARROW               : 43
ELSE                 : 25
ERROR                : 
ESAC                 : 21 22
FI                   : 25
IF                   : 25
IN                   : 23
INHERITS             : 2 3
INT_CONST            : 17
ISVOID               : 32
LE                   : 35
LET                  : 23
LOOP                 : 24
NEW                  : 20
NOT                  : 33
NUMBER               : 
OBJECTID             : 8 9 10 11 12 13 18 23 26 27 28 29 41 42 43
OF                   : 21 22
POOL                 : 24
STR_CONST            : 16
THEN                 : 25
TYPEID               : 2 2 3 3 8 9 10 11 12 13 20 23 28 29 42 43
WHILE                : 24
error                : 
{                    : 2 3 10 11 12 19 21 22
}                    : 2 3 10 11 12 19 21 22
~                    : 31

Nonterminals, with rules where they appear:

Atributo             : 7
Clase                : 1
Metodo               : 6
Programa             : 0
caracteristica       : 4
cuerpo_case          : 21 43
cuerpo_clase         : 2 4
expr                 : 8 10 11 19 21 22 23 24 24 25 25 25 27 28 28 29 30 31 32 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 43
formal               : 10
lista_inicia         : 23


state 0

    (0) S' -> . Programa
    (1) Programa -> . Clase
    (2) Clase -> . CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
    (3) Clase -> . CLASS TYPEID INHERITS TYPEID { }
    CLASS           shift and go to state 3

    Programa                       shift and go to state 1
    Clase                          shift and go to state 2

state 1

    (0) S' -> Programa .


state 2

    (1) Programa -> Clase .
    $end            reduce using rule 1 (Programa -> Clase .)


state 3

    (2) Clase -> CLASS . TYPEID INHERITS TYPEID { cuerpo_clase }
    (3) Clase -> CLASS . TYPEID INHERITS TYPEID { }
    TYPEID          shift and go to state 4


state 4

    (2) Clase -> CLASS TYPEID . INHERITS TYPEID { cuerpo_clase }
    (3) Clase -> CLASS TYPEID . INHERITS TYPEID { }
    INHERITS        shift and go to state 5


state 5

    (2) Clase -> CLASS TYPEID INHERITS . TYPEID { cuerpo_clase }
    (3) Clase -> CLASS TYPEID INHERITS . TYPEID { }
    TYPEID          shift and go to state 6


state 6

    (2) Clase -> CLASS TYPEID INHERITS TYPEID . { cuerpo_clase }
    (3) Clase -> CLASS TYPEID INHERITS TYPEID . { }
    {               shift and go to state 7


state 7

    (2) Clase -> CLASS TYPEID INHERITS TYPEID { . cuerpo_clase }
    (3) Clase -> CLASS TYPEID INHERITS TYPEID { . }
    (4) cuerpo_clase -> . cuerpo_clase caracteristica ;
    (5) cuerpo_clase -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 9
    OBJECTID        reduce using rule 5 (cuerpo_clase -> .)

    cuerpo_clase                   shift and go to state 8

state 8

    (2) Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase . }
    (4) cuerpo_clase -> cuerpo_clase . caracteristica ;
    (6) caracteristica -> . Metodo ;
    (7) caracteristica -> . Atributo ;
    (10) Metodo -> . OBJECTID ( formal ) : TYPEID { expr }
    (11) Metodo -> . OBJECTID ( ) : TYPEID { expr }
    (12) Metodo -> . OBJECTID ( ) : TYPEID { }
    (8) Atributo -> . OBJECTID : TYPEID ASSIGN expr
    (9) Atributo -> . OBJECTID : TYPEID
    }               shift and go to state 10
    OBJECTID        shift and go to state 14

    caracteristica                 shift and go to state 11
    Metodo                         shift and go to state 12
    Atributo                       shift and go to state 13

state 9

    (3) Clase -> CLASS TYPEID INHERITS TYPEID { } .
    $end            reduce using rule 3 (Clase -> CLASS TYPEID INHERITS TYPEID { } .)


state 10

    (2) Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase } .
    $end            reduce using rule 2 (Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase } .)


state 11

    (4) cuerpo_clase -> cuerpo_clase caracteristica . ;
    ;               shift and go to state 15


state 12

    (6) caracteristica -> Metodo . ;
    ;               shift and go to state 16


state 13

    (7) caracteristica -> Atributo . ;
    ;               shift and go to state 17


state 14

    (10) Metodo -> OBJECTID . ( formal ) : TYPEID { expr }
    (11) Metodo -> OBJECTID . ( ) : TYPEID { expr }
    (12) Metodo -> OBJECTID . ( ) : TYPEID { }
    (8) Atributo -> OBJECTID . : TYPEID ASSIGN expr
    (9) Atributo -> OBJECTID . : TYPEID
    (               shift and go to state 18
    :               shift and go to state 19


state 15

    (4) cuerpo_clase -> cuerpo_clase caracteristica ; .
    }               reduce using rule 4 (cuerpo_clase -> cuerpo_clase caracteristica ; .)
    OBJECTID        reduce using rule 4 (cuerpo_clase -> cuerpo_clase caracteristica ; .)


state 16

    (6) caracteristica -> Metodo ; .
    ;               reduce using rule 6 (caracteristica -> Metodo ; .)


state 17

    (7) caracteristica -> Atributo ; .
    ;               reduce using rule 7 (caracteristica -> Atributo ; .)


state 18

    (10) Metodo -> OBJECTID ( . formal ) : TYPEID { expr }
    (11) Metodo -> OBJECTID ( . ) : TYPEID { expr }
    (12) Metodo -> OBJECTID ( . ) : TYPEID { }
    (13) formal -> . OBJECTID : TYPEID
    (14) formal -> .
  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 22
    OBJECTID        shift and go to state 20

    formal                         shift and go to state 21

state 19

    (8) Atributo -> OBJECTID : . TYPEID ASSIGN expr
    (9) Atributo -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 23


state 20

    (13) formal -> OBJECTID . : TYPEID
    :               shift and go to state 24


state 21

    (10) Metodo -> OBJECTID ( formal . ) : TYPEID { expr }
    )               shift and go to state 25


state 22

    (11) Metodo -> OBJECTID ( ) . : TYPEID { expr }
    (12) Metodo -> OBJECTID ( ) . : TYPEID { }
    :               shift and go to state 26


state 23

    (8) Atributo -> OBJECTID : TYPEID . ASSIGN expr
    (9) Atributo -> OBJECTID : TYPEID .
    ASSIGN          shift and go to state 27
    ;               reduce using rule 9 (Atributo -> OBJECTID : TYPEID .)


state 24

    (13) formal -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 28


state 25

    (10) Metodo -> OBJECTID ( formal ) . : TYPEID { expr }
    :               shift and go to state 29


state 26

    (11) Metodo -> OBJECTID ( ) : . TYPEID { expr }
    (12) Metodo -> OBJECTID ( ) : . TYPEID { }
    TYPEID          shift and go to state 30


state 27

    (8) Atributo -> OBJECTID : TYPEID ASSIGN . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 32

state 28

    (13) formal -> OBJECTID : TYPEID .
    )               reduce using rule 13 (formal -> OBJECTID : TYPEID .)


state 29

    (10) Metodo -> OBJECTID ( formal ) : . TYPEID { expr }
    TYPEID          shift and go to state 46


state 30

    (11) Metodo -> OBJECTID ( ) : TYPEID . { expr }
    (12) Metodo -> OBJECTID ( ) : TYPEID . { }
    {               shift and go to state 47


state 31

    (18) expr -> OBJECTID .
    (26) expr -> OBJECTID . ( )
    (27) expr -> OBJECTID . ( expr )
    (41) expr -> OBJECTID . ASSIGN expr
    @               reduce using rule 18 (expr -> OBJECTID .)
    =               reduce using rule 18 (expr -> OBJECTID .)
    LE              reduce using rule 18 (expr -> OBJECTID .)
    <               reduce using rule 18 (expr -> OBJECTID .)
    /               reduce using rule 18 (expr -> OBJECTID .)
    *               reduce using rule 18 (expr -> OBJECTID .)
    -               reduce using rule 18 (expr -> OBJECTID .)
    +               reduce using rule 18 (expr -> OBJECTID .)
    ;               reduce using rule 18 (expr -> OBJECTID .)
    }               reduce using rule 18 (expr -> OBJECTID .)
    OF              reduce using rule 18 (expr -> OBJECTID .)
    LOOP            reduce using rule 18 (expr -> OBJECTID .)
    THEN            reduce using rule 18 (expr -> OBJECTID .)
    )               reduce using rule 18 (expr -> OBJECTID .)
    POOL            reduce using rule 18 (expr -> OBJECTID .)
    ELSE            reduce using rule 18 (expr -> OBJECTID .)
    FI              reduce using rule 18 (expr -> OBJECTID .)
    (               shift and go to state 48
    ASSIGN          shift and go to state 49


state 32

    (8) Atributo -> OBJECTID : TYPEID ASSIGN expr .
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    ;               reduce using rule 8 (Atributo -> OBJECTID : TYPEID ASSIGN expr .)
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 33

    (15) expr -> BOOL_CONST .
    @               reduce using rule 15 (expr -> BOOL_CONST .)
    =               reduce using rule 15 (expr -> BOOL_CONST .)
    LE              reduce using rule 15 (expr -> BOOL_CONST .)
    <               reduce using rule 15 (expr -> BOOL_CONST .)
    /               reduce using rule 15 (expr -> BOOL_CONST .)
    *               reduce using rule 15 (expr -> BOOL_CONST .)
    -               reduce using rule 15 (expr -> BOOL_CONST .)
    +               reduce using rule 15 (expr -> BOOL_CONST .)
    ;               reduce using rule 15 (expr -> BOOL_CONST .)
    }               reduce using rule 15 (expr -> BOOL_CONST .)
    OF              reduce using rule 15 (expr -> BOOL_CONST .)
    LOOP            reduce using rule 15 (expr -> BOOL_CONST .)
    THEN            reduce using rule 15 (expr -> BOOL_CONST .)
    )               reduce using rule 15 (expr -> BOOL_CONST .)
    POOL            reduce using rule 15 (expr -> BOOL_CONST .)
    ELSE            reduce using rule 15 (expr -> BOOL_CONST .)
    FI              reduce using rule 15 (expr -> BOOL_CONST .)


state 34

    (16) expr -> STR_CONST .
    @               reduce using rule 16 (expr -> STR_CONST .)
    =               reduce using rule 16 (expr -> STR_CONST .)
    LE              reduce using rule 16 (expr -> STR_CONST .)
    <               reduce using rule 16 (expr -> STR_CONST .)
    /               reduce using rule 16 (expr -> STR_CONST .)
    *               reduce using rule 16 (expr -> STR_CONST .)
    -               reduce using rule 16 (expr -> STR_CONST .)
    +               reduce using rule 16 (expr -> STR_CONST .)
    ;               reduce using rule 16 (expr -> STR_CONST .)
    }               reduce using rule 16 (expr -> STR_CONST .)
    OF              reduce using rule 16 (expr -> STR_CONST .)
    LOOP            reduce using rule 16 (expr -> STR_CONST .)
    THEN            reduce using rule 16 (expr -> STR_CONST .)
    )               reduce using rule 16 (expr -> STR_CONST .)
    POOL            reduce using rule 16 (expr -> STR_CONST .)
    ELSE            reduce using rule 16 (expr -> STR_CONST .)
    FI              reduce using rule 16 (expr -> STR_CONST .)


state 35

    (17) expr -> INT_CONST .
    @               reduce using rule 17 (expr -> INT_CONST .)
    =               reduce using rule 17 (expr -> INT_CONST .)
    LE              reduce using rule 17 (expr -> INT_CONST .)
    <               reduce using rule 17 (expr -> INT_CONST .)
    /               reduce using rule 17 (expr -> INT_CONST .)
    *               reduce using rule 17 (expr -> INT_CONST .)
    -               reduce using rule 17 (expr -> INT_CONST .)
    +               reduce using rule 17 (expr -> INT_CONST .)
    ;               reduce using rule 17 (expr -> INT_CONST .)
    }               reduce using rule 17 (expr -> INT_CONST .)
    OF              reduce using rule 17 (expr -> INT_CONST .)
    LOOP            reduce using rule 17 (expr -> INT_CONST .)
    THEN            reduce using rule 17 (expr -> INT_CONST .)
    )               reduce using rule 17 (expr -> INT_CONST .)
    POOL            reduce using rule 17 (expr -> INT_CONST .)
    ELSE            reduce using rule 17 (expr -> INT_CONST .)
    FI              reduce using rule 17 (expr -> INT_CONST .)


state 36

    (19) expr -> { . expr }
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 58

state 37

    (20) expr -> NEW . TYPEID
    TYPEID          shift and go to state 59


state 38

    (21) expr -> CASE . expr OF { cuerpo_case } ESAC
    (22) expr -> CASE . expr OF { } ESAC
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 60

state 39

    (23) expr -> LET . OBJECTID : TYPEID lista_inicia IN expr
    OBJECTID        shift and go to state 61


state 40

    (24) expr -> WHILE . expr LOOP expr POOL
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 62

state 41

    (25) expr -> IF . expr THEN expr ELSE expr FI
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 63

state 42

    (30) expr -> ( . expr )
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 64

state 43

    (31) expr -> ~ . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 65

state 44

    (32) expr -> ISVOID . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 66

state 45

    (33) expr -> NOT . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 67

state 46

    (10) Metodo -> OBJECTID ( formal ) : TYPEID . { expr }
    {               shift and go to state 68


state 47

    (11) Metodo -> OBJECTID ( ) : TYPEID { . expr }
    (12) Metodo -> OBJECTID ( ) : TYPEID { . }
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    }               shift and go to state 70
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 69

state 48

    (26) expr -> OBJECTID ( . )
    (27) expr -> OBJECTID ( . expr )
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    )               shift and go to state 71
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 72

state 49

    (41) expr -> OBJECTID ASSIGN . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 73

state 50

    (28) expr -> expr @ . TYPEID . OBJECTID ( expr )
    (29) expr -> expr @ . TYPEID . OBJECTID ( )
    TYPEID          shift and go to state 74


state 51

    (34) expr -> expr = . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 75

state 52

    (35) expr -> expr LE . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 76

state 53

    (36) expr -> expr < . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 77

state 54

    (37) expr -> expr / . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 78

state 55

    (38) expr -> expr * . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 79

state 56

    (39) expr -> expr - . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 80

state 57

    (40) expr -> expr + . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 81

state 58

    (19) expr -> { expr . }
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    }               shift and go to state 82
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 59

    (20) expr -> NEW TYPEID .
    @               reduce using rule 20 (expr -> NEW TYPEID .)
    =               reduce using rule 20 (expr -> NEW TYPEID .)
    LE              reduce using rule 20 (expr -> NEW TYPEID .)
    <               reduce using rule 20 (expr -> NEW TYPEID .)
    /               reduce using rule 20 (expr -> NEW TYPEID .)
    *               reduce using rule 20 (expr -> NEW TYPEID .)
    -               reduce using rule 20 (expr -> NEW TYPEID .)
    +               reduce using rule 20 (expr -> NEW TYPEID .)
    ;               reduce using rule 20 (expr -> NEW TYPEID .)
    }               reduce using rule 20 (expr -> NEW TYPEID .)
    OF              reduce using rule 20 (expr -> NEW TYPEID .)
    LOOP            reduce using rule 20 (expr -> NEW TYPEID .)
    THEN            reduce using rule 20 (expr -> NEW TYPEID .)
    )               reduce using rule 20 (expr -> NEW TYPEID .)
    POOL            reduce using rule 20 (expr -> NEW TYPEID .)
    ELSE            reduce using rule 20 (expr -> NEW TYPEID .)
    FI              reduce using rule 20 (expr -> NEW TYPEID .)


state 60

    (21) expr -> CASE expr . OF { cuerpo_case } ESAC
    (22) expr -> CASE expr . OF { } ESAC
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    OF              shift and go to state 83
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 61

    (23) expr -> LET OBJECTID . : TYPEID lista_inicia IN expr
    :               shift and go to state 84


state 62

    (24) expr -> WHILE expr . LOOP expr POOL
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    LOOP            shift and go to state 85
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 63

    (25) expr -> IF expr . THEN expr ELSE expr FI
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    THEN            shift and go to state 86
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 64

    (30) expr -> ( expr . )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    )               shift and go to state 87
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 65

    (31) expr -> ~ expr .
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 31 (expr -> ~ expr .)
    }               reduce using rule 31 (expr -> ~ expr .)
    OF              reduce using rule 31 (expr -> ~ expr .)
    LOOP            reduce using rule 31 (expr -> ~ expr .)
    THEN            reduce using rule 31 (expr -> ~ expr .)
    )               reduce using rule 31 (expr -> ~ expr .)
    POOL            reduce using rule 31 (expr -> ~ expr .)
    ELSE            reduce using rule 31 (expr -> ~ expr .)
    FI              reduce using rule 31 (expr -> ~ expr .)
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 66

    (32) expr -> ISVOID expr .
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    @               reduce using rule 32 (expr -> ISVOID expr .)
    =               reduce using rule 32 (expr -> ISVOID expr .)
    LE              reduce using rule 32 (expr -> ISVOID expr .)
    <               reduce using rule 32 (expr -> ISVOID expr .)
    /               reduce using rule 32 (expr -> ISVOID expr .)
    *               reduce using rule 32 (expr -> ISVOID expr .)
    -               reduce using rule 32 (expr -> ISVOID expr .)
    +               reduce using rule 32 (expr -> ISVOID expr .)
    ;               reduce using rule 32 (expr -> ISVOID expr .)
    }               reduce using rule 32 (expr -> ISVOID expr .)
    OF              reduce using rule 32 (expr -> ISVOID expr .)
    LOOP            reduce using rule 32 (expr -> ISVOID expr .)
    THEN            reduce using rule 32 (expr -> ISVOID expr .)
    )               reduce using rule 32 (expr -> ISVOID expr .)
    POOL            reduce using rule 32 (expr -> ISVOID expr .)
    ELSE            reduce using rule 32 (expr -> ISVOID expr .)
    FI              reduce using rule 32 (expr -> ISVOID expr .)


state 67

    (33) expr -> NOT expr .
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    @               reduce using rule 33 (expr -> NOT expr .)
    =               reduce using rule 33 (expr -> NOT expr .)
    LE              reduce using rule 33 (expr -> NOT expr .)
    <               reduce using rule 33 (expr -> NOT expr .)
    ;               reduce using rule 33 (expr -> NOT expr .)
    }               reduce using rule 33 (expr -> NOT expr .)
    OF              reduce using rule 33 (expr -> NOT expr .)
    LOOP            reduce using rule 33 (expr -> NOT expr .)
    THEN            reduce using rule 33 (expr -> NOT expr .)
    )               reduce using rule 33 (expr -> NOT expr .)
    POOL            reduce using rule 33 (expr -> NOT expr .)
    ELSE            reduce using rule 33 (expr -> NOT expr .)
    FI              reduce using rule 33 (expr -> NOT expr .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 68

    (10) Metodo -> OBJECTID ( formal ) : TYPEID { . expr }
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 88

state 69

    (11) Metodo -> OBJECTID ( ) : TYPEID { expr . }
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    }               shift and go to state 89
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 70

    (12) Metodo -> OBJECTID ( ) : TYPEID { } .
    ;               reduce using rule 12 (Metodo -> OBJECTID ( ) : TYPEID { } .)


state 71

    (26) expr -> OBJECTID ( ) .
    @               reduce using rule 26 (expr -> OBJECTID ( ) .)
    =               reduce using rule 26 (expr -> OBJECTID ( ) .)
    LE              reduce using rule 26 (expr -> OBJECTID ( ) .)
    <               reduce using rule 26 (expr -> OBJECTID ( ) .)
    /               reduce using rule 26 (expr -> OBJECTID ( ) .)
    *               reduce using rule 26 (expr -> OBJECTID ( ) .)
    -               reduce using rule 26 (expr -> OBJECTID ( ) .)
    +               reduce using rule 26 (expr -> OBJECTID ( ) .)
    ;               reduce using rule 26 (expr -> OBJECTID ( ) .)
    }               reduce using rule 26 (expr -> OBJECTID ( ) .)
    OF              reduce using rule 26 (expr -> OBJECTID ( ) .)
    LOOP            reduce using rule 26 (expr -> OBJECTID ( ) .)
    THEN            reduce using rule 26 (expr -> OBJECTID ( ) .)
    )               reduce using rule 26 (expr -> OBJECTID ( ) .)
    POOL            reduce using rule 26 (expr -> OBJECTID ( ) .)
    ELSE            reduce using rule 26 (expr -> OBJECTID ( ) .)
    FI              reduce using rule 26 (expr -> OBJECTID ( ) .)


state 72

    (27) expr -> OBJECTID ( expr . )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    )               shift and go to state 90
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 73

    (41) expr -> OBJECTID ASSIGN expr .
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    @               reduce using rule 41 (expr -> OBJECTID ASSIGN expr .)
    =               reduce using rule 41 (expr -> OBJECTID ASSIGN expr .)
    LE              reduce using rule 41 (expr -> OBJECTID ASSIGN expr .)
    <               reduce using rule 41 (expr -> OBJECTID ASSIGN expr .)
    ;               reduce using rule 41 (expr -> OBJECTID ASSIGN expr .)
    }               reduce using rule 41 (expr -> OBJECTID ASSIGN expr .)
    OF              reduce using rule 41 (expr -> OBJECTID ASSIGN expr .)
    LOOP            reduce using rule 41 (expr -> OBJECTID ASSIGN expr .)
    THEN            reduce using rule 41 (expr -> OBJECTID ASSIGN expr .)
    )               reduce using rule 41 (expr -> OBJECTID ASSIGN expr .)
    POOL            reduce using rule 41 (expr -> OBJECTID ASSIGN expr .)
    ELSE            reduce using rule 41 (expr -> OBJECTID ASSIGN expr .)
    FI              reduce using rule 41 (expr -> OBJECTID ASSIGN expr .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 74

    (28) expr -> expr @ TYPEID . . OBJECTID ( expr )
    (29) expr -> expr @ TYPEID . . OBJECTID ( )
    .               shift and go to state 91


state 75

    (34) expr -> expr = expr .
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 34 (expr -> expr = expr .)
    }               reduce using rule 34 (expr -> expr = expr .)
    OF              reduce using rule 34 (expr -> expr = expr .)
    LOOP            reduce using rule 34 (expr -> expr = expr .)
    THEN            reduce using rule 34 (expr -> expr = expr .)
    )               reduce using rule 34 (expr -> expr = expr .)
    POOL            reduce using rule 34 (expr -> expr = expr .)
    ELSE            reduce using rule 34 (expr -> expr = expr .)
    FI              reduce using rule 34 (expr -> expr = expr .)
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 76

    (35) expr -> expr LE expr .
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 35 (expr -> expr LE expr .)
    }               reduce using rule 35 (expr -> expr LE expr .)
    OF              reduce using rule 35 (expr -> expr LE expr .)
    LOOP            reduce using rule 35 (expr -> expr LE expr .)
    THEN            reduce using rule 35 (expr -> expr LE expr .)
    )               reduce using rule 35 (expr -> expr LE expr .)
    POOL            reduce using rule 35 (expr -> expr LE expr .)
    ELSE            reduce using rule 35 (expr -> expr LE expr .)
    FI              reduce using rule 35 (expr -> expr LE expr .)
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 77

    (36) expr -> expr < expr .
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 36 (expr -> expr < expr .)
    }               reduce using rule 36 (expr -> expr < expr .)
    OF              reduce using rule 36 (expr -> expr < expr .)
    LOOP            reduce using rule 36 (expr -> expr < expr .)
    THEN            reduce using rule 36 (expr -> expr < expr .)
    )               reduce using rule 36 (expr -> expr < expr .)
    POOL            reduce using rule 36 (expr -> expr < expr .)
    ELSE            reduce using rule 36 (expr -> expr < expr .)
    FI              reduce using rule 36 (expr -> expr < expr .)
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 78

    (37) expr -> expr / expr .
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    @               reduce using rule 37 (expr -> expr / expr .)
    =               reduce using rule 37 (expr -> expr / expr .)
    LE              reduce using rule 37 (expr -> expr / expr .)
    <               reduce using rule 37 (expr -> expr / expr .)
    /               reduce using rule 37 (expr -> expr / expr .)
    *               reduce using rule 37 (expr -> expr / expr .)
    -               reduce using rule 37 (expr -> expr / expr .)
    +               reduce using rule 37 (expr -> expr / expr .)
    ;               reduce using rule 37 (expr -> expr / expr .)
    }               reduce using rule 37 (expr -> expr / expr .)
    OF              reduce using rule 37 (expr -> expr / expr .)
    LOOP            reduce using rule 37 (expr -> expr / expr .)
    THEN            reduce using rule 37 (expr -> expr / expr .)
    )               reduce using rule 37 (expr -> expr / expr .)
    POOL            reduce using rule 37 (expr -> expr / expr .)
    ELSE            reduce using rule 37 (expr -> expr / expr .)
    FI              reduce using rule 37 (expr -> expr / expr .)


state 79

    (38) expr -> expr * expr .
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    @               reduce using rule 38 (expr -> expr * expr .)
    =               reduce using rule 38 (expr -> expr * expr .)
    LE              reduce using rule 38 (expr -> expr * expr .)
    <               reduce using rule 38 (expr -> expr * expr .)
    /               reduce using rule 38 (expr -> expr * expr .)
    *               reduce using rule 38 (expr -> expr * expr .)
    -               reduce using rule 38 (expr -> expr * expr .)
    +               reduce using rule 38 (expr -> expr * expr .)
    ;               reduce using rule 38 (expr -> expr * expr .)
    }               reduce using rule 38 (expr -> expr * expr .)
    OF              reduce using rule 38 (expr -> expr * expr .)
    LOOP            reduce using rule 38 (expr -> expr * expr .)
    THEN            reduce using rule 38 (expr -> expr * expr .)
    )               reduce using rule 38 (expr -> expr * expr .)
    POOL            reduce using rule 38 (expr -> expr * expr .)
    ELSE            reduce using rule 38 (expr -> expr * expr .)
    FI              reduce using rule 38 (expr -> expr * expr .)


state 80

    (39) expr -> expr - expr .
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    @               reduce using rule 39 (expr -> expr - expr .)
    =               reduce using rule 39 (expr -> expr - expr .)
    LE              reduce using rule 39 (expr -> expr - expr .)
    <               reduce using rule 39 (expr -> expr - expr .)
    -               reduce using rule 39 (expr -> expr - expr .)
    +               reduce using rule 39 (expr -> expr - expr .)
    ;               reduce using rule 39 (expr -> expr - expr .)
    }               reduce using rule 39 (expr -> expr - expr .)
    OF              reduce using rule 39 (expr -> expr - expr .)
    LOOP            reduce using rule 39 (expr -> expr - expr .)
    THEN            reduce using rule 39 (expr -> expr - expr .)
    )               reduce using rule 39 (expr -> expr - expr .)
    POOL            reduce using rule 39 (expr -> expr - expr .)
    ELSE            reduce using rule 39 (expr -> expr - expr .)
    FI              reduce using rule 39 (expr -> expr - expr .)
    /               shift and go to state 54
    *               shift and go to state 55


state 81

    (40) expr -> expr + expr .
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    @               reduce using rule 40 (expr -> expr + expr .)
    =               reduce using rule 40 (expr -> expr + expr .)
    LE              reduce using rule 40 (expr -> expr + expr .)
    <               reduce using rule 40 (expr -> expr + expr .)
    -               reduce using rule 40 (expr -> expr + expr .)
    +               reduce using rule 40 (expr -> expr + expr .)
    ;               reduce using rule 40 (expr -> expr + expr .)
    }               reduce using rule 40 (expr -> expr + expr .)
    OF              reduce using rule 40 (expr -> expr + expr .)
    LOOP            reduce using rule 40 (expr -> expr + expr .)
    THEN            reduce using rule 40 (expr -> expr + expr .)
    )               reduce using rule 40 (expr -> expr + expr .)
    POOL            reduce using rule 40 (expr -> expr + expr .)
    ELSE            reduce using rule 40 (expr -> expr + expr .)
    FI              reduce using rule 40 (expr -> expr + expr .)
    /               shift and go to state 54
    *               shift and go to state 55


state 82

    (19) expr -> { expr } .
    @               reduce using rule 19 (expr -> { expr } .)
    =               reduce using rule 19 (expr -> { expr } .)
    LE              reduce using rule 19 (expr -> { expr } .)
    <               reduce using rule 19 (expr -> { expr } .)
    /               reduce using rule 19 (expr -> { expr } .)
    *               reduce using rule 19 (expr -> { expr } .)
    -               reduce using rule 19 (expr -> { expr } .)
    +               reduce using rule 19 (expr -> { expr } .)
    ;               reduce using rule 19 (expr -> { expr } .)
    }               reduce using rule 19 (expr -> { expr } .)
    OF              reduce using rule 19 (expr -> { expr } .)
    LOOP            reduce using rule 19 (expr -> { expr } .)
    THEN            reduce using rule 19 (expr -> { expr } .)
    )               reduce using rule 19 (expr -> { expr } .)
    POOL            reduce using rule 19 (expr -> { expr } .)
    ELSE            reduce using rule 19 (expr -> { expr } .)
    FI              reduce using rule 19 (expr -> { expr } .)


state 83

    (21) expr -> CASE expr OF . { cuerpo_case } ESAC
    (22) expr -> CASE expr OF . { } ESAC
    {               shift and go to state 92


state 84

    (23) expr -> LET OBJECTID : . TYPEID lista_inicia IN expr
    TYPEID          shift and go to state 93


state 85

    (24) expr -> WHILE expr LOOP . expr POOL
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 94

state 86

    (25) expr -> IF expr THEN . expr ELSE expr FI
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 95

state 87

    (30) expr -> ( expr ) .
    @               reduce using rule 30 (expr -> ( expr ) .)
    =               reduce using rule 30 (expr -> ( expr ) .)
    LE              reduce using rule 30 (expr -> ( expr ) .)
    <               reduce using rule 30 (expr -> ( expr ) .)
    /               reduce using rule 30 (expr -> ( expr ) .)
    *               reduce using rule 30 (expr -> ( expr ) .)
    -               reduce using rule 30 (expr -> ( expr ) .)
    +               reduce using rule 30 (expr -> ( expr ) .)
    ;               reduce using rule 30 (expr -> ( expr ) .)
    }               reduce using rule 30 (expr -> ( expr ) .)
    OF              reduce using rule 30 (expr -> ( expr ) .)
    LOOP            reduce using rule 30 (expr -> ( expr ) .)
    THEN            reduce using rule 30 (expr -> ( expr ) .)
    )               reduce using rule 30 (expr -> ( expr ) .)
    POOL            reduce using rule 30 (expr -> ( expr ) .)
    ELSE            reduce using rule 30 (expr -> ( expr ) .)
    FI              reduce using rule 30 (expr -> ( expr ) .)


state 88

    (10) Metodo -> OBJECTID ( formal ) : TYPEID { expr . }
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    }               shift and go to state 96
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 89

    (11) Metodo -> OBJECTID ( ) : TYPEID { expr } .
    ;               reduce using rule 11 (Metodo -> OBJECTID ( ) : TYPEID { expr } .)


state 90

    (27) expr -> OBJECTID ( expr ) .
    @               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    =               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    LE              reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    <               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    /               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    *               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    -               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    +               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    ;               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    }               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    OF              reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    LOOP            reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    THEN            reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    )               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    POOL            reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    ELSE            reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    FI              reduce using rule 27 (expr -> OBJECTID ( expr ) .)


state 91

    (28) expr -> expr @ TYPEID . . OBJECTID ( expr )
    (29) expr -> expr @ TYPEID . . OBJECTID ( )
    OBJECTID        shift and go to state 97


state 92

    (21) expr -> CASE expr OF { . cuerpo_case } ESAC
    (22) expr -> CASE expr OF { . } ESAC
    (43) cuerpo_case -> . cuerpo_case OBJECTID : TYPEID DARROW expr ;
    (44) cuerpo_case -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 99
    OBJECTID        reduce using rule 44 (cuerpo_case -> .)

    cuerpo_case                    shift and go to state 98

state 93

    (23) expr -> LET OBJECTID : TYPEID . lista_inicia IN expr
    (42) lista_inicia -> . OBJECTID : TYPEID
    OBJECTID        shift and go to state 100

    lista_inicia                   shift and go to state 101

state 94

    (24) expr -> WHILE expr LOOP expr . POOL
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    POOL            shift and go to state 102
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 95

    (25) expr -> IF expr THEN expr . ELSE expr FI
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    ELSE            shift and go to state 103
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 96

    (10) Metodo -> OBJECTID ( formal ) : TYPEID { expr } .
    ;               reduce using rule 10 (Metodo -> OBJECTID ( formal ) : TYPEID { expr } .)


state 97

    (28) expr -> expr @ TYPEID . OBJECTID . ( expr )
    (29) expr -> expr @ TYPEID . OBJECTID . ( )
    (               shift and go to state 104


state 98

    (21) expr -> CASE expr OF { cuerpo_case . } ESAC
    (43) cuerpo_case -> cuerpo_case . OBJECTID : TYPEID DARROW expr ;
    }               shift and go to state 105
    OBJECTID        shift and go to state 106


state 99

    (22) expr -> CASE expr OF { } . ESAC
    ESAC            shift and go to state 107


state 100

    (42) lista_inicia -> OBJECTID . : TYPEID
    :               shift and go to state 108


state 101

    (23) expr -> LET OBJECTID : TYPEID lista_inicia . IN expr
    IN              shift and go to state 109


state 102

    (24) expr -> WHILE expr LOOP expr POOL .
    @               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    =               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    LE              reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    <               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    /               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    *               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    -               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    +               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    ;               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    }               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    OF              reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    LOOP            reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    THEN            reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    )               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    POOL            reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    ELSE            reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    FI              reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)


state 103

    (25) expr -> IF expr THEN expr ELSE . expr FI
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 110

state 104

    (28) expr -> expr @ TYPEID . OBJECTID ( . expr )
    (29) expr -> expr @ TYPEID . OBJECTID ( . )
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    )               shift and go to state 112
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 111

state 105

    (21) expr -> CASE expr OF { cuerpo_case } . ESAC
    ESAC            shift and go to state 113


state 106

    (43) cuerpo_case -> cuerpo_case OBJECTID . : TYPEID DARROW expr ;
    :               shift and go to state 114


state 107

    (22) expr -> CASE expr OF { } ESAC .
    @               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    =               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    LE              reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    <               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    /               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    *               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    -               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    +               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    ;               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    }               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    OF              reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    LOOP            reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    THEN            reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    )               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    POOL            reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    ELSE            reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    FI              reduce using rule 22 (expr -> CASE expr OF { } ESAC .)


state 108

    (42) lista_inicia -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 115


state 109

    (23) expr -> LET OBJECTID : TYPEID lista_inicia IN . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 116

state 110

    (25) expr -> IF expr THEN expr ELSE expr . FI
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    FI              shift and go to state 117
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 111

    (28) expr -> expr @ TYPEID . OBJECTID ( expr . )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    )               shift and go to state 118
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 112

    (29) expr -> expr @ TYPEID . OBJECTID ( ) .
    @               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    =               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LE              reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    <               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    /               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    *               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    -               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    +               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ;               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    }               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    OF              reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LOOP            reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    THEN            reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    )               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    POOL            reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ELSE            reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    FI              reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)


state 113

    (21) expr -> CASE expr OF { cuerpo_case } ESAC .
    @               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    =               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    LE              reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    <               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    /               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    *               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    -               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    +               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    ;               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    }               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    OF              reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    LOOP            reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    THEN            reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    )               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    POOL            reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    ELSE            reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    FI              reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)


state 114

    (43) cuerpo_case -> cuerpo_case OBJECTID : . TYPEID DARROW expr ;
    TYPEID          shift and go to state 119


state 115

    (42) lista_inicia -> OBJECTID : TYPEID .
    IN              reduce using rule 42 (lista_inicia -> OBJECTID : TYPEID .)


state 116

    (23) expr -> LET OBJECTID : TYPEID lista_inicia IN expr .
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    }               reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    OF              reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    LOOP            reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    THEN            reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    )               reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    POOL            reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    ELSE            reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    FI              reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 117

    (25) expr -> IF expr THEN expr ELSE expr FI .
    @               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    =               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    LE              reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    <               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    /               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    *               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    -               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    +               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    ;               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    }               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    OF              reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    LOOP            reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    THEN            reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    )               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    POOL            reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    ELSE            reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    FI              reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)


state 118

    (28) expr -> expr @ TYPEID . OBJECTID ( expr ) .
    @               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    =               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    LE              reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    <               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    /               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    *               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    -               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    +               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    ;               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    }               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    OF              reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    LOOP            reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    THEN            reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    )               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    POOL            reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    ELSE            reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    FI              reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)


state 119

    (43) cuerpo_case -> cuerpo_case OBJECTID : TYPEID . DARROW expr ;
    DARROW          shift and go to state 120


state 120

    (43) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW . expr ;
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr = expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr < expr
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr - expr
    (40) expr -> . expr + expr
    (41) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 33
    STR_CONST       shift and go to state 34
    INT_CONST       shift and go to state 35
    OBJECTID        shift and go to state 31
    {               shift and go to state 36
    NEW             shift and go to state 37
    CASE            shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    (               shift and go to state 42
    ~               shift and go to state 43
    ISVOID          shift and go to state 44
    NOT             shift and go to state 45

    expr                           shift and go to state 121

state 121

    (43) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr . ;
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (34) expr -> expr . = expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . < expr
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . - expr
    (40) expr -> expr . + expr
    ;               shift and go to state 122
    @               shift and go to state 50
    =               shift and go to state 51
    LE              shift and go to state 52
    <               shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 122

    (43) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ; .
    }               reduce using rule 43 (cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ; .)
    OBJECTID        reduce using rule 43 (cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ; .)


Conflicts:

shift/reduce conflict for } in state 7 resolved as shift
shift/reduce conflict for ) in state 18 resolved as shift
shift/reduce conflict for @ in state 65 resolved as shift
shift/reduce conflict for = in state 65 resolved as shift
shift/reduce conflict for LE in state 65 resolved as shift
shift/reduce conflict for < in state 65 resolved as shift
shift/reduce conflict for / in state 65 resolved as shift
shift/reduce conflict for * in state 65 resolved as shift
shift/reduce conflict for - in state 65 resolved as shift
shift/reduce conflict for + in state 65 resolved as shift
shift/reduce conflict for @ in state 75 resolved as shift
shift/reduce conflict for = in state 75 resolved as shift
shift/reduce conflict for LE in state 75 resolved as shift
shift/reduce conflict for < in state 75 resolved as shift
shift/reduce conflict for / in state 75 resolved as shift
shift/reduce conflict for * in state 75 resolved as shift
shift/reduce conflict for - in state 75 resolved as shift
shift/reduce conflict for + in state 75 resolved as shift
shift/reduce conflict for @ in state 76 resolved as shift
shift/reduce conflict for = in state 76 resolved as shift
shift/reduce conflict for LE in state 76 resolved as shift
shift/reduce conflict for < in state 76 resolved as shift
shift/reduce conflict for / in state 76 resolved as shift
shift/reduce conflict for * in state 76 resolved as shift
shift/reduce conflict for - in state 76 resolved as shift
shift/reduce conflict for + in state 76 resolved as shift
shift/reduce conflict for @ in state 77 resolved as shift
shift/reduce conflict for = in state 77 resolved as shift
shift/reduce conflict for LE in state 77 resolved as shift
shift/reduce conflict for < in state 77 resolved as shift
shift/reduce conflict for / in state 77 resolved as shift
shift/reduce conflict for * in state 77 resolved as shift
shift/reduce conflict for - in state 77 resolved as shift
shift/reduce conflict for + in state 77 resolved as shift
shift/reduce conflict for } in state 92 resolved as shift
shift/reduce conflict for @ in state 116 resolved as shift
shift/reduce conflict for = in state 116 resolved as shift
shift/reduce conflict for LE in state 116 resolved as shift
shift/reduce conflict for < in state 116 resolved as shift
shift/reduce conflict for / in state 116 resolved as shift
shift/reduce conflict for * in state 116 resolved as shift
shift/reduce conflict for - in state 116 resolved as shift
shift/reduce conflict for + in state 116 resolved as shift