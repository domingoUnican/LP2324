Grammar:

Rule 0     S' -> Programa
Rule 1     Programa -> Programa error
Rule 2     Programa -> Programa Clase ;
Rule 3     Programa -> Clase ;
Rule 4     Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
Rule 5     Clase -> CLASS TYPEID INHERITS TYPEID { }
Rule 6     Clase -> CLASS TYPEID { cuerpo_clase }
Rule 7     Clase -> CLASS TYPEID { }
Rule 8     cuerpo_clase -> cuerpo_clase caracteristica ;
Rule 9     cuerpo_clase -> <empty>
Rule 10    caracteristica -> Metodo
Rule 11    caracteristica -> Atributo
Rule 12    Atributo -> OBJECTID : TYPEID ASSIGN expr  [precedence=right, level=1]
Rule 13    Atributo -> OBJECTID : TYPEID
Rule 14    Metodo -> OBJECTID ( formal ) : TYPEID { expr }
Rule 15    Metodo -> OBJECTID ( ) : TYPEID { expr }
Rule 16    Metodo -> OBJECTID ( ) : TYPEID { }
Rule 17    formal -> OBJECTID : TYPEID
Rule 18    formal -> <empty>
Rule 19    expr -> { bloque }
Rule 20    expr -> BOOL_CONST
Rule 21    expr -> STR_CONST
Rule 22    expr -> INT_CONST
Rule 23    expr -> OBJECTID
Rule 24    expr -> { expr }
Rule 25    expr -> NEW TYPEID
Rule 26    expr -> CASE expr OF { cuerpo_case } ESAC
Rule 27    expr -> CASE expr OF { } ESAC
Rule 28    expr -> LET OBJECTID : TYPEID lista_inicia IN expr
Rule 29    expr -> WHILE expr LOOP expr POOL
Rule 30    expr -> IF expr THEN expr ELSE expr FI
Rule 31    expr -> OBJECTID ( )
Rule 32    expr -> OBJECTID ( expr )
Rule 33    expr -> expr @ TYPEID . OBJECTID ( expr )
Rule 34    expr -> expr @ TYPEID . OBJECTID ( )
Rule 35    expr -> ( expr )
Rule 36    expr -> ~ expr
Rule 37    expr -> ISVOID expr  [precedence=left, level=5]
Rule 38    expr -> NOT expr  [precedence=left, level=2]
Rule 39    expr -> expr = expr
Rule 40    expr -> expr LE expr
Rule 41    expr -> expr < expr
Rule 42    expr -> expr / expr  [precedence=left, level=4]
Rule 43    expr -> expr * expr  [precedence=left, level=4]
Rule 44    expr -> expr - expr  [precedence=left, level=3]
Rule 45    expr -> expr + expr  [precedence=left, level=3]
Rule 46    expr -> OBJECTID ASSIGN expr  [precedence=right, level=1]
Rule 47    lista_inicia -> OBJECTID : TYPEID
Rule 48    cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ;
Rule 49    cuerpo_case -> <empty>
Rule 50    bloque -> bloque error ;
Rule 51    bloque -> bloque expr ;
Rule 52    bloque -> expr ;

Unused terminals:

    NUMBER
    COMMENT_1LINEA
    COMMENT_BLOQUE
    ERROR

Terminals, with rules where they appear:

(                    : 14 15 16 31 32 33 34 35
)                    : 14 15 16 31 32 33 34 35
*                    : 43
+                    : 45
-                    : 44
.                    : 33 34
/                    : 42
:                    : 12 13 14 15 16 17 28 47 48
;                    : 2 3 8 48 50 51 52
<                    : 41
=                    : 39
@                    : 33 34
ASSIGN               : 12 46
BOOL_CONST           : 20
CASE                 : 26 27
CLASS                : 4 5 6 7
COMMENT_1LINEA       : 
COMMENT_BLOQUE       : 
DARROW               : 48
ELSE                 : 30
ERROR                : 
ESAC                 : 26 27
FI                   : 30
IF                   : 30
IN                   : 28
INHERITS             : 4 5
INT_CONST            : 22
ISVOID               : 37
LE                   : 40
LET                  : 28
LOOP                 : 29
NEW                  : 25
NOT                  : 38
NUMBER               : 
OBJECTID             : 12 13 14 15 16 17 23 28 31 32 33 34 46 47 48
OF                   : 26 27
POOL                 : 29
STR_CONST            : 21
THEN                 : 30
TYPEID               : 4 4 5 5 6 7 12 13 14 15 16 17 25 28 33 34 47 48
WHILE                : 29
error                : 1 50
{                    : 4 5 6 7 14 15 16 19 24 26 27
}                    : 4 5 6 7 14 15 16 19 24 26 27
~                    : 36

Nonterminals, with rules where they appear:

Atributo             : 11
Clase                : 2 3
Metodo               : 10
Programa             : 1 2 0
bloque               : 19 50 51
caracteristica       : 8
cuerpo_case          : 26 48
cuerpo_clase         : 4 6 8
expr                 : 12 14 15 24 26 27 28 29 29 30 30 30 32 33 33 34 35 36 37 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 48 51 52
formal               : 14
lista_inicia         : 28


state 0

    (0) S' -> . Programa
    (1) Programa -> . Programa error
    (2) Programa -> . Programa Clase ;
    (3) Programa -> . Clase ;
    (4) Clase -> . CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> . CLASS TYPEID INHERITS TYPEID { }
    (6) Clase -> . CLASS TYPEID { cuerpo_clase }
    (7) Clase -> . CLASS TYPEID { }
    CLASS           shift and go to state 3

    Programa                       shift and go to state 1
    Clase                          shift and go to state 2

state 1

    (0) S' -> Programa .
    (1) Programa -> Programa . error
    (2) Programa -> Programa . Clase ;
    (4) Clase -> . CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> . CLASS TYPEID INHERITS TYPEID { }
    (6) Clase -> . CLASS TYPEID { cuerpo_clase }
    (7) Clase -> . CLASS TYPEID { }
    error           shift and go to state 4
    CLASS           shift and go to state 3

    Clase                          shift and go to state 5

state 2

    (3) Programa -> Clase . ;
    ;               shift and go to state 6


state 3

    (4) Clase -> CLASS . TYPEID INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> CLASS . TYPEID INHERITS TYPEID { }
    (6) Clase -> CLASS . TYPEID { cuerpo_clase }
    (7) Clase -> CLASS . TYPEID { }
    TYPEID          shift and go to state 7


state 4

    (1) Programa -> Programa error .
    error           reduce using rule 1 (Programa -> Programa error .)
    CLASS           reduce using rule 1 (Programa -> Programa error .)
    $end            reduce using rule 1 (Programa -> Programa error .)


state 5

    (2) Programa -> Programa Clase . ;
    ;               shift and go to state 8


state 6

    (3) Programa -> Clase ; .
    error           reduce using rule 3 (Programa -> Clase ; .)
    CLASS           reduce using rule 3 (Programa -> Clase ; .)
    $end            reduce using rule 3 (Programa -> Clase ; .)


state 7

    (4) Clase -> CLASS TYPEID . INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> CLASS TYPEID . INHERITS TYPEID { }
    (6) Clase -> CLASS TYPEID . { cuerpo_clase }
    (7) Clase -> CLASS TYPEID . { }
    INHERITS        shift and go to state 9
    {               shift and go to state 10


state 8

    (2) Programa -> Programa Clase ; .
    error           reduce using rule 2 (Programa -> Programa Clase ; .)
    CLASS           reduce using rule 2 (Programa -> Programa Clase ; .)
    $end            reduce using rule 2 (Programa -> Programa Clase ; .)


state 9

    (4) Clase -> CLASS TYPEID INHERITS . TYPEID { cuerpo_clase }
    (5) Clase -> CLASS TYPEID INHERITS . TYPEID { }
    TYPEID          shift and go to state 11


state 10

    (6) Clase -> CLASS TYPEID { . cuerpo_clase }
    (7) Clase -> CLASS TYPEID { . }
    (8) cuerpo_clase -> . cuerpo_clase caracteristica ;
    (9) cuerpo_clase -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 13
    OBJECTID        reduce using rule 9 (cuerpo_clase -> .)

    cuerpo_clase                   shift and go to state 12

state 11

    (4) Clase -> CLASS TYPEID INHERITS TYPEID . { cuerpo_clase }
    (5) Clase -> CLASS TYPEID INHERITS TYPEID . { }
    {               shift and go to state 14


state 12

    (6) Clase -> CLASS TYPEID { cuerpo_clase . }
    (8) cuerpo_clase -> cuerpo_clase . caracteristica ;
    (10) caracteristica -> . Metodo
    (11) caracteristica -> . Atributo
    (14) Metodo -> . OBJECTID ( formal ) : TYPEID { expr }
    (15) Metodo -> . OBJECTID ( ) : TYPEID { expr }
    (16) Metodo -> . OBJECTID ( ) : TYPEID { }
    (12) Atributo -> . OBJECTID : TYPEID ASSIGN expr
    (13) Atributo -> . OBJECTID : TYPEID
    }               shift and go to state 15
    OBJECTID        shift and go to state 19

    caracteristica                 shift and go to state 16
    Metodo                         shift and go to state 17
    Atributo                       shift and go to state 18

state 13

    (7) Clase -> CLASS TYPEID { } .
    ;               reduce using rule 7 (Clase -> CLASS TYPEID { } .)


state 14

    (4) Clase -> CLASS TYPEID INHERITS TYPEID { . cuerpo_clase }
    (5) Clase -> CLASS TYPEID INHERITS TYPEID { . }
    (8) cuerpo_clase -> . cuerpo_clase caracteristica ;
    (9) cuerpo_clase -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 21
    OBJECTID        reduce using rule 9 (cuerpo_clase -> .)

    cuerpo_clase                   shift and go to state 20

state 15

    (6) Clase -> CLASS TYPEID { cuerpo_clase } .
    ;               reduce using rule 6 (Clase -> CLASS TYPEID { cuerpo_clase } .)


state 16

    (8) cuerpo_clase -> cuerpo_clase caracteristica . ;
    ;               shift and go to state 22


state 17

    (10) caracteristica -> Metodo .
    ;               reduce using rule 10 (caracteristica -> Metodo .)


state 18

    (11) caracteristica -> Atributo .
    ;               reduce using rule 11 (caracteristica -> Atributo .)


state 19

    (14) Metodo -> OBJECTID . ( formal ) : TYPEID { expr }
    (15) Metodo -> OBJECTID . ( ) : TYPEID { expr }
    (16) Metodo -> OBJECTID . ( ) : TYPEID { }
    (12) Atributo -> OBJECTID . : TYPEID ASSIGN expr
    (13) Atributo -> OBJECTID . : TYPEID
    (               shift and go to state 23
    :               shift and go to state 24


state 20

    (4) Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase . }
    (8) cuerpo_clase -> cuerpo_clase . caracteristica ;
    (10) caracteristica -> . Metodo
    (11) caracteristica -> . Atributo
    (14) Metodo -> . OBJECTID ( formal ) : TYPEID { expr }
    (15) Metodo -> . OBJECTID ( ) : TYPEID { expr }
    (16) Metodo -> . OBJECTID ( ) : TYPEID { }
    (12) Atributo -> . OBJECTID : TYPEID ASSIGN expr
    (13) Atributo -> . OBJECTID : TYPEID
    }               shift and go to state 25
    OBJECTID        shift and go to state 19

    caracteristica                 shift and go to state 16
    Metodo                         shift and go to state 17
    Atributo                       shift and go to state 18

state 21

    (5) Clase -> CLASS TYPEID INHERITS TYPEID { } .
    ;               reduce using rule 5 (Clase -> CLASS TYPEID INHERITS TYPEID { } .)


state 22

    (8) cuerpo_clase -> cuerpo_clase caracteristica ; .
    }               reduce using rule 8 (cuerpo_clase -> cuerpo_clase caracteristica ; .)
    OBJECTID        reduce using rule 8 (cuerpo_clase -> cuerpo_clase caracteristica ; .)


state 23

    (14) Metodo -> OBJECTID ( . formal ) : TYPEID { expr }
    (15) Metodo -> OBJECTID ( . ) : TYPEID { expr }
    (16) Metodo -> OBJECTID ( . ) : TYPEID { }
    (17) formal -> . OBJECTID : TYPEID
    (18) formal -> .
  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 28
    OBJECTID        shift and go to state 26

    formal                         shift and go to state 27

state 24

    (12) Atributo -> OBJECTID : . TYPEID ASSIGN expr
    (13) Atributo -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 29


state 25

    (4) Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase } .
    ;               reduce using rule 4 (Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase } .)


state 26

    (17) formal -> OBJECTID . : TYPEID
    :               shift and go to state 30


state 27

    (14) Metodo -> OBJECTID ( formal . ) : TYPEID { expr }
    )               shift and go to state 31


state 28

    (15) Metodo -> OBJECTID ( ) . : TYPEID { expr }
    (16) Metodo -> OBJECTID ( ) . : TYPEID { }
    :               shift and go to state 32


state 29

    (12) Atributo -> OBJECTID : TYPEID . ASSIGN expr
    (13) Atributo -> OBJECTID : TYPEID .
    ASSIGN          shift and go to state 33
    ;               reduce using rule 13 (Atributo -> OBJECTID : TYPEID .)


state 30

    (17) formal -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 34


state 31

    (14) Metodo -> OBJECTID ( formal ) . : TYPEID { expr }
    :               shift and go to state 35


state 32

    (15) Metodo -> OBJECTID ( ) : . TYPEID { expr }
    (16) Metodo -> OBJECTID ( ) : . TYPEID { }
    TYPEID          shift and go to state 36


state 33

    (12) Atributo -> OBJECTID : TYPEID ASSIGN . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 38

state 34

    (17) formal -> OBJECTID : TYPEID .
    )               reduce using rule 17 (formal -> OBJECTID : TYPEID .)


state 35

    (14) Metodo -> OBJECTID ( formal ) : . TYPEID { expr }
    TYPEID          shift and go to state 52


state 36

    (15) Metodo -> OBJECTID ( ) : TYPEID . { expr }
    (16) Metodo -> OBJECTID ( ) : TYPEID . { }
    {               shift and go to state 53


state 37

    (23) expr -> OBJECTID .
    (31) expr -> OBJECTID . ( )
    (32) expr -> OBJECTID . ( expr )
    (46) expr -> OBJECTID . ASSIGN expr
    @               reduce using rule 23 (expr -> OBJECTID .)
    =               reduce using rule 23 (expr -> OBJECTID .)
    LE              reduce using rule 23 (expr -> OBJECTID .)
    <               reduce using rule 23 (expr -> OBJECTID .)
    /               reduce using rule 23 (expr -> OBJECTID .)
    *               reduce using rule 23 (expr -> OBJECTID .)
    -               reduce using rule 23 (expr -> OBJECTID .)
    +               reduce using rule 23 (expr -> OBJECTID .)
    ;               reduce using rule 23 (expr -> OBJECTID .)
    }               reduce using rule 23 (expr -> OBJECTID .)
    OF              reduce using rule 23 (expr -> OBJECTID .)
    LOOP            reduce using rule 23 (expr -> OBJECTID .)
    THEN            reduce using rule 23 (expr -> OBJECTID .)
    )               reduce using rule 23 (expr -> OBJECTID .)
    POOL            reduce using rule 23 (expr -> OBJECTID .)
    ELSE            reduce using rule 23 (expr -> OBJECTID .)
    FI              reduce using rule 23 (expr -> OBJECTID .)
    (               shift and go to state 54
    ASSIGN          shift and go to state 55


state 38

    (12) Atributo -> OBJECTID : TYPEID ASSIGN expr .
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    ;               reduce using rule 12 (Atributo -> OBJECTID : TYPEID ASSIGN expr .)
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 39

    (19) expr -> { . bloque }
    (24) expr -> { . expr }
    (50) bloque -> . bloque error ;
    (51) bloque -> . bloque expr ;
    (52) bloque -> . expr ;
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    bloque                         shift and go to state 64
    expr                           shift and go to state 65

state 40

    (20) expr -> BOOL_CONST .
    @               reduce using rule 20 (expr -> BOOL_CONST .)
    =               reduce using rule 20 (expr -> BOOL_CONST .)
    LE              reduce using rule 20 (expr -> BOOL_CONST .)
    <               reduce using rule 20 (expr -> BOOL_CONST .)
    /               reduce using rule 20 (expr -> BOOL_CONST .)
    *               reduce using rule 20 (expr -> BOOL_CONST .)
    -               reduce using rule 20 (expr -> BOOL_CONST .)
    +               reduce using rule 20 (expr -> BOOL_CONST .)
    ;               reduce using rule 20 (expr -> BOOL_CONST .)
    }               reduce using rule 20 (expr -> BOOL_CONST .)
    OF              reduce using rule 20 (expr -> BOOL_CONST .)
    LOOP            reduce using rule 20 (expr -> BOOL_CONST .)
    THEN            reduce using rule 20 (expr -> BOOL_CONST .)
    )               reduce using rule 20 (expr -> BOOL_CONST .)
    POOL            reduce using rule 20 (expr -> BOOL_CONST .)
    ELSE            reduce using rule 20 (expr -> BOOL_CONST .)
    FI              reduce using rule 20 (expr -> BOOL_CONST .)


state 41

    (21) expr -> STR_CONST .
    @               reduce using rule 21 (expr -> STR_CONST .)
    =               reduce using rule 21 (expr -> STR_CONST .)
    LE              reduce using rule 21 (expr -> STR_CONST .)
    <               reduce using rule 21 (expr -> STR_CONST .)
    /               reduce using rule 21 (expr -> STR_CONST .)
    *               reduce using rule 21 (expr -> STR_CONST .)
    -               reduce using rule 21 (expr -> STR_CONST .)
    +               reduce using rule 21 (expr -> STR_CONST .)
    ;               reduce using rule 21 (expr -> STR_CONST .)
    }               reduce using rule 21 (expr -> STR_CONST .)
    OF              reduce using rule 21 (expr -> STR_CONST .)
    LOOP            reduce using rule 21 (expr -> STR_CONST .)
    THEN            reduce using rule 21 (expr -> STR_CONST .)
    )               reduce using rule 21 (expr -> STR_CONST .)
    POOL            reduce using rule 21 (expr -> STR_CONST .)
    ELSE            reduce using rule 21 (expr -> STR_CONST .)
    FI              reduce using rule 21 (expr -> STR_CONST .)


state 42

    (22) expr -> INT_CONST .
    @               reduce using rule 22 (expr -> INT_CONST .)
    =               reduce using rule 22 (expr -> INT_CONST .)
    LE              reduce using rule 22 (expr -> INT_CONST .)
    <               reduce using rule 22 (expr -> INT_CONST .)
    /               reduce using rule 22 (expr -> INT_CONST .)
    *               reduce using rule 22 (expr -> INT_CONST .)
    -               reduce using rule 22 (expr -> INT_CONST .)
    +               reduce using rule 22 (expr -> INT_CONST .)
    ;               reduce using rule 22 (expr -> INT_CONST .)
    }               reduce using rule 22 (expr -> INT_CONST .)
    OF              reduce using rule 22 (expr -> INT_CONST .)
    LOOP            reduce using rule 22 (expr -> INT_CONST .)
    THEN            reduce using rule 22 (expr -> INT_CONST .)
    )               reduce using rule 22 (expr -> INT_CONST .)
    POOL            reduce using rule 22 (expr -> INT_CONST .)
    ELSE            reduce using rule 22 (expr -> INT_CONST .)
    FI              reduce using rule 22 (expr -> INT_CONST .)


state 43

    (25) expr -> NEW . TYPEID
    TYPEID          shift and go to state 66


state 44

    (26) expr -> CASE . expr OF { cuerpo_case } ESAC
    (27) expr -> CASE . expr OF { } ESAC
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 67

state 45

    (28) expr -> LET . OBJECTID : TYPEID lista_inicia IN expr
    OBJECTID        shift and go to state 68


state 46

    (29) expr -> WHILE . expr LOOP expr POOL
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 69

state 47

    (30) expr -> IF . expr THEN expr ELSE expr FI
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 70

state 48

    (35) expr -> ( . expr )
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 71

state 49

    (36) expr -> ~ . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 72

state 50

    (37) expr -> ISVOID . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 73

state 51

    (38) expr -> NOT . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 74

state 52

    (14) Metodo -> OBJECTID ( formal ) : TYPEID . { expr }
    {               shift and go to state 75


state 53

    (15) Metodo -> OBJECTID ( ) : TYPEID { . expr }
    (16) Metodo -> OBJECTID ( ) : TYPEID { . }
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    }               shift and go to state 77
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 76

state 54

    (31) expr -> OBJECTID ( . )
    (32) expr -> OBJECTID ( . expr )
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    )               shift and go to state 78
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 79

state 55

    (46) expr -> OBJECTID ASSIGN . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 80

state 56

    (33) expr -> expr @ . TYPEID . OBJECTID ( expr )
    (34) expr -> expr @ . TYPEID . OBJECTID ( )
    TYPEID          shift and go to state 81


state 57

    (39) expr -> expr = . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 82

state 58

    (40) expr -> expr LE . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 83

state 59

    (41) expr -> expr < . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 84

state 60

    (42) expr -> expr / . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 85

state 61

    (43) expr -> expr * . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 86

state 62

    (44) expr -> expr - . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 87

state 63

    (45) expr -> expr + . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 88

state 64

    (19) expr -> { bloque . }
    (50) bloque -> bloque . error ;
    (51) bloque -> bloque . expr ;
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    }               shift and go to state 89
    error           shift and go to state 90
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 91

state 65

    (24) expr -> { expr . }
    (52) bloque -> expr . ;
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    }               shift and go to state 92
    ;               shift and go to state 93
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 66

    (25) expr -> NEW TYPEID .
    @               reduce using rule 25 (expr -> NEW TYPEID .)
    =               reduce using rule 25 (expr -> NEW TYPEID .)
    LE              reduce using rule 25 (expr -> NEW TYPEID .)
    <               reduce using rule 25 (expr -> NEW TYPEID .)
    /               reduce using rule 25 (expr -> NEW TYPEID .)
    *               reduce using rule 25 (expr -> NEW TYPEID .)
    -               reduce using rule 25 (expr -> NEW TYPEID .)
    +               reduce using rule 25 (expr -> NEW TYPEID .)
    ;               reduce using rule 25 (expr -> NEW TYPEID .)
    }               reduce using rule 25 (expr -> NEW TYPEID .)
    OF              reduce using rule 25 (expr -> NEW TYPEID .)
    LOOP            reduce using rule 25 (expr -> NEW TYPEID .)
    THEN            reduce using rule 25 (expr -> NEW TYPEID .)
    )               reduce using rule 25 (expr -> NEW TYPEID .)
    POOL            reduce using rule 25 (expr -> NEW TYPEID .)
    ELSE            reduce using rule 25 (expr -> NEW TYPEID .)
    FI              reduce using rule 25 (expr -> NEW TYPEID .)


state 67

    (26) expr -> CASE expr . OF { cuerpo_case } ESAC
    (27) expr -> CASE expr . OF { } ESAC
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    OF              shift and go to state 94
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 68

    (28) expr -> LET OBJECTID . : TYPEID lista_inicia IN expr
    :               shift and go to state 95


state 69

    (29) expr -> WHILE expr . LOOP expr POOL
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    LOOP            shift and go to state 96
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 70

    (30) expr -> IF expr . THEN expr ELSE expr FI
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    THEN            shift and go to state 97
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 71

    (35) expr -> ( expr . )
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    )               shift and go to state 98
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 72

    (36) expr -> ~ expr .
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 36 (expr -> ~ expr .)
    }               reduce using rule 36 (expr -> ~ expr .)
    OF              reduce using rule 36 (expr -> ~ expr .)
    LOOP            reduce using rule 36 (expr -> ~ expr .)
    THEN            reduce using rule 36 (expr -> ~ expr .)
    )               reduce using rule 36 (expr -> ~ expr .)
    POOL            reduce using rule 36 (expr -> ~ expr .)
    ELSE            reduce using rule 36 (expr -> ~ expr .)
    FI              reduce using rule 36 (expr -> ~ expr .)
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 73

    (37) expr -> ISVOID expr .
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    @               reduce using rule 37 (expr -> ISVOID expr .)
    =               reduce using rule 37 (expr -> ISVOID expr .)
    LE              reduce using rule 37 (expr -> ISVOID expr .)
    <               reduce using rule 37 (expr -> ISVOID expr .)
    /               reduce using rule 37 (expr -> ISVOID expr .)
    *               reduce using rule 37 (expr -> ISVOID expr .)
    -               reduce using rule 37 (expr -> ISVOID expr .)
    +               reduce using rule 37 (expr -> ISVOID expr .)
    ;               reduce using rule 37 (expr -> ISVOID expr .)
    }               reduce using rule 37 (expr -> ISVOID expr .)
    OF              reduce using rule 37 (expr -> ISVOID expr .)
    LOOP            reduce using rule 37 (expr -> ISVOID expr .)
    THEN            reduce using rule 37 (expr -> ISVOID expr .)
    )               reduce using rule 37 (expr -> ISVOID expr .)
    POOL            reduce using rule 37 (expr -> ISVOID expr .)
    ELSE            reduce using rule 37 (expr -> ISVOID expr .)
    FI              reduce using rule 37 (expr -> ISVOID expr .)


state 74

    (38) expr -> NOT expr .
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    @               reduce using rule 38 (expr -> NOT expr .)
    =               reduce using rule 38 (expr -> NOT expr .)
    LE              reduce using rule 38 (expr -> NOT expr .)
    <               reduce using rule 38 (expr -> NOT expr .)
    ;               reduce using rule 38 (expr -> NOT expr .)
    }               reduce using rule 38 (expr -> NOT expr .)
    OF              reduce using rule 38 (expr -> NOT expr .)
    LOOP            reduce using rule 38 (expr -> NOT expr .)
    THEN            reduce using rule 38 (expr -> NOT expr .)
    )               reduce using rule 38 (expr -> NOT expr .)
    POOL            reduce using rule 38 (expr -> NOT expr .)
    ELSE            reduce using rule 38 (expr -> NOT expr .)
    FI              reduce using rule 38 (expr -> NOT expr .)
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 75

    (14) Metodo -> OBJECTID ( formal ) : TYPEID { . expr }
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 99

state 76

    (15) Metodo -> OBJECTID ( ) : TYPEID { expr . }
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    }               shift and go to state 100
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 77

    (16) Metodo -> OBJECTID ( ) : TYPEID { } .
    ;               reduce using rule 16 (Metodo -> OBJECTID ( ) : TYPEID { } .)


state 78

    (31) expr -> OBJECTID ( ) .
    @               reduce using rule 31 (expr -> OBJECTID ( ) .)
    =               reduce using rule 31 (expr -> OBJECTID ( ) .)
    LE              reduce using rule 31 (expr -> OBJECTID ( ) .)
    <               reduce using rule 31 (expr -> OBJECTID ( ) .)
    /               reduce using rule 31 (expr -> OBJECTID ( ) .)
    *               reduce using rule 31 (expr -> OBJECTID ( ) .)
    -               reduce using rule 31 (expr -> OBJECTID ( ) .)
    +               reduce using rule 31 (expr -> OBJECTID ( ) .)
    ;               reduce using rule 31 (expr -> OBJECTID ( ) .)
    }               reduce using rule 31 (expr -> OBJECTID ( ) .)
    OF              reduce using rule 31 (expr -> OBJECTID ( ) .)
    LOOP            reduce using rule 31 (expr -> OBJECTID ( ) .)
    THEN            reduce using rule 31 (expr -> OBJECTID ( ) .)
    )               reduce using rule 31 (expr -> OBJECTID ( ) .)
    POOL            reduce using rule 31 (expr -> OBJECTID ( ) .)
    ELSE            reduce using rule 31 (expr -> OBJECTID ( ) .)
    FI              reduce using rule 31 (expr -> OBJECTID ( ) .)


state 79

    (32) expr -> OBJECTID ( expr . )
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    )               shift and go to state 101
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 80

    (46) expr -> OBJECTID ASSIGN expr .
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    @               reduce using rule 46 (expr -> OBJECTID ASSIGN expr .)
    =               reduce using rule 46 (expr -> OBJECTID ASSIGN expr .)
    LE              reduce using rule 46 (expr -> OBJECTID ASSIGN expr .)
    <               reduce using rule 46 (expr -> OBJECTID ASSIGN expr .)
    ;               reduce using rule 46 (expr -> OBJECTID ASSIGN expr .)
    }               reduce using rule 46 (expr -> OBJECTID ASSIGN expr .)
    OF              reduce using rule 46 (expr -> OBJECTID ASSIGN expr .)
    LOOP            reduce using rule 46 (expr -> OBJECTID ASSIGN expr .)
    THEN            reduce using rule 46 (expr -> OBJECTID ASSIGN expr .)
    )               reduce using rule 46 (expr -> OBJECTID ASSIGN expr .)
    POOL            reduce using rule 46 (expr -> OBJECTID ASSIGN expr .)
    ELSE            reduce using rule 46 (expr -> OBJECTID ASSIGN expr .)
    FI              reduce using rule 46 (expr -> OBJECTID ASSIGN expr .)
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 81

    (33) expr -> expr @ TYPEID . . OBJECTID ( expr )
    (34) expr -> expr @ TYPEID . . OBJECTID ( )
    .               shift and go to state 102


state 82

    (39) expr -> expr = expr .
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 39 (expr -> expr = expr .)
    }               reduce using rule 39 (expr -> expr = expr .)
    OF              reduce using rule 39 (expr -> expr = expr .)
    LOOP            reduce using rule 39 (expr -> expr = expr .)
    THEN            reduce using rule 39 (expr -> expr = expr .)
    )               reduce using rule 39 (expr -> expr = expr .)
    POOL            reduce using rule 39 (expr -> expr = expr .)
    ELSE            reduce using rule 39 (expr -> expr = expr .)
    FI              reduce using rule 39 (expr -> expr = expr .)
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 83

    (40) expr -> expr LE expr .
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 40 (expr -> expr LE expr .)
    }               reduce using rule 40 (expr -> expr LE expr .)
    OF              reduce using rule 40 (expr -> expr LE expr .)
    LOOP            reduce using rule 40 (expr -> expr LE expr .)
    THEN            reduce using rule 40 (expr -> expr LE expr .)
    )               reduce using rule 40 (expr -> expr LE expr .)
    POOL            reduce using rule 40 (expr -> expr LE expr .)
    ELSE            reduce using rule 40 (expr -> expr LE expr .)
    FI              reduce using rule 40 (expr -> expr LE expr .)
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 84

    (41) expr -> expr < expr .
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 41 (expr -> expr < expr .)
    }               reduce using rule 41 (expr -> expr < expr .)
    OF              reduce using rule 41 (expr -> expr < expr .)
    LOOP            reduce using rule 41 (expr -> expr < expr .)
    THEN            reduce using rule 41 (expr -> expr < expr .)
    )               reduce using rule 41 (expr -> expr < expr .)
    POOL            reduce using rule 41 (expr -> expr < expr .)
    ELSE            reduce using rule 41 (expr -> expr < expr .)
    FI              reduce using rule 41 (expr -> expr < expr .)
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 85

    (42) expr -> expr / expr .
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    @               reduce using rule 42 (expr -> expr / expr .)
    =               reduce using rule 42 (expr -> expr / expr .)
    LE              reduce using rule 42 (expr -> expr / expr .)
    <               reduce using rule 42 (expr -> expr / expr .)
    /               reduce using rule 42 (expr -> expr / expr .)
    *               reduce using rule 42 (expr -> expr / expr .)
    -               reduce using rule 42 (expr -> expr / expr .)
    +               reduce using rule 42 (expr -> expr / expr .)
    ;               reduce using rule 42 (expr -> expr / expr .)
    }               reduce using rule 42 (expr -> expr / expr .)
    OF              reduce using rule 42 (expr -> expr / expr .)
    LOOP            reduce using rule 42 (expr -> expr / expr .)
    THEN            reduce using rule 42 (expr -> expr / expr .)
    )               reduce using rule 42 (expr -> expr / expr .)
    POOL            reduce using rule 42 (expr -> expr / expr .)
    ELSE            reduce using rule 42 (expr -> expr / expr .)
    FI              reduce using rule 42 (expr -> expr / expr .)


state 86

    (43) expr -> expr * expr .
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    @               reduce using rule 43 (expr -> expr * expr .)
    =               reduce using rule 43 (expr -> expr * expr .)
    LE              reduce using rule 43 (expr -> expr * expr .)
    <               reduce using rule 43 (expr -> expr * expr .)
    /               reduce using rule 43 (expr -> expr * expr .)
    *               reduce using rule 43 (expr -> expr * expr .)
    -               reduce using rule 43 (expr -> expr * expr .)
    +               reduce using rule 43 (expr -> expr * expr .)
    ;               reduce using rule 43 (expr -> expr * expr .)
    }               reduce using rule 43 (expr -> expr * expr .)
    OF              reduce using rule 43 (expr -> expr * expr .)
    LOOP            reduce using rule 43 (expr -> expr * expr .)
    THEN            reduce using rule 43 (expr -> expr * expr .)
    )               reduce using rule 43 (expr -> expr * expr .)
    POOL            reduce using rule 43 (expr -> expr * expr .)
    ELSE            reduce using rule 43 (expr -> expr * expr .)
    FI              reduce using rule 43 (expr -> expr * expr .)


state 87

    (44) expr -> expr - expr .
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    @               reduce using rule 44 (expr -> expr - expr .)
    =               reduce using rule 44 (expr -> expr - expr .)
    LE              reduce using rule 44 (expr -> expr - expr .)
    <               reduce using rule 44 (expr -> expr - expr .)
    -               reduce using rule 44 (expr -> expr - expr .)
    +               reduce using rule 44 (expr -> expr - expr .)
    ;               reduce using rule 44 (expr -> expr - expr .)
    }               reduce using rule 44 (expr -> expr - expr .)
    OF              reduce using rule 44 (expr -> expr - expr .)
    LOOP            reduce using rule 44 (expr -> expr - expr .)
    THEN            reduce using rule 44 (expr -> expr - expr .)
    )               reduce using rule 44 (expr -> expr - expr .)
    POOL            reduce using rule 44 (expr -> expr - expr .)
    ELSE            reduce using rule 44 (expr -> expr - expr .)
    FI              reduce using rule 44 (expr -> expr - expr .)
    /               shift and go to state 60
    *               shift and go to state 61


state 88

    (45) expr -> expr + expr .
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    @               reduce using rule 45 (expr -> expr + expr .)
    =               reduce using rule 45 (expr -> expr + expr .)
    LE              reduce using rule 45 (expr -> expr + expr .)
    <               reduce using rule 45 (expr -> expr + expr .)
    -               reduce using rule 45 (expr -> expr + expr .)
    +               reduce using rule 45 (expr -> expr + expr .)
    ;               reduce using rule 45 (expr -> expr + expr .)
    }               reduce using rule 45 (expr -> expr + expr .)
    OF              reduce using rule 45 (expr -> expr + expr .)
    LOOP            reduce using rule 45 (expr -> expr + expr .)
    THEN            reduce using rule 45 (expr -> expr + expr .)
    )               reduce using rule 45 (expr -> expr + expr .)
    POOL            reduce using rule 45 (expr -> expr + expr .)
    ELSE            reduce using rule 45 (expr -> expr + expr .)
    FI              reduce using rule 45 (expr -> expr + expr .)
    /               shift and go to state 60
    *               shift and go to state 61


state 89

    (19) expr -> { bloque } .
    @               reduce using rule 19 (expr -> { bloque } .)
    =               reduce using rule 19 (expr -> { bloque } .)
    LE              reduce using rule 19 (expr -> { bloque } .)
    <               reduce using rule 19 (expr -> { bloque } .)
    /               reduce using rule 19 (expr -> { bloque } .)
    *               reduce using rule 19 (expr -> { bloque } .)
    -               reduce using rule 19 (expr -> { bloque } .)
    +               reduce using rule 19 (expr -> { bloque } .)
    ;               reduce using rule 19 (expr -> { bloque } .)
    }               reduce using rule 19 (expr -> { bloque } .)
    OF              reduce using rule 19 (expr -> { bloque } .)
    LOOP            reduce using rule 19 (expr -> { bloque } .)
    THEN            reduce using rule 19 (expr -> { bloque } .)
    )               reduce using rule 19 (expr -> { bloque } .)
    POOL            reduce using rule 19 (expr -> { bloque } .)
    ELSE            reduce using rule 19 (expr -> { bloque } .)
    FI              reduce using rule 19 (expr -> { bloque } .)


state 90

    (50) bloque -> bloque error . ;
    ;               shift and go to state 103


state 91

    (51) bloque -> bloque expr . ;
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    ;               shift and go to state 104
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 92

    (24) expr -> { expr } .
    @               reduce using rule 24 (expr -> { expr } .)
    =               reduce using rule 24 (expr -> { expr } .)
    LE              reduce using rule 24 (expr -> { expr } .)
    <               reduce using rule 24 (expr -> { expr } .)
    /               reduce using rule 24 (expr -> { expr } .)
    *               reduce using rule 24 (expr -> { expr } .)
    -               reduce using rule 24 (expr -> { expr } .)
    +               reduce using rule 24 (expr -> { expr } .)
    ;               reduce using rule 24 (expr -> { expr } .)
    }               reduce using rule 24 (expr -> { expr } .)
    OF              reduce using rule 24 (expr -> { expr } .)
    LOOP            reduce using rule 24 (expr -> { expr } .)
    THEN            reduce using rule 24 (expr -> { expr } .)
    )               reduce using rule 24 (expr -> { expr } .)
    POOL            reduce using rule 24 (expr -> { expr } .)
    ELSE            reduce using rule 24 (expr -> { expr } .)
    FI              reduce using rule 24 (expr -> { expr } .)


state 93

    (52) bloque -> expr ; .
    }               reduce using rule 52 (bloque -> expr ; .)
    error           reduce using rule 52 (bloque -> expr ; .)
    {               reduce using rule 52 (bloque -> expr ; .)
    BOOL_CONST      reduce using rule 52 (bloque -> expr ; .)
    STR_CONST       reduce using rule 52 (bloque -> expr ; .)
    INT_CONST       reduce using rule 52 (bloque -> expr ; .)
    OBJECTID        reduce using rule 52 (bloque -> expr ; .)
    NEW             reduce using rule 52 (bloque -> expr ; .)
    CASE            reduce using rule 52 (bloque -> expr ; .)
    LET             reduce using rule 52 (bloque -> expr ; .)
    WHILE           reduce using rule 52 (bloque -> expr ; .)
    IF              reduce using rule 52 (bloque -> expr ; .)
    (               reduce using rule 52 (bloque -> expr ; .)
    ~               reduce using rule 52 (bloque -> expr ; .)
    ISVOID          reduce using rule 52 (bloque -> expr ; .)
    NOT             reduce using rule 52 (bloque -> expr ; .)


state 94

    (26) expr -> CASE expr OF . { cuerpo_case } ESAC
    (27) expr -> CASE expr OF . { } ESAC
    {               shift and go to state 105


state 95

    (28) expr -> LET OBJECTID : . TYPEID lista_inicia IN expr
    TYPEID          shift and go to state 106


state 96

    (29) expr -> WHILE expr LOOP . expr POOL
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 107

state 97

    (30) expr -> IF expr THEN . expr ELSE expr FI
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 108

state 98

    (35) expr -> ( expr ) .
    @               reduce using rule 35 (expr -> ( expr ) .)
    =               reduce using rule 35 (expr -> ( expr ) .)
    LE              reduce using rule 35 (expr -> ( expr ) .)
    <               reduce using rule 35 (expr -> ( expr ) .)
    /               reduce using rule 35 (expr -> ( expr ) .)
    *               reduce using rule 35 (expr -> ( expr ) .)
    -               reduce using rule 35 (expr -> ( expr ) .)
    +               reduce using rule 35 (expr -> ( expr ) .)
    ;               reduce using rule 35 (expr -> ( expr ) .)
    }               reduce using rule 35 (expr -> ( expr ) .)
    OF              reduce using rule 35 (expr -> ( expr ) .)
    LOOP            reduce using rule 35 (expr -> ( expr ) .)
    THEN            reduce using rule 35 (expr -> ( expr ) .)
    )               reduce using rule 35 (expr -> ( expr ) .)
    POOL            reduce using rule 35 (expr -> ( expr ) .)
    ELSE            reduce using rule 35 (expr -> ( expr ) .)
    FI              reduce using rule 35 (expr -> ( expr ) .)


state 99

    (14) Metodo -> OBJECTID ( formal ) : TYPEID { expr . }
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    }               shift and go to state 109
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 100

    (15) Metodo -> OBJECTID ( ) : TYPEID { expr } .
    ;               reduce using rule 15 (Metodo -> OBJECTID ( ) : TYPEID { expr } .)


state 101

    (32) expr -> OBJECTID ( expr ) .
    @               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    =               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    LE              reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    <               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    /               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    *               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    -               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    +               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    ;               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    }               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    OF              reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    LOOP            reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    THEN            reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    )               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    POOL            reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    ELSE            reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    FI              reduce using rule 32 (expr -> OBJECTID ( expr ) .)


state 102

    (33) expr -> expr @ TYPEID . . OBJECTID ( expr )
    (34) expr -> expr @ TYPEID . . OBJECTID ( )
    OBJECTID        shift and go to state 110


state 103

    (50) bloque -> bloque error ; .
    }               reduce using rule 50 (bloque -> bloque error ; .)
    error           reduce using rule 50 (bloque -> bloque error ; .)
    {               reduce using rule 50 (bloque -> bloque error ; .)
    BOOL_CONST      reduce using rule 50 (bloque -> bloque error ; .)
    STR_CONST       reduce using rule 50 (bloque -> bloque error ; .)
    INT_CONST       reduce using rule 50 (bloque -> bloque error ; .)
    OBJECTID        reduce using rule 50 (bloque -> bloque error ; .)
    NEW             reduce using rule 50 (bloque -> bloque error ; .)
    CASE            reduce using rule 50 (bloque -> bloque error ; .)
    LET             reduce using rule 50 (bloque -> bloque error ; .)
    WHILE           reduce using rule 50 (bloque -> bloque error ; .)
    IF              reduce using rule 50 (bloque -> bloque error ; .)
    (               reduce using rule 50 (bloque -> bloque error ; .)
    ~               reduce using rule 50 (bloque -> bloque error ; .)
    ISVOID          reduce using rule 50 (bloque -> bloque error ; .)
    NOT             reduce using rule 50 (bloque -> bloque error ; .)


state 104

    (51) bloque -> bloque expr ; .
    }               reduce using rule 51 (bloque -> bloque expr ; .)
    error           reduce using rule 51 (bloque -> bloque expr ; .)
    {               reduce using rule 51 (bloque -> bloque expr ; .)
    BOOL_CONST      reduce using rule 51 (bloque -> bloque expr ; .)
    STR_CONST       reduce using rule 51 (bloque -> bloque expr ; .)
    INT_CONST       reduce using rule 51 (bloque -> bloque expr ; .)
    OBJECTID        reduce using rule 51 (bloque -> bloque expr ; .)
    NEW             reduce using rule 51 (bloque -> bloque expr ; .)
    CASE            reduce using rule 51 (bloque -> bloque expr ; .)
    LET             reduce using rule 51 (bloque -> bloque expr ; .)
    WHILE           reduce using rule 51 (bloque -> bloque expr ; .)
    IF              reduce using rule 51 (bloque -> bloque expr ; .)
    (               reduce using rule 51 (bloque -> bloque expr ; .)
    ~               reduce using rule 51 (bloque -> bloque expr ; .)
    ISVOID          reduce using rule 51 (bloque -> bloque expr ; .)
    NOT             reduce using rule 51 (bloque -> bloque expr ; .)


state 105

    (26) expr -> CASE expr OF { . cuerpo_case } ESAC
    (27) expr -> CASE expr OF { . } ESAC
    (48) cuerpo_case -> . cuerpo_case OBJECTID : TYPEID DARROW expr ;
    (49) cuerpo_case -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 112
    OBJECTID        reduce using rule 49 (cuerpo_case -> .)

    cuerpo_case                    shift and go to state 111

state 106

    (28) expr -> LET OBJECTID : TYPEID . lista_inicia IN expr
    (47) lista_inicia -> . OBJECTID : TYPEID
    OBJECTID        shift and go to state 113

    lista_inicia                   shift and go to state 114

state 107

    (29) expr -> WHILE expr LOOP expr . POOL
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    POOL            shift and go to state 115
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 108

    (30) expr -> IF expr THEN expr . ELSE expr FI
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    ELSE            shift and go to state 116
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 109

    (14) Metodo -> OBJECTID ( formal ) : TYPEID { expr } .
    ;               reduce using rule 14 (Metodo -> OBJECTID ( formal ) : TYPEID { expr } .)


state 110

    (33) expr -> expr @ TYPEID . OBJECTID . ( expr )
    (34) expr -> expr @ TYPEID . OBJECTID . ( )
    (               shift and go to state 117


state 111

    (26) expr -> CASE expr OF { cuerpo_case . } ESAC
    (48) cuerpo_case -> cuerpo_case . OBJECTID : TYPEID DARROW expr ;
    }               shift and go to state 118
    OBJECTID        shift and go to state 119


state 112

    (27) expr -> CASE expr OF { } . ESAC
    ESAC            shift and go to state 120


state 113

    (47) lista_inicia -> OBJECTID . : TYPEID
    :               shift and go to state 121


state 114

    (28) expr -> LET OBJECTID : TYPEID lista_inicia . IN expr
    IN              shift and go to state 122


state 115

    (29) expr -> WHILE expr LOOP expr POOL .
    @               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    =               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    LE              reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    <               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    /               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    *               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    -               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    +               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    ;               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    }               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    OF              reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    LOOP            reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    THEN            reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    )               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    POOL            reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    ELSE            reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    FI              reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)


state 116

    (30) expr -> IF expr THEN expr ELSE . expr FI
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 123

state 117

    (33) expr -> expr @ TYPEID . OBJECTID ( . expr )
    (34) expr -> expr @ TYPEID . OBJECTID ( . )
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    )               shift and go to state 125
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 124

state 118

    (26) expr -> CASE expr OF { cuerpo_case } . ESAC
    ESAC            shift and go to state 126


state 119

    (48) cuerpo_case -> cuerpo_case OBJECTID . : TYPEID DARROW expr ;
    :               shift and go to state 127


state 120

    (27) expr -> CASE expr OF { } ESAC .
    @               reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    =               reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    LE              reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    <               reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    /               reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    *               reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    -               reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    +               reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    ;               reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    }               reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    OF              reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    LOOP            reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    THEN            reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    )               reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    POOL            reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    ELSE            reduce using rule 27 (expr -> CASE expr OF { } ESAC .)
    FI              reduce using rule 27 (expr -> CASE expr OF { } ESAC .)


state 121

    (47) lista_inicia -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 128


state 122

    (28) expr -> LET OBJECTID : TYPEID lista_inicia IN . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 129

state 123

    (30) expr -> IF expr THEN expr ELSE expr . FI
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    FI              shift and go to state 130
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 124

    (33) expr -> expr @ TYPEID . OBJECTID ( expr . )
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    )               shift and go to state 131
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 125

    (34) expr -> expr @ TYPEID . OBJECTID ( ) .
    @               reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    =               reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LE              reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    <               reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    /               reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    *               reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    -               reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    +               reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ;               reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    }               reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    OF              reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LOOP            reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    THEN            reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    )               reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    POOL            reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ELSE            reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    FI              reduce using rule 34 (expr -> expr @ TYPEID . OBJECTID ( ) .)


state 126

    (26) expr -> CASE expr OF { cuerpo_case } ESAC .
    @               reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    =               reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    LE              reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    <               reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    /               reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    *               reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    -               reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    +               reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    ;               reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    }               reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    OF              reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    LOOP            reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    THEN            reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    )               reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    POOL            reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    ELSE            reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    FI              reduce using rule 26 (expr -> CASE expr OF { cuerpo_case } ESAC .)


state 127

    (48) cuerpo_case -> cuerpo_case OBJECTID : . TYPEID DARROW expr ;
    TYPEID          shift and go to state 132


state 128

    (47) lista_inicia -> OBJECTID : TYPEID .
    IN              reduce using rule 47 (lista_inicia -> OBJECTID : TYPEID .)


state 129

    (28) expr -> LET OBJECTID : TYPEID lista_inicia IN expr .
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 28 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    }               reduce using rule 28 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    OF              reduce using rule 28 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    LOOP            reduce using rule 28 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    THEN            reduce using rule 28 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    )               reduce using rule 28 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    POOL            reduce using rule 28 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    ELSE            reduce using rule 28 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    FI              reduce using rule 28 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 130

    (30) expr -> IF expr THEN expr ELSE expr FI .
    @               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    =               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    LE              reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    <               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    /               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    *               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    -               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    +               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    ;               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    }               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    OF              reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    LOOP            reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    THEN            reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    )               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    POOL            reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    ELSE            reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    FI              reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)


state 131

    (33) expr -> expr @ TYPEID . OBJECTID ( expr ) .
    @               reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    =               reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    LE              reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    <               reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    /               reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    *               reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    -               reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    +               reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    ;               reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    }               reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    OF              reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    LOOP            reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    THEN            reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    )               reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    POOL            reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    ELSE            reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    FI              reduce using rule 33 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)


state 132

    (48) cuerpo_case -> cuerpo_case OBJECTID : TYPEID . DARROW expr ;
    DARROW          shift and go to state 133


state 133

    (48) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW . expr ;
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF { cuerpo_case } ESAC
    (27) expr -> . CASE expr OF { } ESAC
    (28) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (34) expr -> . expr @ TYPEID . OBJECTID ( )
    (35) expr -> . ( expr )
    (36) expr -> . ~ expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NOT expr
    (39) expr -> . expr = expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr < expr
    (42) expr -> . expr / expr
    (43) expr -> . expr * expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 39
    BOOL_CONST      shift and go to state 40
    STR_CONST       shift and go to state 41
    INT_CONST       shift and go to state 42
    OBJECTID        shift and go to state 37
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 134

state 134

    (48) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr . ;
    (33) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (34) expr -> expr . @ TYPEID . OBJECTID ( )
    (39) expr -> expr . = expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . < expr
    (42) expr -> expr . / expr
    (43) expr -> expr . * expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    ;               shift and go to state 135
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 135

    (48) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ; .
    }               reduce using rule 48 (cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ; .)
    OBJECTID        reduce using rule 48 (cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ; .)


Conflicts:

shift/reduce conflict for } in state 10 resolved as shift
shift/reduce conflict for } in state 14 resolved as shift
shift/reduce conflict for ) in state 23 resolved as shift
shift/reduce conflict for @ in state 72 resolved as shift
shift/reduce conflict for = in state 72 resolved as shift
shift/reduce conflict for LE in state 72 resolved as shift
shift/reduce conflict for < in state 72 resolved as shift
shift/reduce conflict for / in state 72 resolved as shift
shift/reduce conflict for * in state 72 resolved as shift
shift/reduce conflict for - in state 72 resolved as shift
shift/reduce conflict for + in state 72 resolved as shift
shift/reduce conflict for @ in state 82 resolved as shift
shift/reduce conflict for = in state 82 resolved as shift
shift/reduce conflict for LE in state 82 resolved as shift
shift/reduce conflict for < in state 82 resolved as shift
shift/reduce conflict for / in state 82 resolved as shift
shift/reduce conflict for * in state 82 resolved as shift
shift/reduce conflict for - in state 82 resolved as shift
shift/reduce conflict for + in state 82 resolved as shift
shift/reduce conflict for @ in state 83 resolved as shift
shift/reduce conflict for = in state 83 resolved as shift
shift/reduce conflict for LE in state 83 resolved as shift
shift/reduce conflict for < in state 83 resolved as shift
shift/reduce conflict for / in state 83 resolved as shift
shift/reduce conflict for * in state 83 resolved as shift
shift/reduce conflict for - in state 83 resolved as shift
shift/reduce conflict for + in state 83 resolved as shift
shift/reduce conflict for @ in state 84 resolved as shift
shift/reduce conflict for = in state 84 resolved as shift
shift/reduce conflict for LE in state 84 resolved as shift
shift/reduce conflict for < in state 84 resolved as shift
shift/reduce conflict for / in state 84 resolved as shift
shift/reduce conflict for * in state 84 resolved as shift
shift/reduce conflict for - in state 84 resolved as shift
shift/reduce conflict for + in state 84 resolved as shift
shift/reduce conflict for } in state 105 resolved as shift
shift/reduce conflict for @ in state 129 resolved as shift
shift/reduce conflict for = in state 129 resolved as shift
shift/reduce conflict for LE in state 129 resolved as shift
shift/reduce conflict for < in state 129 resolved as shift
shift/reduce conflict for / in state 129 resolved as shift
shift/reduce conflict for * in state 129 resolved as shift
shift/reduce conflict for - in state 129 resolved as shift
shift/reduce conflict for + in state 129 resolved as shift