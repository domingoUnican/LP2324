Grammar:

Rule 0     S' -> Programa
Rule 1     Programa -> Programa error
Rule 2     Programa -> Programa Clase ;
Rule 3     Programa -> Clase ;
Rule 4     Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
Rule 5     Clase -> CLASS TYPEID INHERITS TYPEID { }
Rule 6     Clase -> CLASS TYPEID { cuerpo_clase }
Rule 7     Clase -> CLASS TYPEID { }
Rule 8     cuerpo_clase -> cuerpo_clase caracteristica ;
Rule 9     cuerpo_clase -> <empty>
Rule 10    caracteristica -> Metodo
Rule 11    caracteristica -> Atributo
Rule 12    Atributo -> OBJECTID : TYPEID ASSIGN expr  [precedence=right, level=1]
Rule 13    Atributo -> OBJECTID : TYPEID
Rule 14    Metodo -> OBJECTID ( formales ) : TYPEID { expr }
Rule 15    Metodo -> OBJECTID ( ) : TYPEID { expr }
Rule 16    formales -> formal , formales
Rule 17    formales -> formal
Rule 18    formal -> OBJECTID : TYPEID
Rule 19    expr -> { bloque }
Rule 20    expr -> BOOL_CONST
Rule 21    expr -> STR_CONST
Rule 22    expr -> INT_CONST
Rule 23    expr -> OBJECTID
Rule 24    expr -> { expr }
Rule 25    expr -> NEW TYPEID
Rule 26    expr -> CASE expr OF cuerpo_case ESAC
Rule 27    expr -> CASE expr OF ESAC
Rule 28    expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr
Rule 29    expr -> WHILE expr LOOP expr POOL
Rule 30    expr -> IF expr THEN expr ELSE expr FI
Rule 31    expr -> expr . OBJECTID ( lista_argumentos )
Rule 32    expr -> expr . OBJECTID ( )
Rule 33    expr -> OBJECTID ( )
Rule 34    expr -> OBJECTID ( lista_argumentos )
Rule 35    expr -> expr @ TYPEID . OBJECTID ( argumentos )
Rule 36    expr -> expr @ TYPEID . OBJECTID ( )
Rule 37    expr -> ( expr )
Rule 38    expr -> ~ expr  [precedence=left, level=6]
Rule 39    expr -> OBJECTID ASSIGN expr  [precedence=right, level=1]
Rule 40    expr -> NOT expr  [precedence=left, level=2]
Rule 41    expr -> expr = expr
Rule 42    expr -> expr < expr  [precedence=nonassoc, level=7]
Rule 43    expr -> expr LE expr  [precedence=nonassoc, level=7]
Rule 44    expr -> expr - expr  [precedence=left, level=3]
Rule 45    expr -> expr + expr  [precedence=left, level=3]
Rule 46    expr -> expr / expr  [precedence=left, level=4]
Rule 47    expr -> expr * expr  [precedence=left, level=4]
Rule 48    expr -> ISVOID expr  [precedence=left, level=5]
Rule 49    argumentos -> expr , argumentos
Rule 50    argumentos -> expr
Rule 51    lista_argumentos -> expr , lista_argumentos
Rule 52    lista_argumentos -> expr
Rule 53    lista_inicia -> lista_inicia , OBJECTID : TYPEID opcionales
Rule 54    lista_inicia -> <empty>
Rule 55    opcionales -> <empty>
Rule 56    opcionales -> ASSIGN expr  [precedence=right, level=1]
Rule 57    cuerpo_case -> cuerpo_case cuerpo_case ;
Rule 58    cuerpo_case -> OBJECTID : TYPEID DARROW expr ;
Rule 59    bloque -> bloque error ;
Rule 60    bloque -> bloque expr ;
Rule 61    bloque -> expr ;

Unused terminals:

    COMMENT_BLOQUE
    ERROR
    COMMENT_1LINEA
    NUMBER

Terminals, with rules where they appear:

(                    : 14 15 31 32 33 34 35 36 37
)                    : 14 15 31 32 33 34 35 36 37
*                    : 47
+                    : 45
,                    : 16 49 51 53
-                    : 44
.                    : 31 32 35 36
/                    : 46
:                    : 12 13 14 15 18 28 53 58
;                    : 2 3 8 57 58 59 60 61
<                    : 42
=                    : 41
@                    : 35 36
ASSIGN               : 12 39 56
BOOL_CONST           : 20
CASE                 : 26 27
CLASS                : 4 5 6 7
COMMENT_1LINEA       : 
COMMENT_BLOQUE       : 
DARROW               : 58
ELSE                 : 30
ERROR                : 
ESAC                 : 26 27
FI                   : 30
IF                   : 30
IN                   : 28
INHERITS             : 4 5
INT_CONST            : 22
ISVOID               : 48
LE                   : 43
LET                  : 28
LOOP                 : 29
NEW                  : 25
NOT                  : 40
NUMBER               : 
OBJECTID             : 12 13 14 15 18 23 28 31 32 33 34 35 36 39 53 58
OF                   : 26 27
POOL                 : 29
STR_CONST            : 21
THEN                 : 30
TYPEID               : 4 4 5 5 6 7 12 13 14 15 18 25 28 35 36 53 58
WHILE                : 29
error                : 1 59
{                    : 4 5 6 7 14 15 19 24
}                    : 4 5 6 7 14 15 19 24
~                    : 38

Nonterminals, with rules where they appear:

Atributo             : 11
Clase                : 2 3
Metodo               : 10
Programa             : 1 2 0
argumentos           : 35 49
bloque               : 19 59 60
caracteristica       : 8
cuerpo_case          : 26 57 57
cuerpo_clase         : 4 6 8
expr                 : 12 14 15 24 26 27 28 29 29 30 30 30 31 32 35 36 37 38 39 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 49 50 51 52 56 58 60 61
formal               : 16 17
formales             : 14 16
lista_argumentos     : 31 34 51
lista_inicia         : 28 53
opcionales           : 28 53


state 0

    (0) S' -> . Programa
    (1) Programa -> . Programa error
    (2) Programa -> . Programa Clase ;
    (3) Programa -> . Clase ;
    (4) Clase -> . CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> . CLASS TYPEID INHERITS TYPEID { }
    (6) Clase -> . CLASS TYPEID { cuerpo_clase }
    (7) Clase -> . CLASS TYPEID { }
    CLASS           shift and go to state 3

    Programa                       shift and go to state 1
    Clase                          shift and go to state 2

state 1

    (0) S' -> Programa .
    (1) Programa -> Programa . error
    (2) Programa -> Programa . Clase ;
    (4) Clase -> . CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> . CLASS TYPEID INHERITS TYPEID { }
    (6) Clase -> . CLASS TYPEID { cuerpo_clase }
    (7) Clase -> . CLASS TYPEID { }
    error           shift and go to state 4
    CLASS           shift and go to state 3

    Clase                          shift and go to state 5

state 2

    (3) Programa -> Clase . ;
    ;               shift and go to state 6


state 3

    (4) Clase -> CLASS . TYPEID INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> CLASS . TYPEID INHERITS TYPEID { }
    (6) Clase -> CLASS . TYPEID { cuerpo_clase }
    (7) Clase -> CLASS . TYPEID { }
    TYPEID          shift and go to state 7


state 4

    (1) Programa -> Programa error .
    error           reduce using rule 1 (Programa -> Programa error .)
    CLASS           reduce using rule 1 (Programa -> Programa error .)
    $end            reduce using rule 1 (Programa -> Programa error .)


state 5

    (2) Programa -> Programa Clase . ;
    ;               shift and go to state 8


state 6

    (3) Programa -> Clase ; .
    error           reduce using rule 3 (Programa -> Clase ; .)
    CLASS           reduce using rule 3 (Programa -> Clase ; .)
    $end            reduce using rule 3 (Programa -> Clase ; .)


state 7

    (4) Clase -> CLASS TYPEID . INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> CLASS TYPEID . INHERITS TYPEID { }
    (6) Clase -> CLASS TYPEID . { cuerpo_clase }
    (7) Clase -> CLASS TYPEID . { }
    INHERITS        shift and go to state 9
    {               shift and go to state 10


state 8

    (2) Programa -> Programa Clase ; .
    error           reduce using rule 2 (Programa -> Programa Clase ; .)
    CLASS           reduce using rule 2 (Programa -> Programa Clase ; .)
    $end            reduce using rule 2 (Programa -> Programa Clase ; .)


state 9

    (4) Clase -> CLASS TYPEID INHERITS . TYPEID { cuerpo_clase }
    (5) Clase -> CLASS TYPEID INHERITS . TYPEID { }
    TYPEID          shift and go to state 11


state 10

    (6) Clase -> CLASS TYPEID { . cuerpo_clase }
    (7) Clase -> CLASS TYPEID { . }
    (8) cuerpo_clase -> . cuerpo_clase caracteristica ;
    (9) cuerpo_clase -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 13
    OBJECTID        reduce using rule 9 (cuerpo_clase -> .)

    cuerpo_clase                   shift and go to state 12

state 11

    (4) Clase -> CLASS TYPEID INHERITS TYPEID . { cuerpo_clase }
    (5) Clase -> CLASS TYPEID INHERITS TYPEID . { }
    {               shift and go to state 14


state 12

    (6) Clase -> CLASS TYPEID { cuerpo_clase . }
    (8) cuerpo_clase -> cuerpo_clase . caracteristica ;
    (10) caracteristica -> . Metodo
    (11) caracteristica -> . Atributo
    (14) Metodo -> . OBJECTID ( formales ) : TYPEID { expr }
    (15) Metodo -> . OBJECTID ( ) : TYPEID { expr }
    (12) Atributo -> . OBJECTID : TYPEID ASSIGN expr
    (13) Atributo -> . OBJECTID : TYPEID
    }               shift and go to state 15
    OBJECTID        shift and go to state 19

    caracteristica                 shift and go to state 16
    Metodo                         shift and go to state 17
    Atributo                       shift and go to state 18

state 13

    (7) Clase -> CLASS TYPEID { } .
    ;               reduce using rule 7 (Clase -> CLASS TYPEID { } .)


state 14

    (4) Clase -> CLASS TYPEID INHERITS TYPEID { . cuerpo_clase }
    (5) Clase -> CLASS TYPEID INHERITS TYPEID { . }
    (8) cuerpo_clase -> . cuerpo_clase caracteristica ;
    (9) cuerpo_clase -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 21
    OBJECTID        reduce using rule 9 (cuerpo_clase -> .)

    cuerpo_clase                   shift and go to state 20

state 15

    (6) Clase -> CLASS TYPEID { cuerpo_clase } .
    ;               reduce using rule 6 (Clase -> CLASS TYPEID { cuerpo_clase } .)


state 16

    (8) cuerpo_clase -> cuerpo_clase caracteristica . ;
    ;               shift and go to state 22


state 17

    (10) caracteristica -> Metodo .
    ;               reduce using rule 10 (caracteristica -> Metodo .)


state 18

    (11) caracteristica -> Atributo .
    ;               reduce using rule 11 (caracteristica -> Atributo .)


state 19

    (14) Metodo -> OBJECTID . ( formales ) : TYPEID { expr }
    (15) Metodo -> OBJECTID . ( ) : TYPEID { expr }
    (12) Atributo -> OBJECTID . : TYPEID ASSIGN expr
    (13) Atributo -> OBJECTID . : TYPEID
    (               shift and go to state 23
    :               shift and go to state 24


state 20

    (4) Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase . }
    (8) cuerpo_clase -> cuerpo_clase . caracteristica ;
    (10) caracteristica -> . Metodo
    (11) caracteristica -> . Atributo
    (14) Metodo -> . OBJECTID ( formales ) : TYPEID { expr }
    (15) Metodo -> . OBJECTID ( ) : TYPEID { expr }
    (12) Atributo -> . OBJECTID : TYPEID ASSIGN expr
    (13) Atributo -> . OBJECTID : TYPEID
    }               shift and go to state 25
    OBJECTID        shift and go to state 19

    caracteristica                 shift and go to state 16
    Metodo                         shift and go to state 17
    Atributo                       shift and go to state 18

state 21

    (5) Clase -> CLASS TYPEID INHERITS TYPEID { } .
    ;               reduce using rule 5 (Clase -> CLASS TYPEID INHERITS TYPEID { } .)


state 22

    (8) cuerpo_clase -> cuerpo_clase caracteristica ; .
    }               reduce using rule 8 (cuerpo_clase -> cuerpo_clase caracteristica ; .)
    OBJECTID        reduce using rule 8 (cuerpo_clase -> cuerpo_clase caracteristica ; .)


state 23

    (14) Metodo -> OBJECTID ( . formales ) : TYPEID { expr }
    (15) Metodo -> OBJECTID ( . ) : TYPEID { expr }
    (16) formales -> . formal , formales
    (17) formales -> . formal
    (18) formal -> . OBJECTID : TYPEID
    )               shift and go to state 28
    OBJECTID        shift and go to state 26

    formales                       shift and go to state 27
    formal                         shift and go to state 29

state 24

    (12) Atributo -> OBJECTID : . TYPEID ASSIGN expr
    (13) Atributo -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 30


state 25

    (4) Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase } .
    ;               reduce using rule 4 (Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase } .)


state 26

    (18) formal -> OBJECTID . : TYPEID
    :               shift and go to state 31


state 27

    (14) Metodo -> OBJECTID ( formales . ) : TYPEID { expr }
    )               shift and go to state 32


state 28

    (15) Metodo -> OBJECTID ( ) . : TYPEID { expr }
    :               shift and go to state 33


state 29

    (16) formales -> formal . , formales
    (17) formales -> formal .
    ,               shift and go to state 34
    )               reduce using rule 17 (formales -> formal .)


state 30

    (12) Atributo -> OBJECTID : TYPEID . ASSIGN expr
    (13) Atributo -> OBJECTID : TYPEID .
    ASSIGN          shift and go to state 35
    ;               reduce using rule 13 (Atributo -> OBJECTID : TYPEID .)


state 31

    (18) formal -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 36


state 32

    (14) Metodo -> OBJECTID ( formales ) . : TYPEID { expr }
    :               shift and go to state 37


state 33

    (15) Metodo -> OBJECTID ( ) : . TYPEID { expr }
    TYPEID          shift and go to state 38


state 34

    (16) formales -> formal , . formales
    (16) formales -> . formal , formales
    (17) formales -> . formal
    (18) formal -> . OBJECTID : TYPEID
    OBJECTID        shift and go to state 26

    formal                         shift and go to state 29
    formales                       shift and go to state 39

state 35

    (12) Atributo -> OBJECTID : TYPEID ASSIGN . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 41

state 36

    (18) formal -> OBJECTID : TYPEID .
    ,               reduce using rule 18 (formal -> OBJECTID : TYPEID .)
    )               reduce using rule 18 (formal -> OBJECTID : TYPEID .)


state 37

    (14) Metodo -> OBJECTID ( formales ) : . TYPEID { expr }
    TYPEID          shift and go to state 55


state 38

    (15) Metodo -> OBJECTID ( ) : TYPEID . { expr }
    {               shift and go to state 56


state 39

    (16) formales -> formal , formales .
    )               reduce using rule 16 (formales -> formal , formales .)


state 40

    (23) expr -> OBJECTID .
    (33) expr -> OBJECTID . ( )
    (34) expr -> OBJECTID . ( lista_argumentos )
    (39) expr -> OBJECTID . ASSIGN expr
    .               reduce using rule 23 (expr -> OBJECTID .)
    @               reduce using rule 23 (expr -> OBJECTID .)
    =               reduce using rule 23 (expr -> OBJECTID .)
    <               reduce using rule 23 (expr -> OBJECTID .)
    LE              reduce using rule 23 (expr -> OBJECTID .)
    -               reduce using rule 23 (expr -> OBJECTID .)
    +               reduce using rule 23 (expr -> OBJECTID .)
    /               reduce using rule 23 (expr -> OBJECTID .)
    *               reduce using rule 23 (expr -> OBJECTID .)
    ;               reduce using rule 23 (expr -> OBJECTID .)
    }               reduce using rule 23 (expr -> OBJECTID .)
    OF              reduce using rule 23 (expr -> OBJECTID .)
    LOOP            reduce using rule 23 (expr -> OBJECTID .)
    THEN            reduce using rule 23 (expr -> OBJECTID .)
    )               reduce using rule 23 (expr -> OBJECTID .)
    ,               reduce using rule 23 (expr -> OBJECTID .)
    POOL            reduce using rule 23 (expr -> OBJECTID .)
    ELSE            reduce using rule 23 (expr -> OBJECTID .)
    IN              reduce using rule 23 (expr -> OBJECTID .)
    FI              reduce using rule 23 (expr -> OBJECTID .)
    (               shift and go to state 57
    ASSIGN          shift and go to state 58


state 41

    (12) Atributo -> OBJECTID : TYPEID ASSIGN expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    ;               reduce using rule 12 (Atributo -> OBJECTID : TYPEID ASSIGN expr .)
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 42

    (19) expr -> { . bloque }
    (24) expr -> { . expr }
    (59) bloque -> . bloque error ;
    (60) bloque -> . bloque expr ;
    (61) bloque -> . expr ;
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    bloque                         shift and go to state 68
    expr                           shift and go to state 69

state 43

    (20) expr -> BOOL_CONST .
    .               reduce using rule 20 (expr -> BOOL_CONST .)
    @               reduce using rule 20 (expr -> BOOL_CONST .)
    =               reduce using rule 20 (expr -> BOOL_CONST .)
    <               reduce using rule 20 (expr -> BOOL_CONST .)
    LE              reduce using rule 20 (expr -> BOOL_CONST .)
    -               reduce using rule 20 (expr -> BOOL_CONST .)
    +               reduce using rule 20 (expr -> BOOL_CONST .)
    /               reduce using rule 20 (expr -> BOOL_CONST .)
    *               reduce using rule 20 (expr -> BOOL_CONST .)
    ;               reduce using rule 20 (expr -> BOOL_CONST .)
    }               reduce using rule 20 (expr -> BOOL_CONST .)
    OF              reduce using rule 20 (expr -> BOOL_CONST .)
    LOOP            reduce using rule 20 (expr -> BOOL_CONST .)
    THEN            reduce using rule 20 (expr -> BOOL_CONST .)
    )               reduce using rule 20 (expr -> BOOL_CONST .)
    ,               reduce using rule 20 (expr -> BOOL_CONST .)
    POOL            reduce using rule 20 (expr -> BOOL_CONST .)
    ELSE            reduce using rule 20 (expr -> BOOL_CONST .)
    IN              reduce using rule 20 (expr -> BOOL_CONST .)
    FI              reduce using rule 20 (expr -> BOOL_CONST .)


state 44

    (21) expr -> STR_CONST .
    .               reduce using rule 21 (expr -> STR_CONST .)
    @               reduce using rule 21 (expr -> STR_CONST .)
    =               reduce using rule 21 (expr -> STR_CONST .)
    <               reduce using rule 21 (expr -> STR_CONST .)
    LE              reduce using rule 21 (expr -> STR_CONST .)
    -               reduce using rule 21 (expr -> STR_CONST .)
    +               reduce using rule 21 (expr -> STR_CONST .)
    /               reduce using rule 21 (expr -> STR_CONST .)
    *               reduce using rule 21 (expr -> STR_CONST .)
    ;               reduce using rule 21 (expr -> STR_CONST .)
    }               reduce using rule 21 (expr -> STR_CONST .)
    OF              reduce using rule 21 (expr -> STR_CONST .)
    LOOP            reduce using rule 21 (expr -> STR_CONST .)
    THEN            reduce using rule 21 (expr -> STR_CONST .)
    )               reduce using rule 21 (expr -> STR_CONST .)
    ,               reduce using rule 21 (expr -> STR_CONST .)
    POOL            reduce using rule 21 (expr -> STR_CONST .)
    ELSE            reduce using rule 21 (expr -> STR_CONST .)
    IN              reduce using rule 21 (expr -> STR_CONST .)
    FI              reduce using rule 21 (expr -> STR_CONST .)


state 45

    (22) expr -> INT_CONST .
    .               reduce using rule 22 (expr -> INT_CONST .)
    @               reduce using rule 22 (expr -> INT_CONST .)
    =               reduce using rule 22 (expr -> INT_CONST .)
    <               reduce using rule 22 (expr -> INT_CONST .)
    LE              reduce using rule 22 (expr -> INT_CONST .)
    -               reduce using rule 22 (expr -> INT_CONST .)
    +               reduce using rule 22 (expr -> INT_CONST .)
    /               reduce using rule 22 (expr -> INT_CONST .)
    *               reduce using rule 22 (expr -> INT_CONST .)
    ;               reduce using rule 22 (expr -> INT_CONST .)
    }               reduce using rule 22 (expr -> INT_CONST .)
    OF              reduce using rule 22 (expr -> INT_CONST .)
    LOOP            reduce using rule 22 (expr -> INT_CONST .)
    THEN            reduce using rule 22 (expr -> INT_CONST .)
    )               reduce using rule 22 (expr -> INT_CONST .)
    ,               reduce using rule 22 (expr -> INT_CONST .)
    POOL            reduce using rule 22 (expr -> INT_CONST .)
    ELSE            reduce using rule 22 (expr -> INT_CONST .)
    IN              reduce using rule 22 (expr -> INT_CONST .)
    FI              reduce using rule 22 (expr -> INT_CONST .)


state 46

    (25) expr -> NEW . TYPEID
    TYPEID          shift and go to state 70


state 47

    (26) expr -> CASE . expr OF cuerpo_case ESAC
    (27) expr -> CASE . expr OF ESAC
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 71

state 48

    (28) expr -> LET . OBJECTID : TYPEID opcionales lista_inicia IN expr
    OBJECTID        shift and go to state 72


state 49

    (29) expr -> WHILE . expr LOOP expr POOL
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 73

state 50

    (30) expr -> IF . expr THEN expr ELSE expr FI
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 74

state 51

    (37) expr -> ( . expr )
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 75

state 52

    (38) expr -> ~ . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 76

state 53

    (40) expr -> NOT . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 77

state 54

    (48) expr -> ISVOID . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 78

state 55

    (14) Metodo -> OBJECTID ( formales ) : TYPEID . { expr }
    {               shift and go to state 79


state 56

    (15) Metodo -> OBJECTID ( ) : TYPEID { . expr }
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 80

state 57

    (33) expr -> OBJECTID ( . )
    (34) expr -> OBJECTID ( . lista_argumentos )
    (51) lista_argumentos -> . expr , lista_argumentos
    (52) lista_argumentos -> . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    )               shift and go to state 81
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    lista_argumentos               shift and go to state 82
    expr                           shift and go to state 83

state 58

    (39) expr -> OBJECTID ASSIGN . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 84

state 59

    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    OBJECTID        shift and go to state 85


state 60

    (35) expr -> expr @ . TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr @ . TYPEID . OBJECTID ( )
    TYPEID          shift and go to state 86


state 61

    (41) expr -> expr = . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 87

state 62

    (42) expr -> expr < . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 88

state 63

    (43) expr -> expr LE . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 89

state 64

    (44) expr -> expr - . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 90

state 65

    (45) expr -> expr + . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 91

state 66

    (46) expr -> expr / . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 92

state 67

    (47) expr -> expr * . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 93

state 68

    (19) expr -> { bloque . }
    (59) bloque -> bloque . error ;
    (60) bloque -> bloque . expr ;
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    }               shift and go to state 94
    error           shift and go to state 95
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 96

state 69

    (24) expr -> { expr . }
    (61) bloque -> expr . ;
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    }               shift and go to state 97
    ;               shift and go to state 98
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 70

    (25) expr -> NEW TYPEID .
    .               reduce using rule 25 (expr -> NEW TYPEID .)
    @               reduce using rule 25 (expr -> NEW TYPEID .)
    =               reduce using rule 25 (expr -> NEW TYPEID .)
    <               reduce using rule 25 (expr -> NEW TYPEID .)
    LE              reduce using rule 25 (expr -> NEW TYPEID .)
    -               reduce using rule 25 (expr -> NEW TYPEID .)
    +               reduce using rule 25 (expr -> NEW TYPEID .)
    /               reduce using rule 25 (expr -> NEW TYPEID .)
    *               reduce using rule 25 (expr -> NEW TYPEID .)
    ;               reduce using rule 25 (expr -> NEW TYPEID .)
    }               reduce using rule 25 (expr -> NEW TYPEID .)
    OF              reduce using rule 25 (expr -> NEW TYPEID .)
    LOOP            reduce using rule 25 (expr -> NEW TYPEID .)
    THEN            reduce using rule 25 (expr -> NEW TYPEID .)
    )               reduce using rule 25 (expr -> NEW TYPEID .)
    ,               reduce using rule 25 (expr -> NEW TYPEID .)
    POOL            reduce using rule 25 (expr -> NEW TYPEID .)
    ELSE            reduce using rule 25 (expr -> NEW TYPEID .)
    IN              reduce using rule 25 (expr -> NEW TYPEID .)
    FI              reduce using rule 25 (expr -> NEW TYPEID .)


state 71

    (26) expr -> CASE expr . OF cuerpo_case ESAC
    (27) expr -> CASE expr . OF ESAC
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    OF              shift and go to state 99
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 72

    (28) expr -> LET OBJECTID . : TYPEID opcionales lista_inicia IN expr
    :               shift and go to state 100


state 73

    (29) expr -> WHILE expr . LOOP expr POOL
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    LOOP            shift and go to state 101
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 74

    (30) expr -> IF expr . THEN expr ELSE expr FI
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    THEN            shift and go to state 102
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 75

    (37) expr -> ( expr . )
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    )               shift and go to state 103
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 76

    (38) expr -> ~ expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    .               reduce using rule 38 (expr -> ~ expr .)
    @               reduce using rule 38 (expr -> ~ expr .)
    =               reduce using rule 38 (expr -> ~ expr .)
    -               reduce using rule 38 (expr -> ~ expr .)
    +               reduce using rule 38 (expr -> ~ expr .)
    /               reduce using rule 38 (expr -> ~ expr .)
    *               reduce using rule 38 (expr -> ~ expr .)
    ;               reduce using rule 38 (expr -> ~ expr .)
    }               reduce using rule 38 (expr -> ~ expr .)
    OF              reduce using rule 38 (expr -> ~ expr .)
    LOOP            reduce using rule 38 (expr -> ~ expr .)
    THEN            reduce using rule 38 (expr -> ~ expr .)
    )               reduce using rule 38 (expr -> ~ expr .)
    ,               reduce using rule 38 (expr -> ~ expr .)
    POOL            reduce using rule 38 (expr -> ~ expr .)
    ELSE            reduce using rule 38 (expr -> ~ expr .)
    IN              reduce using rule 38 (expr -> ~ expr .)
    FI              reduce using rule 38 (expr -> ~ expr .)
    <               shift and go to state 62
    LE              shift and go to state 63


state 77

    (40) expr -> NOT expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    .               reduce using rule 40 (expr -> NOT expr .)
    @               reduce using rule 40 (expr -> NOT expr .)
    =               reduce using rule 40 (expr -> NOT expr .)
    ;               reduce using rule 40 (expr -> NOT expr .)
    }               reduce using rule 40 (expr -> NOT expr .)
    OF              reduce using rule 40 (expr -> NOT expr .)
    LOOP            reduce using rule 40 (expr -> NOT expr .)
    THEN            reduce using rule 40 (expr -> NOT expr .)
    )               reduce using rule 40 (expr -> NOT expr .)
    ,               reduce using rule 40 (expr -> NOT expr .)
    POOL            reduce using rule 40 (expr -> NOT expr .)
    ELSE            reduce using rule 40 (expr -> NOT expr .)
    IN              reduce using rule 40 (expr -> NOT expr .)
    FI              reduce using rule 40 (expr -> NOT expr .)
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 78

    (48) expr -> ISVOID expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    .               reduce using rule 48 (expr -> ISVOID expr .)
    @               reduce using rule 48 (expr -> ISVOID expr .)
    =               reduce using rule 48 (expr -> ISVOID expr .)
    -               reduce using rule 48 (expr -> ISVOID expr .)
    +               reduce using rule 48 (expr -> ISVOID expr .)
    /               reduce using rule 48 (expr -> ISVOID expr .)
    *               reduce using rule 48 (expr -> ISVOID expr .)
    ;               reduce using rule 48 (expr -> ISVOID expr .)
    }               reduce using rule 48 (expr -> ISVOID expr .)
    OF              reduce using rule 48 (expr -> ISVOID expr .)
    LOOP            reduce using rule 48 (expr -> ISVOID expr .)
    THEN            reduce using rule 48 (expr -> ISVOID expr .)
    )               reduce using rule 48 (expr -> ISVOID expr .)
    ,               reduce using rule 48 (expr -> ISVOID expr .)
    POOL            reduce using rule 48 (expr -> ISVOID expr .)
    ELSE            reduce using rule 48 (expr -> ISVOID expr .)
    IN              reduce using rule 48 (expr -> ISVOID expr .)
    FI              reduce using rule 48 (expr -> ISVOID expr .)
    <               shift and go to state 62
    LE              shift and go to state 63


state 79

    (14) Metodo -> OBJECTID ( formales ) : TYPEID { . expr }
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 104

state 80

    (15) Metodo -> OBJECTID ( ) : TYPEID { expr . }
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    }               shift and go to state 105
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 81

    (33) expr -> OBJECTID ( ) .
    .               reduce using rule 33 (expr -> OBJECTID ( ) .)
    @               reduce using rule 33 (expr -> OBJECTID ( ) .)
    =               reduce using rule 33 (expr -> OBJECTID ( ) .)
    <               reduce using rule 33 (expr -> OBJECTID ( ) .)
    LE              reduce using rule 33 (expr -> OBJECTID ( ) .)
    -               reduce using rule 33 (expr -> OBJECTID ( ) .)
    +               reduce using rule 33 (expr -> OBJECTID ( ) .)
    /               reduce using rule 33 (expr -> OBJECTID ( ) .)
    *               reduce using rule 33 (expr -> OBJECTID ( ) .)
    ;               reduce using rule 33 (expr -> OBJECTID ( ) .)
    }               reduce using rule 33 (expr -> OBJECTID ( ) .)
    OF              reduce using rule 33 (expr -> OBJECTID ( ) .)
    LOOP            reduce using rule 33 (expr -> OBJECTID ( ) .)
    THEN            reduce using rule 33 (expr -> OBJECTID ( ) .)
    )               reduce using rule 33 (expr -> OBJECTID ( ) .)
    ,               reduce using rule 33 (expr -> OBJECTID ( ) .)
    POOL            reduce using rule 33 (expr -> OBJECTID ( ) .)
    ELSE            reduce using rule 33 (expr -> OBJECTID ( ) .)
    IN              reduce using rule 33 (expr -> OBJECTID ( ) .)
    FI              reduce using rule 33 (expr -> OBJECTID ( ) .)


state 82

    (34) expr -> OBJECTID ( lista_argumentos . )
    )               shift and go to state 106


state 83

    (51) lista_argumentos -> expr . , lista_argumentos
    (52) lista_argumentos -> expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    ,               shift and go to state 107
    )               reduce using rule 52 (lista_argumentos -> expr .)
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 84

    (39) expr -> OBJECTID ASSIGN expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    .               reduce using rule 39 (expr -> OBJECTID ASSIGN expr .)
    @               reduce using rule 39 (expr -> OBJECTID ASSIGN expr .)
    =               reduce using rule 39 (expr -> OBJECTID ASSIGN expr .)
    ;               reduce using rule 39 (expr -> OBJECTID ASSIGN expr .)
    }               reduce using rule 39 (expr -> OBJECTID ASSIGN expr .)
    OF              reduce using rule 39 (expr -> OBJECTID ASSIGN expr .)
    LOOP            reduce using rule 39 (expr -> OBJECTID ASSIGN expr .)
    THEN            reduce using rule 39 (expr -> OBJECTID ASSIGN expr .)
    )               reduce using rule 39 (expr -> OBJECTID ASSIGN expr .)
    ,               reduce using rule 39 (expr -> OBJECTID ASSIGN expr .)
    POOL            reduce using rule 39 (expr -> OBJECTID ASSIGN expr .)
    ELSE            reduce using rule 39 (expr -> OBJECTID ASSIGN expr .)
    IN              reduce using rule 39 (expr -> OBJECTID ASSIGN expr .)
    FI              reduce using rule 39 (expr -> OBJECTID ASSIGN expr .)
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 85

    (31) expr -> expr . OBJECTID . ( lista_argumentos )
    (32) expr -> expr . OBJECTID . ( )
    (               shift and go to state 108


state 86

    (35) expr -> expr @ TYPEID . . OBJECTID ( argumentos )
    (36) expr -> expr @ TYPEID . . OBJECTID ( )
    .               shift and go to state 109


state 87

    (41) expr -> expr = expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
    ;               reduce using rule 41 (expr -> expr = expr .)
    }               reduce using rule 41 (expr -> expr = expr .)
    OF              reduce using rule 41 (expr -> expr = expr .)
    LOOP            reduce using rule 41 (expr -> expr = expr .)
    THEN            reduce using rule 41 (expr -> expr = expr .)
    )               reduce using rule 41 (expr -> expr = expr .)
    ,               reduce using rule 41 (expr -> expr = expr .)
    POOL            reduce using rule 41 (expr -> expr = expr .)
    ELSE            reduce using rule 41 (expr -> expr = expr .)
    IN              reduce using rule 41 (expr -> expr = expr .)
    FI              reduce using rule 41 (expr -> expr = expr .)
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 88

    (42) expr -> expr < expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    .               reduce using rule 42 (expr -> expr < expr .)
    @               reduce using rule 42 (expr -> expr < expr .)
    =               reduce using rule 42 (expr -> expr < expr .)
    <               reduce using rule 42 (expr -> expr < expr .)
    LE              reduce using rule 42 (expr -> expr < expr .)
    -               reduce using rule 42 (expr -> expr < expr .)
    +               reduce using rule 42 (expr -> expr < expr .)
    /               reduce using rule 42 (expr -> expr < expr .)
    *               reduce using rule 42 (expr -> expr < expr .)
    ;               reduce using rule 42 (expr -> expr < expr .)
    }               reduce using rule 42 (expr -> expr < expr .)
    OF              reduce using rule 42 (expr -> expr < expr .)
    LOOP            reduce using rule 42 (expr -> expr < expr .)
    THEN            reduce using rule 42 (expr -> expr < expr .)
    )               reduce using rule 42 (expr -> expr < expr .)
    ,               reduce using rule 42 (expr -> expr < expr .)
    POOL            reduce using rule 42 (expr -> expr < expr .)
    ELSE            reduce using rule 42 (expr -> expr < expr .)
    IN              reduce using rule 42 (expr -> expr < expr .)
    FI              reduce using rule 42 (expr -> expr < expr .)


state 89

    (43) expr -> expr LE expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    .               reduce using rule 43 (expr -> expr LE expr .)
    @               reduce using rule 43 (expr -> expr LE expr .)
    =               reduce using rule 43 (expr -> expr LE expr .)
    <               reduce using rule 43 (expr -> expr LE expr .)
    LE              reduce using rule 43 (expr -> expr LE expr .)
    -               reduce using rule 43 (expr -> expr LE expr .)
    +               reduce using rule 43 (expr -> expr LE expr .)
    /               reduce using rule 43 (expr -> expr LE expr .)
    *               reduce using rule 43 (expr -> expr LE expr .)
    ;               reduce using rule 43 (expr -> expr LE expr .)
    }               reduce using rule 43 (expr -> expr LE expr .)
    OF              reduce using rule 43 (expr -> expr LE expr .)
    LOOP            reduce using rule 43 (expr -> expr LE expr .)
    THEN            reduce using rule 43 (expr -> expr LE expr .)
    )               reduce using rule 43 (expr -> expr LE expr .)
    ,               reduce using rule 43 (expr -> expr LE expr .)
    POOL            reduce using rule 43 (expr -> expr LE expr .)
    ELSE            reduce using rule 43 (expr -> expr LE expr .)
    IN              reduce using rule 43 (expr -> expr LE expr .)
    FI              reduce using rule 43 (expr -> expr LE expr .)


state 90

    (44) expr -> expr - expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    .               reduce using rule 44 (expr -> expr - expr .)
    @               reduce using rule 44 (expr -> expr - expr .)
    =               reduce using rule 44 (expr -> expr - expr .)
    -               reduce using rule 44 (expr -> expr - expr .)
    +               reduce using rule 44 (expr -> expr - expr .)
    ;               reduce using rule 44 (expr -> expr - expr .)
    }               reduce using rule 44 (expr -> expr - expr .)
    OF              reduce using rule 44 (expr -> expr - expr .)
    LOOP            reduce using rule 44 (expr -> expr - expr .)
    THEN            reduce using rule 44 (expr -> expr - expr .)
    )               reduce using rule 44 (expr -> expr - expr .)
    ,               reduce using rule 44 (expr -> expr - expr .)
    POOL            reduce using rule 44 (expr -> expr - expr .)
    ELSE            reduce using rule 44 (expr -> expr - expr .)
    IN              reduce using rule 44 (expr -> expr - expr .)
    FI              reduce using rule 44 (expr -> expr - expr .)
    <               shift and go to state 62
    LE              shift and go to state 63
    /               shift and go to state 66
    *               shift and go to state 67


state 91

    (45) expr -> expr + expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    .               reduce using rule 45 (expr -> expr + expr .)
    @               reduce using rule 45 (expr -> expr + expr .)
    =               reduce using rule 45 (expr -> expr + expr .)
    -               reduce using rule 45 (expr -> expr + expr .)
    +               reduce using rule 45 (expr -> expr + expr .)
    ;               reduce using rule 45 (expr -> expr + expr .)
    }               reduce using rule 45 (expr -> expr + expr .)
    OF              reduce using rule 45 (expr -> expr + expr .)
    LOOP            reduce using rule 45 (expr -> expr + expr .)
    THEN            reduce using rule 45 (expr -> expr + expr .)
    )               reduce using rule 45 (expr -> expr + expr .)
    ,               reduce using rule 45 (expr -> expr + expr .)
    POOL            reduce using rule 45 (expr -> expr + expr .)
    ELSE            reduce using rule 45 (expr -> expr + expr .)
    IN              reduce using rule 45 (expr -> expr + expr .)
    FI              reduce using rule 45 (expr -> expr + expr .)
    <               shift and go to state 62
    LE              shift and go to state 63
    /               shift and go to state 66
    *               shift and go to state 67


state 92

    (46) expr -> expr / expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    .               reduce using rule 46 (expr -> expr / expr .)
    @               reduce using rule 46 (expr -> expr / expr .)
    =               reduce using rule 46 (expr -> expr / expr .)
    -               reduce using rule 46 (expr -> expr / expr .)
    +               reduce using rule 46 (expr -> expr / expr .)
    /               reduce using rule 46 (expr -> expr / expr .)
    *               reduce using rule 46 (expr -> expr / expr .)
    ;               reduce using rule 46 (expr -> expr / expr .)
    }               reduce using rule 46 (expr -> expr / expr .)
    OF              reduce using rule 46 (expr -> expr / expr .)
    LOOP            reduce using rule 46 (expr -> expr / expr .)
    THEN            reduce using rule 46 (expr -> expr / expr .)
    )               reduce using rule 46 (expr -> expr / expr .)
    ,               reduce using rule 46 (expr -> expr / expr .)
    POOL            reduce using rule 46 (expr -> expr / expr .)
    ELSE            reduce using rule 46 (expr -> expr / expr .)
    IN              reduce using rule 46 (expr -> expr / expr .)
    FI              reduce using rule 46 (expr -> expr / expr .)
    <               shift and go to state 62
    LE              shift and go to state 63


state 93

    (47) expr -> expr * expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    .               reduce using rule 47 (expr -> expr * expr .)
    @               reduce using rule 47 (expr -> expr * expr .)
    =               reduce using rule 47 (expr -> expr * expr .)
    -               reduce using rule 47 (expr -> expr * expr .)
    +               reduce using rule 47 (expr -> expr * expr .)
    /               reduce using rule 47 (expr -> expr * expr .)
    *               reduce using rule 47 (expr -> expr * expr .)
    ;               reduce using rule 47 (expr -> expr * expr .)
    }               reduce using rule 47 (expr -> expr * expr .)
    OF              reduce using rule 47 (expr -> expr * expr .)
    LOOP            reduce using rule 47 (expr -> expr * expr .)
    THEN            reduce using rule 47 (expr -> expr * expr .)
    )               reduce using rule 47 (expr -> expr * expr .)
    ,               reduce using rule 47 (expr -> expr * expr .)
    POOL            reduce using rule 47 (expr -> expr * expr .)
    ELSE            reduce using rule 47 (expr -> expr * expr .)
    IN              reduce using rule 47 (expr -> expr * expr .)
    FI              reduce using rule 47 (expr -> expr * expr .)
    <               shift and go to state 62
    LE              shift and go to state 63


state 94

    (19) expr -> { bloque } .
    .               reduce using rule 19 (expr -> { bloque } .)
    @               reduce using rule 19 (expr -> { bloque } .)
    =               reduce using rule 19 (expr -> { bloque } .)
    <               reduce using rule 19 (expr -> { bloque } .)
    LE              reduce using rule 19 (expr -> { bloque } .)
    -               reduce using rule 19 (expr -> { bloque } .)
    +               reduce using rule 19 (expr -> { bloque } .)
    /               reduce using rule 19 (expr -> { bloque } .)
    *               reduce using rule 19 (expr -> { bloque } .)
    ;               reduce using rule 19 (expr -> { bloque } .)
    }               reduce using rule 19 (expr -> { bloque } .)
    OF              reduce using rule 19 (expr -> { bloque } .)
    LOOP            reduce using rule 19 (expr -> { bloque } .)
    THEN            reduce using rule 19 (expr -> { bloque } .)
    )               reduce using rule 19 (expr -> { bloque } .)
    ,               reduce using rule 19 (expr -> { bloque } .)
    POOL            reduce using rule 19 (expr -> { bloque } .)
    ELSE            reduce using rule 19 (expr -> { bloque } .)
    IN              reduce using rule 19 (expr -> { bloque } .)
    FI              reduce using rule 19 (expr -> { bloque } .)


state 95

    (59) bloque -> bloque error . ;
    ;               shift and go to state 110


state 96

    (60) bloque -> bloque expr . ;
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    ;               shift and go to state 111
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 97

    (24) expr -> { expr } .
    .               reduce using rule 24 (expr -> { expr } .)
    @               reduce using rule 24 (expr -> { expr } .)
    =               reduce using rule 24 (expr -> { expr } .)
    <               reduce using rule 24 (expr -> { expr } .)
    LE              reduce using rule 24 (expr -> { expr } .)
    -               reduce using rule 24 (expr -> { expr } .)
    +               reduce using rule 24 (expr -> { expr } .)
    /               reduce using rule 24 (expr -> { expr } .)
    *               reduce using rule 24 (expr -> { expr } .)
    ;               reduce using rule 24 (expr -> { expr } .)
    }               reduce using rule 24 (expr -> { expr } .)
    OF              reduce using rule 24 (expr -> { expr } .)
    LOOP            reduce using rule 24 (expr -> { expr } .)
    THEN            reduce using rule 24 (expr -> { expr } .)
    )               reduce using rule 24 (expr -> { expr } .)
    ,               reduce using rule 24 (expr -> { expr } .)
    POOL            reduce using rule 24 (expr -> { expr } .)
    ELSE            reduce using rule 24 (expr -> { expr } .)
    IN              reduce using rule 24 (expr -> { expr } .)
    FI              reduce using rule 24 (expr -> { expr } .)


state 98

    (61) bloque -> expr ; .
    }               reduce using rule 61 (bloque -> expr ; .)
    error           reduce using rule 61 (bloque -> expr ; .)
    {               reduce using rule 61 (bloque -> expr ; .)
    BOOL_CONST      reduce using rule 61 (bloque -> expr ; .)
    STR_CONST       reduce using rule 61 (bloque -> expr ; .)
    INT_CONST       reduce using rule 61 (bloque -> expr ; .)
    OBJECTID        reduce using rule 61 (bloque -> expr ; .)
    NEW             reduce using rule 61 (bloque -> expr ; .)
    CASE            reduce using rule 61 (bloque -> expr ; .)
    LET             reduce using rule 61 (bloque -> expr ; .)
    WHILE           reduce using rule 61 (bloque -> expr ; .)
    IF              reduce using rule 61 (bloque -> expr ; .)
    (               reduce using rule 61 (bloque -> expr ; .)
    ~               reduce using rule 61 (bloque -> expr ; .)
    NOT             reduce using rule 61 (bloque -> expr ; .)
    ISVOID          reduce using rule 61 (bloque -> expr ; .)


state 99

    (26) expr -> CASE expr OF . cuerpo_case ESAC
    (27) expr -> CASE expr OF . ESAC
    (57) cuerpo_case -> . cuerpo_case cuerpo_case ;
    (58) cuerpo_case -> . OBJECTID : TYPEID DARROW expr ;
    ESAC            shift and go to state 113
    OBJECTID        shift and go to state 114

    cuerpo_case                    shift and go to state 112

state 100

    (28) expr -> LET OBJECTID : . TYPEID opcionales lista_inicia IN expr
    TYPEID          shift and go to state 115


state 101

    (29) expr -> WHILE expr LOOP . expr POOL
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 116

state 102

    (30) expr -> IF expr THEN . expr ELSE expr FI
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 117

state 103

    (37) expr -> ( expr ) .
    .               reduce using rule 37 (expr -> ( expr ) .)
    @               reduce using rule 37 (expr -> ( expr ) .)
    =               reduce using rule 37 (expr -> ( expr ) .)
    <               reduce using rule 37 (expr -> ( expr ) .)
    LE              reduce using rule 37 (expr -> ( expr ) .)
    -               reduce using rule 37 (expr -> ( expr ) .)
    +               reduce using rule 37 (expr -> ( expr ) .)
    /               reduce using rule 37 (expr -> ( expr ) .)
    *               reduce using rule 37 (expr -> ( expr ) .)
    ;               reduce using rule 37 (expr -> ( expr ) .)
    }               reduce using rule 37 (expr -> ( expr ) .)
    OF              reduce using rule 37 (expr -> ( expr ) .)
    LOOP            reduce using rule 37 (expr -> ( expr ) .)
    THEN            reduce using rule 37 (expr -> ( expr ) .)
    )               reduce using rule 37 (expr -> ( expr ) .)
    ,               reduce using rule 37 (expr -> ( expr ) .)
    POOL            reduce using rule 37 (expr -> ( expr ) .)
    ELSE            reduce using rule 37 (expr -> ( expr ) .)
    IN              reduce using rule 37 (expr -> ( expr ) .)
    FI              reduce using rule 37 (expr -> ( expr ) .)


state 104

    (14) Metodo -> OBJECTID ( formales ) : TYPEID { expr . }
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    }               shift and go to state 118
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 105

    (15) Metodo -> OBJECTID ( ) : TYPEID { expr } .
    ;               reduce using rule 15 (Metodo -> OBJECTID ( ) : TYPEID { expr } .)


state 106

    (34) expr -> OBJECTID ( lista_argumentos ) .
    .               reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    @               reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    =               reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    <               reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    LE              reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    -               reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    +               reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    /               reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    *               reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    ;               reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    }               reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    OF              reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    LOOP            reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    THEN            reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    )               reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    ,               reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    POOL            reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    ELSE            reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    IN              reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)
    FI              reduce using rule 34 (expr -> OBJECTID ( lista_argumentos ) .)


state 107

    (51) lista_argumentos -> expr , . lista_argumentos
    (51) lista_argumentos -> . expr , lista_argumentos
    (52) lista_argumentos -> . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 83
    lista_argumentos               shift and go to state 119

state 108

    (31) expr -> expr . OBJECTID ( . lista_argumentos )
    (32) expr -> expr . OBJECTID ( . )
    (51) lista_argumentos -> . expr , lista_argumentos
    (52) lista_argumentos -> . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    )               shift and go to state 121
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 83
    lista_argumentos               shift and go to state 120

state 109

    (35) expr -> expr @ TYPEID . . OBJECTID ( argumentos )
    (36) expr -> expr @ TYPEID . . OBJECTID ( )
    OBJECTID        shift and go to state 122


state 110

    (59) bloque -> bloque error ; .
    }               reduce using rule 59 (bloque -> bloque error ; .)
    error           reduce using rule 59 (bloque -> bloque error ; .)
    {               reduce using rule 59 (bloque -> bloque error ; .)
    BOOL_CONST      reduce using rule 59 (bloque -> bloque error ; .)
    STR_CONST       reduce using rule 59 (bloque -> bloque error ; .)
    INT_CONST       reduce using rule 59 (bloque -> bloque error ; .)
    OBJECTID        reduce using rule 59 (bloque -> bloque error ; .)
    NEW             reduce using rule 59 (bloque -> bloque error ; .)
    CASE            reduce using rule 59 (bloque -> bloque error ; .)
    LET             reduce using rule 59 (bloque -> bloque error ; .)
    WHILE           reduce using rule 59 (bloque -> bloque error ; .)
    IF              reduce using rule 59 (bloque -> bloque error ; .)
    (               reduce using rule 59 (bloque -> bloque error ; .)
    ~               reduce using rule 59 (bloque -> bloque error ; .)
    NOT             reduce using rule 59 (bloque -> bloque error ; .)
    ISVOID          reduce using rule 59 (bloque -> bloque error ; .)


state 111

    (60) bloque -> bloque expr ; .
    }               reduce using rule 60 (bloque -> bloque expr ; .)
    error           reduce using rule 60 (bloque -> bloque expr ; .)
    {               reduce using rule 60 (bloque -> bloque expr ; .)
    BOOL_CONST      reduce using rule 60 (bloque -> bloque expr ; .)
    STR_CONST       reduce using rule 60 (bloque -> bloque expr ; .)
    INT_CONST       reduce using rule 60 (bloque -> bloque expr ; .)
    OBJECTID        reduce using rule 60 (bloque -> bloque expr ; .)
    NEW             reduce using rule 60 (bloque -> bloque expr ; .)
    CASE            reduce using rule 60 (bloque -> bloque expr ; .)
    LET             reduce using rule 60 (bloque -> bloque expr ; .)
    WHILE           reduce using rule 60 (bloque -> bloque expr ; .)
    IF              reduce using rule 60 (bloque -> bloque expr ; .)
    (               reduce using rule 60 (bloque -> bloque expr ; .)
    ~               reduce using rule 60 (bloque -> bloque expr ; .)
    NOT             reduce using rule 60 (bloque -> bloque expr ; .)
    ISVOID          reduce using rule 60 (bloque -> bloque expr ; .)


state 112

    (26) expr -> CASE expr OF cuerpo_case . ESAC
    (57) cuerpo_case -> cuerpo_case . cuerpo_case ;
    (57) cuerpo_case -> . cuerpo_case cuerpo_case ;
    (58) cuerpo_case -> . OBJECTID : TYPEID DARROW expr ;
    ESAC            shift and go to state 124
    OBJECTID        shift and go to state 114

    cuerpo_case                    shift and go to state 123

state 113

    (27) expr -> CASE expr OF ESAC .
    .               reduce using rule 27 (expr -> CASE expr OF ESAC .)
    @               reduce using rule 27 (expr -> CASE expr OF ESAC .)
    =               reduce using rule 27 (expr -> CASE expr OF ESAC .)
    <               reduce using rule 27 (expr -> CASE expr OF ESAC .)
    LE              reduce using rule 27 (expr -> CASE expr OF ESAC .)
    -               reduce using rule 27 (expr -> CASE expr OF ESAC .)
    +               reduce using rule 27 (expr -> CASE expr OF ESAC .)
    /               reduce using rule 27 (expr -> CASE expr OF ESAC .)
    *               reduce using rule 27 (expr -> CASE expr OF ESAC .)
    ;               reduce using rule 27 (expr -> CASE expr OF ESAC .)
    }               reduce using rule 27 (expr -> CASE expr OF ESAC .)
    OF              reduce using rule 27 (expr -> CASE expr OF ESAC .)
    LOOP            reduce using rule 27 (expr -> CASE expr OF ESAC .)
    THEN            reduce using rule 27 (expr -> CASE expr OF ESAC .)
    )               reduce using rule 27 (expr -> CASE expr OF ESAC .)
    ,               reduce using rule 27 (expr -> CASE expr OF ESAC .)
    POOL            reduce using rule 27 (expr -> CASE expr OF ESAC .)
    ELSE            reduce using rule 27 (expr -> CASE expr OF ESAC .)
    IN              reduce using rule 27 (expr -> CASE expr OF ESAC .)
    FI              reduce using rule 27 (expr -> CASE expr OF ESAC .)


state 114

    (58) cuerpo_case -> OBJECTID . : TYPEID DARROW expr ;
    :               shift and go to state 125


state 115

    (28) expr -> LET OBJECTID : TYPEID . opcionales lista_inicia IN expr
    (55) opcionales -> .
    (56) opcionales -> . ASSIGN expr
    IN              reduce using rule 55 (opcionales -> .)
    ,               reduce using rule 55 (opcionales -> .)
    ASSIGN          shift and go to state 127

    opcionales                     shift and go to state 126

state 116

    (29) expr -> WHILE expr LOOP expr . POOL
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    POOL            shift and go to state 128
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 117

    (30) expr -> IF expr THEN expr . ELSE expr FI
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    ELSE            shift and go to state 129
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 118

    (14) Metodo -> OBJECTID ( formales ) : TYPEID { expr } .
    ;               reduce using rule 14 (Metodo -> OBJECTID ( formales ) : TYPEID { expr } .)


state 119

    (51) lista_argumentos -> expr , lista_argumentos .
    )               reduce using rule 51 (lista_argumentos -> expr , lista_argumentos .)


state 120

    (31) expr -> expr . OBJECTID ( lista_argumentos . )
    )               shift and go to state 130


state 121

    (32) expr -> expr . OBJECTID ( ) .
    .               reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    @               reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    =               reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    <               reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    LE              reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    -               reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    +               reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    /               reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    *               reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    ;               reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    }               reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    OF              reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    LOOP            reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    THEN            reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    )               reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    ,               reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    POOL            reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    ELSE            reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    IN              reduce using rule 32 (expr -> expr . OBJECTID ( ) .)
    FI              reduce using rule 32 (expr -> expr . OBJECTID ( ) .)


state 122

    (35) expr -> expr @ TYPEID . OBJECTID . ( argumentos )
    (36) expr -> expr @ TYPEID . OBJECTID . ( )
    (               shift and go to state 131


state 123

    (57) cuerpo_case -> cuerpo_case cuerpo_case . ;
    (57) cuerpo_case -> cuerpo_case . cuerpo_case ;
    (57) cuerpo_case -> . cuerpo_case cuerpo_case ;
    (58) cuerpo_case -> . OBJECTID : TYPEID DARROW expr ;
    ;               shift and go to state 132
    OBJECTID        shift and go to state 114

    cuerpo_case                    shift and go to state 123

state 124

    (26) expr -> CASE expr OF cuerpo_case ESAC .
    .               reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    @               reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    =               reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    <               reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    LE              reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    -               reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    +               reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    /               reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    *               reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    ;               reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    }               reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    OF              reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    LOOP            reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    THEN            reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    )               reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    ,               reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    POOL            reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    ELSE            reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    IN              reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)
    FI              reduce using rule 26 (expr -> CASE expr OF cuerpo_case ESAC .)


state 125

    (58) cuerpo_case -> OBJECTID : . TYPEID DARROW expr ;
    TYPEID          shift and go to state 133


state 126

    (28) expr -> LET OBJECTID : TYPEID opcionales . lista_inicia IN expr
    (53) lista_inicia -> . lista_inicia , OBJECTID : TYPEID opcionales
    (54) lista_inicia -> .
    IN              reduce using rule 54 (lista_inicia -> .)
    ,               reduce using rule 54 (lista_inicia -> .)

    lista_inicia                   shift and go to state 134

state 127

    (56) opcionales -> ASSIGN . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 135

state 128

    (29) expr -> WHILE expr LOOP expr POOL .
    .               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    @               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    =               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    <               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    LE              reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    -               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    +               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    /               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    *               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    ;               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    }               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    OF              reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    LOOP            reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    THEN            reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    )               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    ,               reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    POOL            reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    ELSE            reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    IN              reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)
    FI              reduce using rule 29 (expr -> WHILE expr LOOP expr POOL .)


state 129

    (30) expr -> IF expr THEN expr ELSE . expr FI
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 136

state 130

    (31) expr -> expr . OBJECTID ( lista_argumentos ) .
    .               reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    @               reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    =               reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    <               reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    LE              reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    -               reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    +               reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    /               reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    *               reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    ;               reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    }               reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    OF              reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    LOOP            reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    THEN            reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    )               reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    ,               reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    POOL            reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    ELSE            reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    IN              reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    FI              reduce using rule 31 (expr -> expr . OBJECTID ( lista_argumentos ) .)


state 131

    (35) expr -> expr @ TYPEID . OBJECTID ( . argumentos )
    (36) expr -> expr @ TYPEID . OBJECTID ( . )
    (49) argumentos -> . expr , argumentos
    (50) argumentos -> . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    )               shift and go to state 139
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 137
    argumentos                     shift and go to state 138

state 132

    (57) cuerpo_case -> cuerpo_case cuerpo_case ; .
    ESAC            reduce using rule 57 (cuerpo_case -> cuerpo_case cuerpo_case ; .)
    OBJECTID        reduce using rule 57 (cuerpo_case -> cuerpo_case cuerpo_case ; .)
    ;               reduce using rule 57 (cuerpo_case -> cuerpo_case cuerpo_case ; .)


state 133

    (58) cuerpo_case -> OBJECTID : TYPEID . DARROW expr ;
    DARROW          shift and go to state 140


state 134

    (28) expr -> LET OBJECTID : TYPEID opcionales lista_inicia . IN expr
    (53) lista_inicia -> lista_inicia . , OBJECTID : TYPEID opcionales
    IN              shift and go to state 141
    ,               shift and go to state 142


state 135

    (56) opcionales -> ASSIGN expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    IN              reduce using rule 56 (opcionales -> ASSIGN expr .)
    ,               reduce using rule 56 (opcionales -> ASSIGN expr .)
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 136

    (30) expr -> IF expr THEN expr ELSE expr . FI
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    FI              shift and go to state 143
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 137

    (49) argumentos -> expr . , argumentos
    (50) argumentos -> expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    ,               shift and go to state 144
    )               reduce using rule 50 (argumentos -> expr .)
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 138

    (35) expr -> expr @ TYPEID . OBJECTID ( argumentos . )
    )               shift and go to state 145


state 139

    (36) expr -> expr @ TYPEID . OBJECTID ( ) .
    .               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    @               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    =               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    <               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LE              reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    -               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    +               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    /               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    *               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ;               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    }               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    OF              reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LOOP            reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    THEN            reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    )               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ,               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    POOL            reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ELSE            reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    IN              reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    FI              reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( ) .)


state 140

    (58) cuerpo_case -> OBJECTID : TYPEID DARROW . expr ;
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 146

state 141

    (28) expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 147

state 142

    (53) lista_inicia -> lista_inicia , . OBJECTID : TYPEID opcionales
    OBJECTID        shift and go to state 148


state 143

    (30) expr -> IF expr THEN expr ELSE expr FI .
    .               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    @               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    =               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    <               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    LE              reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    -               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    +               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    /               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    *               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    ;               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    }               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    OF              reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    LOOP            reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    THEN            reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    )               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    ,               reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    POOL            reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    ELSE            reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    IN              reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)
    FI              reduce using rule 30 (expr -> IF expr THEN expr ELSE expr FI .)


state 144

    (49) argumentos -> expr , . argumentos
    (49) argumentos -> . expr , argumentos
    (50) argumentos -> . expr
    (19) expr -> . { bloque }
    (20) expr -> . BOOL_CONST
    (21) expr -> . STR_CONST
    (22) expr -> . INT_CONST
    (23) expr -> . OBJECTID
    (24) expr -> . { expr }
    (25) expr -> . NEW TYPEID
    (26) expr -> . CASE expr OF cuerpo_case ESAC
    (27) expr -> . CASE expr OF ESAC
    (28) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (29) expr -> . WHILE expr LOOP expr POOL
    (30) expr -> . IF expr THEN expr ELSE expr FI
    (31) expr -> . expr . OBJECTID ( lista_argumentos )
    (32) expr -> . expr . OBJECTID ( )
    (33) expr -> . OBJECTID ( )
    (34) expr -> . OBJECTID ( lista_argumentos )
    (35) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( )
    (37) expr -> . ( expr )
    (38) expr -> . ~ expr
    (39) expr -> . OBJECTID ASSIGN expr
    (40) expr -> . NOT expr
    (41) expr -> . expr = expr
    (42) expr -> . expr < expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr - expr
    (45) expr -> . expr + expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . ISVOID expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    NOT             shift and go to state 53
    ISVOID          shift and go to state 54

    expr                           shift and go to state 137
    argumentos                     shift and go to state 149

state 145

    (35) expr -> expr @ TYPEID . OBJECTID ( argumentos ) .
    .               reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    @               reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    =               reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    <               reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    LE              reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    -               reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    +               reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    /               reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    *               reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    ;               reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    }               reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    OF              reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    LOOP            reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    THEN            reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    )               reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    ,               reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    POOL            reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    ELSE            reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    IN              reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    FI              reduce using rule 35 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)


state 146

    (58) cuerpo_case -> OBJECTID : TYPEID DARROW expr . ;
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    ;               shift and go to state 150
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 147

    (28) expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .
    (31) expr -> expr . . OBJECTID ( lista_argumentos )
    (32) expr -> expr . . OBJECTID ( )
    (35) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (36) expr -> expr . @ TYPEID . OBJECTID ( )
    (41) expr -> expr . = expr
    (42) expr -> expr . < expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . - expr
    (45) expr -> expr . + expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
    ;               reduce using rule 28 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    }               reduce using rule 28 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    OF              reduce using rule 28 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    LOOP            reduce using rule 28 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    THEN            reduce using rule 28 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    )               reduce using rule 28 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    ,               reduce using rule 28 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    POOL            reduce using rule 28 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    ELSE            reduce using rule 28 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    IN              reduce using rule 28 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    FI              reduce using rule 28 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    <               shift and go to state 62
    LE              shift and go to state 63
    -               shift and go to state 64
    +               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 148

    (53) lista_inicia -> lista_inicia , OBJECTID . : TYPEID opcionales
    :               shift and go to state 151


state 149

    (49) argumentos -> expr , argumentos .
    )               reduce using rule 49 (argumentos -> expr , argumentos .)


state 150

    (58) cuerpo_case -> OBJECTID : TYPEID DARROW expr ; .
    ESAC            reduce using rule 58 (cuerpo_case -> OBJECTID : TYPEID DARROW expr ; .)
    OBJECTID        reduce using rule 58 (cuerpo_case -> OBJECTID : TYPEID DARROW expr ; .)
    ;               reduce using rule 58 (cuerpo_case -> OBJECTID : TYPEID DARROW expr ; .)


state 151

    (53) lista_inicia -> lista_inicia , OBJECTID : . TYPEID opcionales
    TYPEID          shift and go to state 152


state 152

    (53) lista_inicia -> lista_inicia , OBJECTID : TYPEID . opcionales
    (55) opcionales -> .
    (56) opcionales -> . ASSIGN expr
    IN              reduce using rule 55 (opcionales -> .)
    ,               reduce using rule 55 (opcionales -> .)
    ASSIGN          shift and go to state 127

    opcionales                     shift and go to state 153

state 153

    (53) lista_inicia -> lista_inicia , OBJECTID : TYPEID opcionales .
    IN              reduce using rule 53 (lista_inicia -> lista_inicia , OBJECTID : TYPEID opcionales .)
    ,               reduce using rule 53 (lista_inicia -> lista_inicia , OBJECTID : TYPEID opcionales .)


Conflicts:

shift/reduce conflict for } in state 10 resolved as shift
shift/reduce conflict for } in state 14 resolved as shift
shift/reduce conflict for . in state 87 resolved as shift
shift/reduce conflict for @ in state 87 resolved as shift
shift/reduce conflict for = in state 87 resolved as shift
shift/reduce conflict for < in state 87 resolved as shift
shift/reduce conflict for LE in state 87 resolved as shift
shift/reduce conflict for - in state 87 resolved as shift
shift/reduce conflict for + in state 87 resolved as shift
shift/reduce conflict for / in state 87 resolved as shift
shift/reduce conflict for * in state 87 resolved as shift
shift/reduce conflict for . in state 147 resolved as shift
shift/reduce conflict for @ in state 147 resolved as shift
shift/reduce conflict for = in state 147 resolved as shift
shift/reduce conflict for < in state 147 resolved as shift
shift/reduce conflict for LE in state 147 resolved as shift
shift/reduce conflict for - in state 147 resolved as shift
shift/reduce conflict for + in state 147 resolved as shift
shift/reduce conflict for / in state 147 resolved as shift
shift/reduce conflict for * in state 147 resolved as shift