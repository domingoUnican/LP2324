Grammar:

Rule 0     S' -> Programa
Rule 1     Programa -> Programa error
Rule 2     Programa -> Programa Clase ;
Rule 3     Programa -> Clase ;
Rule 4     Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
Rule 5     Clase -> CLASS TYPEID INHERITS TYPEID { }
Rule 6     Clase -> CLASS TYPEID { cuerpo_clase }
Rule 7     Clase -> CLASS TYPEID { }
Rule 8     cuerpo_clase -> cuerpo_clase error ;
Rule 9     cuerpo_clase -> cuerpo_clase caracteristica ;
Rule 10    cuerpo_clase -> <empty>
Rule 11    caracteristica -> Metodo
Rule 12    caracteristica -> Atributo
Rule 13    Atributo -> OBJECTID : TYPEID ASSIGN expr  [precedence=right, level=1]
Rule 14    Atributo -> OBJECTID : error
Rule 15    Atributo -> OBJECTID : TYPEID
Rule 16    Metodo -> OBJECTID ( error ) : TYPEID { expr }
Rule 17    Metodo -> OBJECTID ( formales ) : TYPEID { error }
Rule 18    Metodo -> OBJECTID ( formales ) : TYPEID { expr }
Rule 19    Metodo -> OBJECTID ( ) : TYPEID { error }
Rule 20    Metodo -> OBJECTID ( ) : error
Rule 21    Metodo -> OBJECTID ( ) : TYPEID { expr }
Rule 22    formales -> formal , formales
Rule 23    formales -> formal
Rule 24    formal -> OBJECTID : TYPEID
Rule 25    expr -> { bloque }
Rule 26    expr -> BOOL_CONST
Rule 27    expr -> STR_CONST
Rule 28    expr -> INT_CONST
Rule 29    expr -> OBJECTID
Rule 30    expr -> { expr }
Rule 31    expr -> NEW TYPEID
Rule 32    expr -> CASE expr OF cuerpo_case ESAC
Rule 33    expr -> CASE expr OF ESAC
Rule 34    expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error
Rule 35    expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr
Rule 36    expr -> WHILE expr LOOP expr POOL
Rule 37    expr -> IF expr THEN expr error FI
Rule 38    expr -> IF expr THEN expr ELSE expr FI
Rule 39    expr -> expr . OBJECTID ( lista_argumentos )
Rule 40    expr -> expr . OBJECTID ( )
Rule 41    expr -> OBJECTID ( )
Rule 42    expr -> OBJECTID ( lista_argumentos )
Rule 43    expr -> expr @ TYPEID . OBJECTID ( argumentos )
Rule 44    expr -> expr @ TYPEID . OBJECTID ( )
Rule 45    expr -> ( expr )
Rule 46    expr -> ~ expr  [precedence=left, level=7]
Rule 47    expr -> OBJECTID ASSIGN expr  [precedence=right, level=1]
Rule 48    expr -> NOT expr  [precedence=left, level=2]
Rule 49    expr -> expr = expr  [precedence=nonassoc, level=3]
Rule 50    expr -> expr < expr  [precedence=nonassoc, level=3]
Rule 51    expr -> expr LE expr  [precedence=nonassoc, level=3]
Rule 52    expr -> expr - expr  [precedence=left, level=4]
Rule 53    expr -> expr + expr  [precedence=left, level=4]
Rule 54    expr -> expr / expr  [precedence=left, level=5]
Rule 55    expr -> expr * expr  [precedence=left, level=5]
Rule 56    expr -> ISVOID expr  [precedence=left, level=6]
Rule 57    argumentos -> expr , argumentos
Rule 58    argumentos -> expr
Rule 59    lista_argumentos -> expr , lista_argumentos
Rule 60    lista_argumentos -> expr
Rule 61    lista_inicia -> lista_inicia , OBJECTID : TYPEID opcionales
Rule 62    lista_inicia -> <empty>
Rule 63    opcionales -> <empty>
Rule 64    opcionales -> ASSIGN error
Rule 65    opcionales -> ASSIGN expr  [precedence=right, level=1]
Rule 66    cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW error ;
Rule 67    cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ;
Rule 68    cuerpo_case -> OBJECTID : TYPEID DARROW expr ;
Rule 69    bloque -> bloque error ;
Rule 70    bloque -> bloque expr ;
Rule 71    bloque -> expr ;

Unused terminals:

    ERROR
    NUMBER
    COMMENT_1LINEA
    COMMENT_BLOQUE

Terminals, with rules where they appear:

(                    : 16 17 18 19 20 21 39 40 41 42 43 44 45
)                    : 16 17 18 19 20 21 39 40 41 42 43 44 45
*                    : 55
+                    : 53
,                    : 22 57 59 61
-                    : 52
.                    : 39 40 43 44
/                    : 54
:                    : 13 14 15 16 17 18 19 20 21 24 34 35 61 66 67 68
;                    : 2 3 8 9 66 67 68 69 70 71
<                    : 50
=                    : 49
@                    : 43 44
ASSIGN               : 13 47 64 65
BOOL_CONST           : 26
CASE                 : 32 33
CLASS                : 4 5 6 7
COMMENT_1LINEA       : 
COMMENT_BLOQUE       : 
DARROW               : 66 67 68
ELSE                 : 38
ERROR                : 
ESAC                 : 32 33
FI                   : 37 38
IF                   : 37 38
IN                   : 34 35
INHERITS             : 4 5
INT_CONST            : 28
ISVOID               : 56
LE                   : 51
LET                  : 34 35
LOOP                 : 36
NEW                  : 31
NOT                  : 48
NUMBER               : 
OBJECTID             : 13 14 15 16 17 18 19 20 21 24 29 34 35 39 40 41 42 43 44 47 61 66 67 68
OF                   : 32 33
POOL                 : 36
STR_CONST            : 27
THEN                 : 37 38
TYPEID               : 4 4 5 5 6 7 13 15 16 17 18 19 21 24 31 34 35 43 44 61 66 67 68
WHILE                : 36
error                : 1 8 14 16 17 19 20 34 37 64 66 69
{                    : 4 5 6 7 16 17 18 19 21 25 30
}                    : 4 5 6 7 16 17 18 19 21 25 30
~                    : 46

Nonterminals, with rules where they appear:

Atributo             : 12
Clase                : 2 3
Metodo               : 11
Programa             : 1 2 0
argumentos           : 43 57
bloque               : 25 69 70
caracteristica       : 9
cuerpo_case          : 32 66 67
cuerpo_clase         : 4 6 8 9
expr                 : 13 16 18 21 30 32 33 35 36 36 37 37 38 38 38 39 40 43 44 45 46 47 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 57 58 59 60 65 67 68 70 71
formal               : 22 23
formales             : 17 18 22
lista_argumentos     : 39 42 59
lista_inicia         : 34 35 61
opcionales           : 34 35 61


state 0

    (0) S' -> . Programa
    (1) Programa -> . Programa error
    (2) Programa -> . Programa Clase ;
    (3) Programa -> . Clase ;
    (4) Clase -> . CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> . CLASS TYPEID INHERITS TYPEID { }
    (6) Clase -> . CLASS TYPEID { cuerpo_clase }
    (7) Clase -> . CLASS TYPEID { }
    CLASS           shift and go to state 3

    Programa                       shift and go to state 1
    Clase                          shift and go to state 2

state 1

    (0) S' -> Programa .
    (1) Programa -> Programa . error
    (2) Programa -> Programa . Clase ;
    (4) Clase -> . CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> . CLASS TYPEID INHERITS TYPEID { }
    (6) Clase -> . CLASS TYPEID { cuerpo_clase }
    (7) Clase -> . CLASS TYPEID { }
    error           shift and go to state 4
    CLASS           shift and go to state 3

    Clase                          shift and go to state 5

state 2

    (3) Programa -> Clase . ;
    ;               shift and go to state 6


state 3

    (4) Clase -> CLASS . TYPEID INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> CLASS . TYPEID INHERITS TYPEID { }
    (6) Clase -> CLASS . TYPEID { cuerpo_clase }
    (7) Clase -> CLASS . TYPEID { }
    TYPEID          shift and go to state 7


state 4

    (1) Programa -> Programa error .
    error           reduce using rule 1 (Programa -> Programa error .)
    CLASS           reduce using rule 1 (Programa -> Programa error .)
    $end            reduce using rule 1 (Programa -> Programa error .)


state 5

    (2) Programa -> Programa Clase . ;
    ;               shift and go to state 8


state 6

    (3) Programa -> Clase ; .
    error           reduce using rule 3 (Programa -> Clase ; .)
    CLASS           reduce using rule 3 (Programa -> Clase ; .)
    $end            reduce using rule 3 (Programa -> Clase ; .)


state 7

    (4) Clase -> CLASS TYPEID . INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> CLASS TYPEID . INHERITS TYPEID { }
    (6) Clase -> CLASS TYPEID . { cuerpo_clase }
    (7) Clase -> CLASS TYPEID . { }
    INHERITS        shift and go to state 9
    {               shift and go to state 10


state 8

    (2) Programa -> Programa Clase ; .
    error           reduce using rule 2 (Programa -> Programa Clase ; .)
    CLASS           reduce using rule 2 (Programa -> Programa Clase ; .)
    $end            reduce using rule 2 (Programa -> Programa Clase ; .)


state 9

    (4) Clase -> CLASS TYPEID INHERITS . TYPEID { cuerpo_clase }
    (5) Clase -> CLASS TYPEID INHERITS . TYPEID { }
    TYPEID          shift and go to state 11


state 10

    (6) Clase -> CLASS TYPEID { . cuerpo_clase }
    (7) Clase -> CLASS TYPEID { . }
    (8) cuerpo_clase -> . cuerpo_clase error ;
    (9) cuerpo_clase -> . cuerpo_clase caracteristica ;
    (10) cuerpo_clase -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 13
    error           reduce using rule 10 (cuerpo_clase -> .)
    OBJECTID        reduce using rule 10 (cuerpo_clase -> .)

    cuerpo_clase                   shift and go to state 12

state 11

    (4) Clase -> CLASS TYPEID INHERITS TYPEID . { cuerpo_clase }
    (5) Clase -> CLASS TYPEID INHERITS TYPEID . { }
    {               shift and go to state 14


state 12

    (6) Clase -> CLASS TYPEID { cuerpo_clase . }
    (8) cuerpo_clase -> cuerpo_clase . error ;
    (9) cuerpo_clase -> cuerpo_clase . caracteristica ;
    (11) caracteristica -> . Metodo
    (12) caracteristica -> . Atributo
    (16) Metodo -> . OBJECTID ( error ) : TYPEID { expr }
    (17) Metodo -> . OBJECTID ( formales ) : TYPEID { error }
    (18) Metodo -> . OBJECTID ( formales ) : TYPEID { expr }
    (19) Metodo -> . OBJECTID ( ) : TYPEID { error }
    (20) Metodo -> . OBJECTID ( ) : error
    (21) Metodo -> . OBJECTID ( ) : TYPEID { expr }
    (13) Atributo -> . OBJECTID : TYPEID ASSIGN expr
    (14) Atributo -> . OBJECTID : error
    (15) Atributo -> . OBJECTID : TYPEID
    }               shift and go to state 15
    error           shift and go to state 16
    OBJECTID        shift and go to state 20

    caracteristica                 shift and go to state 17
    Metodo                         shift and go to state 18
    Atributo                       shift and go to state 19

state 13

    (7) Clase -> CLASS TYPEID { } .
    ;               reduce using rule 7 (Clase -> CLASS TYPEID { } .)


state 14

    (4) Clase -> CLASS TYPEID INHERITS TYPEID { . cuerpo_clase }
    (5) Clase -> CLASS TYPEID INHERITS TYPEID { . }
    (8) cuerpo_clase -> . cuerpo_clase error ;
    (9) cuerpo_clase -> . cuerpo_clase caracteristica ;
    (10) cuerpo_clase -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 22
    error           reduce using rule 10 (cuerpo_clase -> .)
    OBJECTID        reduce using rule 10 (cuerpo_clase -> .)

    cuerpo_clase                   shift and go to state 21

state 15

    (6) Clase -> CLASS TYPEID { cuerpo_clase } .
    ;               reduce using rule 6 (Clase -> CLASS TYPEID { cuerpo_clase } .)


state 16

    (8) cuerpo_clase -> cuerpo_clase error . ;
    ;               shift and go to state 23


state 17

    (9) cuerpo_clase -> cuerpo_clase caracteristica . ;
    ;               shift and go to state 24


state 18

    (11) caracteristica -> Metodo .
    ;               reduce using rule 11 (caracteristica -> Metodo .)


state 19

    (12) caracteristica -> Atributo .
    ;               reduce using rule 12 (caracteristica -> Atributo .)


state 20

    (16) Metodo -> OBJECTID . ( error ) : TYPEID { expr }
    (17) Metodo -> OBJECTID . ( formales ) : TYPEID { error }
    (18) Metodo -> OBJECTID . ( formales ) : TYPEID { expr }
    (19) Metodo -> OBJECTID . ( ) : TYPEID { error }
    (20) Metodo -> OBJECTID . ( ) : error
    (21) Metodo -> OBJECTID . ( ) : TYPEID { expr }
    (13) Atributo -> OBJECTID . : TYPEID ASSIGN expr
    (14) Atributo -> OBJECTID . : error
    (15) Atributo -> OBJECTID . : TYPEID
    (               shift and go to state 25
    :               shift and go to state 26


state 21

    (4) Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase . }
    (8) cuerpo_clase -> cuerpo_clase . error ;
    (9) cuerpo_clase -> cuerpo_clase . caracteristica ;
    (11) caracteristica -> . Metodo
    (12) caracteristica -> . Atributo
    (16) Metodo -> . OBJECTID ( error ) : TYPEID { expr }
    (17) Metodo -> . OBJECTID ( formales ) : TYPEID { error }
    (18) Metodo -> . OBJECTID ( formales ) : TYPEID { expr }
    (19) Metodo -> . OBJECTID ( ) : TYPEID { error }
    (20) Metodo -> . OBJECTID ( ) : error
    (21) Metodo -> . OBJECTID ( ) : TYPEID { expr }
    (13) Atributo -> . OBJECTID : TYPEID ASSIGN expr
    (14) Atributo -> . OBJECTID : error
    (15) Atributo -> . OBJECTID : TYPEID
    }               shift and go to state 27
    error           shift and go to state 16
    OBJECTID        shift and go to state 20

    caracteristica                 shift and go to state 17
    Metodo                         shift and go to state 18
    Atributo                       shift and go to state 19

state 22

    (5) Clase -> CLASS TYPEID INHERITS TYPEID { } .
    ;               reduce using rule 5 (Clase -> CLASS TYPEID INHERITS TYPEID { } .)


state 23

    (8) cuerpo_clase -> cuerpo_clase error ; .
    }               reduce using rule 8 (cuerpo_clase -> cuerpo_clase error ; .)
    error           reduce using rule 8 (cuerpo_clase -> cuerpo_clase error ; .)
    OBJECTID        reduce using rule 8 (cuerpo_clase -> cuerpo_clase error ; .)


state 24

    (9) cuerpo_clase -> cuerpo_clase caracteristica ; .
    }               reduce using rule 9 (cuerpo_clase -> cuerpo_clase caracteristica ; .)
    error           reduce using rule 9 (cuerpo_clase -> cuerpo_clase caracteristica ; .)
    OBJECTID        reduce using rule 9 (cuerpo_clase -> cuerpo_clase caracteristica ; .)


state 25

    (16) Metodo -> OBJECTID ( . error ) : TYPEID { expr }
    (17) Metodo -> OBJECTID ( . formales ) : TYPEID { error }
    (18) Metodo -> OBJECTID ( . formales ) : TYPEID { expr }
    (19) Metodo -> OBJECTID ( . ) : TYPEID { error }
    (20) Metodo -> OBJECTID ( . ) : error
    (21) Metodo -> OBJECTID ( . ) : TYPEID { expr }
    (22) formales -> . formal , formales
    (23) formales -> . formal
    (24) formal -> . OBJECTID : TYPEID
    error           shift and go to state 29
    )               shift and go to state 30
    OBJECTID        shift and go to state 28

    formales                       shift and go to state 31
    formal                         shift and go to state 32

state 26

    (13) Atributo -> OBJECTID : . TYPEID ASSIGN expr
    (14) Atributo -> OBJECTID : . error
    (15) Atributo -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 33
    error           shift and go to state 34


state 27

    (4) Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase } .
    ;               reduce using rule 4 (Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase } .)


state 28

    (24) formal -> OBJECTID . : TYPEID
    :               shift and go to state 35


state 29

    (16) Metodo -> OBJECTID ( error . ) : TYPEID { expr }
    )               shift and go to state 36


state 30

    (19) Metodo -> OBJECTID ( ) . : TYPEID { error }
    (20) Metodo -> OBJECTID ( ) . : error
    (21) Metodo -> OBJECTID ( ) . : TYPEID { expr }
    :               shift and go to state 37


state 31

    (17) Metodo -> OBJECTID ( formales . ) : TYPEID { error }
    (18) Metodo -> OBJECTID ( formales . ) : TYPEID { expr }
    )               shift and go to state 38


state 32

    (22) formales -> formal . , formales
    (23) formales -> formal .
    ,               shift and go to state 39
    )               reduce using rule 23 (formales -> formal .)


state 33

    (13) Atributo -> OBJECTID : TYPEID . ASSIGN expr
    (15) Atributo -> OBJECTID : TYPEID .
    ASSIGN          shift and go to state 40
    ;               reduce using rule 15 (Atributo -> OBJECTID : TYPEID .)


state 34

    (14) Atributo -> OBJECTID : error .
    ;               reduce using rule 14 (Atributo -> OBJECTID : error .)


state 35

    (24) formal -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 41


state 36

    (16) Metodo -> OBJECTID ( error ) . : TYPEID { expr }
    :               shift and go to state 42


state 37

    (19) Metodo -> OBJECTID ( ) : . TYPEID { error }
    (20) Metodo -> OBJECTID ( ) : . error
    (21) Metodo -> OBJECTID ( ) : . TYPEID { expr }
    TYPEID          shift and go to state 43
    error           shift and go to state 44


state 38

    (17) Metodo -> OBJECTID ( formales ) . : TYPEID { error }
    (18) Metodo -> OBJECTID ( formales ) . : TYPEID { expr }
    :               shift and go to state 45


state 39

    (22) formales -> formal , . formales
    (22) formales -> . formal , formales
    (23) formales -> . formal
    (24) formal -> . OBJECTID : TYPEID
    OBJECTID        shift and go to state 28

    formal                         shift and go to state 32
    formales                       shift and go to state 46

state 40

    (13) Atributo -> OBJECTID : TYPEID ASSIGN . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 48

state 41

    (24) formal -> OBJECTID : TYPEID .
    ,               reduce using rule 24 (formal -> OBJECTID : TYPEID .)
    )               reduce using rule 24 (formal -> OBJECTID : TYPEID .)


state 42

    (16) Metodo -> OBJECTID ( error ) : . TYPEID { expr }
    TYPEID          shift and go to state 62


state 43

    (19) Metodo -> OBJECTID ( ) : TYPEID . { error }
    (21) Metodo -> OBJECTID ( ) : TYPEID . { expr }
    {               shift and go to state 63


state 44

    (20) Metodo -> OBJECTID ( ) : error .
    ;               reduce using rule 20 (Metodo -> OBJECTID ( ) : error .)


state 45

    (17) Metodo -> OBJECTID ( formales ) : . TYPEID { error }
    (18) Metodo -> OBJECTID ( formales ) : . TYPEID { expr }
    TYPEID          shift and go to state 64


state 46

    (22) formales -> formal , formales .
    )               reduce using rule 22 (formales -> formal , formales .)


state 47

    (29) expr -> OBJECTID .
    (41) expr -> OBJECTID . ( )
    (42) expr -> OBJECTID . ( lista_argumentos )
    (47) expr -> OBJECTID . ASSIGN expr
    .               reduce using rule 29 (expr -> OBJECTID .)
    @               reduce using rule 29 (expr -> OBJECTID .)
    =               reduce using rule 29 (expr -> OBJECTID .)
    <               reduce using rule 29 (expr -> OBJECTID .)
    LE              reduce using rule 29 (expr -> OBJECTID .)
    -               reduce using rule 29 (expr -> OBJECTID .)
    +               reduce using rule 29 (expr -> OBJECTID .)
    /               reduce using rule 29 (expr -> OBJECTID .)
    *               reduce using rule 29 (expr -> OBJECTID .)
    ;               reduce using rule 29 (expr -> OBJECTID .)
    }               reduce using rule 29 (expr -> OBJECTID .)
    OF              reduce using rule 29 (expr -> OBJECTID .)
    LOOP            reduce using rule 29 (expr -> OBJECTID .)
    THEN            reduce using rule 29 (expr -> OBJECTID .)
    )               reduce using rule 29 (expr -> OBJECTID .)
    ,               reduce using rule 29 (expr -> OBJECTID .)
    POOL            reduce using rule 29 (expr -> OBJECTID .)
    error           reduce using rule 29 (expr -> OBJECTID .)
    ELSE            reduce using rule 29 (expr -> OBJECTID .)
    IN              reduce using rule 29 (expr -> OBJECTID .)
    FI              reduce using rule 29 (expr -> OBJECTID .)
    (               shift and go to state 65
    ASSIGN          shift and go to state 66


state 48

    (13) Atributo -> OBJECTID : TYPEID ASSIGN expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    ;               reduce using rule 13 (Atributo -> OBJECTID : TYPEID ASSIGN expr .)
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 49

    (25) expr -> { . bloque }
    (30) expr -> { . expr }
    (69) bloque -> . bloque error ;
    (70) bloque -> . bloque expr ;
    (71) bloque -> . expr ;
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    bloque                         shift and go to state 76
    expr                           shift and go to state 77

state 50

    (26) expr -> BOOL_CONST .
    .               reduce using rule 26 (expr -> BOOL_CONST .)
    @               reduce using rule 26 (expr -> BOOL_CONST .)
    =               reduce using rule 26 (expr -> BOOL_CONST .)
    <               reduce using rule 26 (expr -> BOOL_CONST .)
    LE              reduce using rule 26 (expr -> BOOL_CONST .)
    -               reduce using rule 26 (expr -> BOOL_CONST .)
    +               reduce using rule 26 (expr -> BOOL_CONST .)
    /               reduce using rule 26 (expr -> BOOL_CONST .)
    *               reduce using rule 26 (expr -> BOOL_CONST .)
    ;               reduce using rule 26 (expr -> BOOL_CONST .)
    }               reduce using rule 26 (expr -> BOOL_CONST .)
    OF              reduce using rule 26 (expr -> BOOL_CONST .)
    LOOP            reduce using rule 26 (expr -> BOOL_CONST .)
    THEN            reduce using rule 26 (expr -> BOOL_CONST .)
    )               reduce using rule 26 (expr -> BOOL_CONST .)
    ,               reduce using rule 26 (expr -> BOOL_CONST .)
    POOL            reduce using rule 26 (expr -> BOOL_CONST .)
    error           reduce using rule 26 (expr -> BOOL_CONST .)
    ELSE            reduce using rule 26 (expr -> BOOL_CONST .)
    IN              reduce using rule 26 (expr -> BOOL_CONST .)
    FI              reduce using rule 26 (expr -> BOOL_CONST .)


state 51

    (27) expr -> STR_CONST .
    .               reduce using rule 27 (expr -> STR_CONST .)
    @               reduce using rule 27 (expr -> STR_CONST .)
    =               reduce using rule 27 (expr -> STR_CONST .)
    <               reduce using rule 27 (expr -> STR_CONST .)
    LE              reduce using rule 27 (expr -> STR_CONST .)
    -               reduce using rule 27 (expr -> STR_CONST .)
    +               reduce using rule 27 (expr -> STR_CONST .)
    /               reduce using rule 27 (expr -> STR_CONST .)
    *               reduce using rule 27 (expr -> STR_CONST .)
    ;               reduce using rule 27 (expr -> STR_CONST .)
    }               reduce using rule 27 (expr -> STR_CONST .)
    OF              reduce using rule 27 (expr -> STR_CONST .)
    LOOP            reduce using rule 27 (expr -> STR_CONST .)
    THEN            reduce using rule 27 (expr -> STR_CONST .)
    )               reduce using rule 27 (expr -> STR_CONST .)
    ,               reduce using rule 27 (expr -> STR_CONST .)
    POOL            reduce using rule 27 (expr -> STR_CONST .)
    error           reduce using rule 27 (expr -> STR_CONST .)
    ELSE            reduce using rule 27 (expr -> STR_CONST .)
    IN              reduce using rule 27 (expr -> STR_CONST .)
    FI              reduce using rule 27 (expr -> STR_CONST .)


state 52

    (28) expr -> INT_CONST .
    .               reduce using rule 28 (expr -> INT_CONST .)
    @               reduce using rule 28 (expr -> INT_CONST .)
    =               reduce using rule 28 (expr -> INT_CONST .)
    <               reduce using rule 28 (expr -> INT_CONST .)
    LE              reduce using rule 28 (expr -> INT_CONST .)
    -               reduce using rule 28 (expr -> INT_CONST .)
    +               reduce using rule 28 (expr -> INT_CONST .)
    /               reduce using rule 28 (expr -> INT_CONST .)
    *               reduce using rule 28 (expr -> INT_CONST .)
    ;               reduce using rule 28 (expr -> INT_CONST .)
    }               reduce using rule 28 (expr -> INT_CONST .)
    OF              reduce using rule 28 (expr -> INT_CONST .)
    LOOP            reduce using rule 28 (expr -> INT_CONST .)
    THEN            reduce using rule 28 (expr -> INT_CONST .)
    )               reduce using rule 28 (expr -> INT_CONST .)
    ,               reduce using rule 28 (expr -> INT_CONST .)
    POOL            reduce using rule 28 (expr -> INT_CONST .)
    error           reduce using rule 28 (expr -> INT_CONST .)
    ELSE            reduce using rule 28 (expr -> INT_CONST .)
    IN              reduce using rule 28 (expr -> INT_CONST .)
    FI              reduce using rule 28 (expr -> INT_CONST .)


state 53

    (31) expr -> NEW . TYPEID
    TYPEID          shift and go to state 78


state 54

    (32) expr -> CASE . expr OF cuerpo_case ESAC
    (33) expr -> CASE . expr OF ESAC
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 79

state 55

    (34) expr -> LET . OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> LET . OBJECTID : TYPEID opcionales lista_inicia IN expr
    OBJECTID        shift and go to state 80


state 56

    (36) expr -> WHILE . expr LOOP expr POOL
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 81

state 57

    (37) expr -> IF . expr THEN expr error FI
    (38) expr -> IF . expr THEN expr ELSE expr FI
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 82

state 58

    (45) expr -> ( . expr )
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 83

state 59

    (46) expr -> ~ . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 84

state 60

    (48) expr -> NOT . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 85

state 61

    (56) expr -> ISVOID . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 86

state 62

    (16) Metodo -> OBJECTID ( error ) : TYPEID . { expr }
    {               shift and go to state 87


state 63

    (19) Metodo -> OBJECTID ( ) : TYPEID { . error }
    (21) Metodo -> OBJECTID ( ) : TYPEID { . expr }
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    error           shift and go to state 88
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 89

state 64

    (17) Metodo -> OBJECTID ( formales ) : TYPEID . { error }
    (18) Metodo -> OBJECTID ( formales ) : TYPEID . { expr }
    {               shift and go to state 90


state 65

    (41) expr -> OBJECTID ( . )
    (42) expr -> OBJECTID ( . lista_argumentos )
    (59) lista_argumentos -> . expr , lista_argumentos
    (60) lista_argumentos -> . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    )               shift and go to state 91
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    lista_argumentos               shift and go to state 92
    expr                           shift and go to state 93

state 66

    (47) expr -> OBJECTID ASSIGN . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 94

state 67

    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    OBJECTID        shift and go to state 95


state 68

    (43) expr -> expr @ . TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr @ . TYPEID . OBJECTID ( )
    TYPEID          shift and go to state 96


state 69

    (49) expr -> expr = . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 97

state 70

    (50) expr -> expr < . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 98

state 71

    (51) expr -> expr LE . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 99

state 72

    (52) expr -> expr - . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 100

state 73

    (53) expr -> expr + . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 101

state 74

    (54) expr -> expr / . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 102

state 75

    (55) expr -> expr * . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 103

state 76

    (25) expr -> { bloque . }
    (69) bloque -> bloque . error ;
    (70) bloque -> bloque . expr ;
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    }               shift and go to state 104
    error           shift and go to state 105
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 106

state 77

    (30) expr -> { expr . }
    (71) bloque -> expr . ;
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    }               shift and go to state 107
    ;               shift and go to state 108
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 78

    (31) expr -> NEW TYPEID .
    .               reduce using rule 31 (expr -> NEW TYPEID .)
    @               reduce using rule 31 (expr -> NEW TYPEID .)
    =               reduce using rule 31 (expr -> NEW TYPEID .)
    <               reduce using rule 31 (expr -> NEW TYPEID .)
    LE              reduce using rule 31 (expr -> NEW TYPEID .)
    -               reduce using rule 31 (expr -> NEW TYPEID .)
    +               reduce using rule 31 (expr -> NEW TYPEID .)
    /               reduce using rule 31 (expr -> NEW TYPEID .)
    *               reduce using rule 31 (expr -> NEW TYPEID .)
    ;               reduce using rule 31 (expr -> NEW TYPEID .)
    }               reduce using rule 31 (expr -> NEW TYPEID .)
    OF              reduce using rule 31 (expr -> NEW TYPEID .)
    LOOP            reduce using rule 31 (expr -> NEW TYPEID .)
    THEN            reduce using rule 31 (expr -> NEW TYPEID .)
    )               reduce using rule 31 (expr -> NEW TYPEID .)
    ,               reduce using rule 31 (expr -> NEW TYPEID .)
    POOL            reduce using rule 31 (expr -> NEW TYPEID .)
    error           reduce using rule 31 (expr -> NEW TYPEID .)
    ELSE            reduce using rule 31 (expr -> NEW TYPEID .)
    IN              reduce using rule 31 (expr -> NEW TYPEID .)
    FI              reduce using rule 31 (expr -> NEW TYPEID .)


state 79

    (32) expr -> CASE expr . OF cuerpo_case ESAC
    (33) expr -> CASE expr . OF ESAC
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    OF              shift and go to state 109
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 80

    (34) expr -> LET OBJECTID . : TYPEID opcionales lista_inicia IN error
    (35) expr -> LET OBJECTID . : TYPEID opcionales lista_inicia IN expr
    :               shift and go to state 110


state 81

    (36) expr -> WHILE expr . LOOP expr POOL
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    LOOP            shift and go to state 111
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 82

    (37) expr -> IF expr . THEN expr error FI
    (38) expr -> IF expr . THEN expr ELSE expr FI
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    THEN            shift and go to state 112
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 83

    (45) expr -> ( expr . )
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    )               shift and go to state 113
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 84

    (46) expr -> ~ expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    =               reduce using rule 46 (expr -> ~ expr .)
    <               reduce using rule 46 (expr -> ~ expr .)
    LE              reduce using rule 46 (expr -> ~ expr .)
    -               reduce using rule 46 (expr -> ~ expr .)
    +               reduce using rule 46 (expr -> ~ expr .)
    /               reduce using rule 46 (expr -> ~ expr .)
    *               reduce using rule 46 (expr -> ~ expr .)
    ;               reduce using rule 46 (expr -> ~ expr .)
    }               reduce using rule 46 (expr -> ~ expr .)
    OF              reduce using rule 46 (expr -> ~ expr .)
    LOOP            reduce using rule 46 (expr -> ~ expr .)
    THEN            reduce using rule 46 (expr -> ~ expr .)
    )               reduce using rule 46 (expr -> ~ expr .)
    ,               reduce using rule 46 (expr -> ~ expr .)
    POOL            reduce using rule 46 (expr -> ~ expr .)
    error           reduce using rule 46 (expr -> ~ expr .)
    ELSE            reduce using rule 46 (expr -> ~ expr .)
    IN              reduce using rule 46 (expr -> ~ expr .)
    FI              reduce using rule 46 (expr -> ~ expr .)
    .               shift and go to state 67
    @               shift and go to state 68


state 85

    (48) expr -> NOT expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    ;               reduce using rule 48 (expr -> NOT expr .)
    }               reduce using rule 48 (expr -> NOT expr .)
    OF              reduce using rule 48 (expr -> NOT expr .)
    LOOP            reduce using rule 48 (expr -> NOT expr .)
    THEN            reduce using rule 48 (expr -> NOT expr .)
    )               reduce using rule 48 (expr -> NOT expr .)
    ,               reduce using rule 48 (expr -> NOT expr .)
    POOL            reduce using rule 48 (expr -> NOT expr .)
    error           reduce using rule 48 (expr -> NOT expr .)
    ELSE            reduce using rule 48 (expr -> NOT expr .)
    IN              reduce using rule 48 (expr -> NOT expr .)
    FI              reduce using rule 48 (expr -> NOT expr .)
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 86

    (56) expr -> ISVOID expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    =               reduce using rule 56 (expr -> ISVOID expr .)
    <               reduce using rule 56 (expr -> ISVOID expr .)
    LE              reduce using rule 56 (expr -> ISVOID expr .)
    -               reduce using rule 56 (expr -> ISVOID expr .)
    +               reduce using rule 56 (expr -> ISVOID expr .)
    /               reduce using rule 56 (expr -> ISVOID expr .)
    *               reduce using rule 56 (expr -> ISVOID expr .)
    ;               reduce using rule 56 (expr -> ISVOID expr .)
    }               reduce using rule 56 (expr -> ISVOID expr .)
    OF              reduce using rule 56 (expr -> ISVOID expr .)
    LOOP            reduce using rule 56 (expr -> ISVOID expr .)
    THEN            reduce using rule 56 (expr -> ISVOID expr .)
    )               reduce using rule 56 (expr -> ISVOID expr .)
    ,               reduce using rule 56 (expr -> ISVOID expr .)
    POOL            reduce using rule 56 (expr -> ISVOID expr .)
    error           reduce using rule 56 (expr -> ISVOID expr .)
    ELSE            reduce using rule 56 (expr -> ISVOID expr .)
    IN              reduce using rule 56 (expr -> ISVOID expr .)
    FI              reduce using rule 56 (expr -> ISVOID expr .)
    .               shift and go to state 67
    @               shift and go to state 68


state 87

    (16) Metodo -> OBJECTID ( error ) : TYPEID { . expr }
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 114

state 88

    (19) Metodo -> OBJECTID ( ) : TYPEID { error . }
    }               shift and go to state 115


state 89

    (21) Metodo -> OBJECTID ( ) : TYPEID { expr . }
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    }               shift and go to state 116
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 90

    (17) Metodo -> OBJECTID ( formales ) : TYPEID { . error }
    (18) Metodo -> OBJECTID ( formales ) : TYPEID { . expr }
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    error           shift and go to state 117
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 118

state 91

    (41) expr -> OBJECTID ( ) .
    .               reduce using rule 41 (expr -> OBJECTID ( ) .)
    @               reduce using rule 41 (expr -> OBJECTID ( ) .)
    =               reduce using rule 41 (expr -> OBJECTID ( ) .)
    <               reduce using rule 41 (expr -> OBJECTID ( ) .)
    LE              reduce using rule 41 (expr -> OBJECTID ( ) .)
    -               reduce using rule 41 (expr -> OBJECTID ( ) .)
    +               reduce using rule 41 (expr -> OBJECTID ( ) .)
    /               reduce using rule 41 (expr -> OBJECTID ( ) .)
    *               reduce using rule 41 (expr -> OBJECTID ( ) .)
    ;               reduce using rule 41 (expr -> OBJECTID ( ) .)
    }               reduce using rule 41 (expr -> OBJECTID ( ) .)
    OF              reduce using rule 41 (expr -> OBJECTID ( ) .)
    LOOP            reduce using rule 41 (expr -> OBJECTID ( ) .)
    THEN            reduce using rule 41 (expr -> OBJECTID ( ) .)
    )               reduce using rule 41 (expr -> OBJECTID ( ) .)
    ,               reduce using rule 41 (expr -> OBJECTID ( ) .)
    POOL            reduce using rule 41 (expr -> OBJECTID ( ) .)
    error           reduce using rule 41 (expr -> OBJECTID ( ) .)
    ELSE            reduce using rule 41 (expr -> OBJECTID ( ) .)
    IN              reduce using rule 41 (expr -> OBJECTID ( ) .)
    FI              reduce using rule 41 (expr -> OBJECTID ( ) .)


state 92

    (42) expr -> OBJECTID ( lista_argumentos . )
    )               shift and go to state 119


state 93

    (59) lista_argumentos -> expr . , lista_argumentos
    (60) lista_argumentos -> expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    ,               shift and go to state 120
    )               reduce using rule 60 (lista_argumentos -> expr .)
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 94

    (47) expr -> OBJECTID ASSIGN expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    ;               reduce using rule 47 (expr -> OBJECTID ASSIGN expr .)
    }               reduce using rule 47 (expr -> OBJECTID ASSIGN expr .)
    OF              reduce using rule 47 (expr -> OBJECTID ASSIGN expr .)
    LOOP            reduce using rule 47 (expr -> OBJECTID ASSIGN expr .)
    THEN            reduce using rule 47 (expr -> OBJECTID ASSIGN expr .)
    )               reduce using rule 47 (expr -> OBJECTID ASSIGN expr .)
    ,               reduce using rule 47 (expr -> OBJECTID ASSIGN expr .)
    POOL            reduce using rule 47 (expr -> OBJECTID ASSIGN expr .)
    error           reduce using rule 47 (expr -> OBJECTID ASSIGN expr .)
    ELSE            reduce using rule 47 (expr -> OBJECTID ASSIGN expr .)
    IN              reduce using rule 47 (expr -> OBJECTID ASSIGN expr .)
    FI              reduce using rule 47 (expr -> OBJECTID ASSIGN expr .)
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 95

    (39) expr -> expr . OBJECTID . ( lista_argumentos )
    (40) expr -> expr . OBJECTID . ( )
    (               shift and go to state 121


state 96

    (43) expr -> expr @ TYPEID . . OBJECTID ( argumentos )
    (44) expr -> expr @ TYPEID . . OBJECTID ( )
    .               shift and go to state 122


state 97

    (49) expr -> expr = expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    =               reduce using rule 49 (expr -> expr = expr .)
    <               reduce using rule 49 (expr -> expr = expr .)
    LE              reduce using rule 49 (expr -> expr = expr .)
    ;               reduce using rule 49 (expr -> expr = expr .)
    }               reduce using rule 49 (expr -> expr = expr .)
    OF              reduce using rule 49 (expr -> expr = expr .)
    LOOP            reduce using rule 49 (expr -> expr = expr .)
    THEN            reduce using rule 49 (expr -> expr = expr .)
    )               reduce using rule 49 (expr -> expr = expr .)
    ,               reduce using rule 49 (expr -> expr = expr .)
    POOL            reduce using rule 49 (expr -> expr = expr .)
    error           reduce using rule 49 (expr -> expr = expr .)
    ELSE            reduce using rule 49 (expr -> expr = expr .)
    IN              reduce using rule 49 (expr -> expr = expr .)
    FI              reduce using rule 49 (expr -> expr = expr .)
    .               shift and go to state 67
    @               shift and go to state 68
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 98

    (50) expr -> expr < expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    =               reduce using rule 50 (expr -> expr < expr .)
    <               reduce using rule 50 (expr -> expr < expr .)
    LE              reduce using rule 50 (expr -> expr < expr .)
    ;               reduce using rule 50 (expr -> expr < expr .)
    }               reduce using rule 50 (expr -> expr < expr .)
    OF              reduce using rule 50 (expr -> expr < expr .)
    LOOP            reduce using rule 50 (expr -> expr < expr .)
    THEN            reduce using rule 50 (expr -> expr < expr .)
    )               reduce using rule 50 (expr -> expr < expr .)
    ,               reduce using rule 50 (expr -> expr < expr .)
    POOL            reduce using rule 50 (expr -> expr < expr .)
    error           reduce using rule 50 (expr -> expr < expr .)
    ELSE            reduce using rule 50 (expr -> expr < expr .)
    IN              reduce using rule 50 (expr -> expr < expr .)
    FI              reduce using rule 50 (expr -> expr < expr .)
    .               shift and go to state 67
    @               shift and go to state 68
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 99

    (51) expr -> expr LE expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    =               reduce using rule 51 (expr -> expr LE expr .)
    <               reduce using rule 51 (expr -> expr LE expr .)
    LE              reduce using rule 51 (expr -> expr LE expr .)
    ;               reduce using rule 51 (expr -> expr LE expr .)
    }               reduce using rule 51 (expr -> expr LE expr .)
    OF              reduce using rule 51 (expr -> expr LE expr .)
    LOOP            reduce using rule 51 (expr -> expr LE expr .)
    THEN            reduce using rule 51 (expr -> expr LE expr .)
    )               reduce using rule 51 (expr -> expr LE expr .)
    ,               reduce using rule 51 (expr -> expr LE expr .)
    POOL            reduce using rule 51 (expr -> expr LE expr .)
    error           reduce using rule 51 (expr -> expr LE expr .)
    ELSE            reduce using rule 51 (expr -> expr LE expr .)
    IN              reduce using rule 51 (expr -> expr LE expr .)
    FI              reduce using rule 51 (expr -> expr LE expr .)
    .               shift and go to state 67
    @               shift and go to state 68
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 100

    (52) expr -> expr - expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    =               reduce using rule 52 (expr -> expr - expr .)
    <               reduce using rule 52 (expr -> expr - expr .)
    LE              reduce using rule 52 (expr -> expr - expr .)
    -               reduce using rule 52 (expr -> expr - expr .)
    +               reduce using rule 52 (expr -> expr - expr .)
    ;               reduce using rule 52 (expr -> expr - expr .)
    }               reduce using rule 52 (expr -> expr - expr .)
    OF              reduce using rule 52 (expr -> expr - expr .)
    LOOP            reduce using rule 52 (expr -> expr - expr .)
    THEN            reduce using rule 52 (expr -> expr - expr .)
    )               reduce using rule 52 (expr -> expr - expr .)
    ,               reduce using rule 52 (expr -> expr - expr .)
    POOL            reduce using rule 52 (expr -> expr - expr .)
    error           reduce using rule 52 (expr -> expr - expr .)
    ELSE            reduce using rule 52 (expr -> expr - expr .)
    IN              reduce using rule 52 (expr -> expr - expr .)
    FI              reduce using rule 52 (expr -> expr - expr .)
    .               shift and go to state 67
    @               shift and go to state 68
    /               shift and go to state 74
    *               shift and go to state 75


state 101

    (53) expr -> expr + expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    =               reduce using rule 53 (expr -> expr + expr .)
    <               reduce using rule 53 (expr -> expr + expr .)
    LE              reduce using rule 53 (expr -> expr + expr .)
    -               reduce using rule 53 (expr -> expr + expr .)
    +               reduce using rule 53 (expr -> expr + expr .)
    ;               reduce using rule 53 (expr -> expr + expr .)
    }               reduce using rule 53 (expr -> expr + expr .)
    OF              reduce using rule 53 (expr -> expr + expr .)
    LOOP            reduce using rule 53 (expr -> expr + expr .)
    THEN            reduce using rule 53 (expr -> expr + expr .)
    )               reduce using rule 53 (expr -> expr + expr .)
    ,               reduce using rule 53 (expr -> expr + expr .)
    POOL            reduce using rule 53 (expr -> expr + expr .)
    error           reduce using rule 53 (expr -> expr + expr .)
    ELSE            reduce using rule 53 (expr -> expr + expr .)
    IN              reduce using rule 53 (expr -> expr + expr .)
    FI              reduce using rule 53 (expr -> expr + expr .)
    .               shift and go to state 67
    @               shift and go to state 68
    /               shift and go to state 74
    *               shift and go to state 75


state 102

    (54) expr -> expr / expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    =               reduce using rule 54 (expr -> expr / expr .)
    <               reduce using rule 54 (expr -> expr / expr .)
    LE              reduce using rule 54 (expr -> expr / expr .)
    -               reduce using rule 54 (expr -> expr / expr .)
    +               reduce using rule 54 (expr -> expr / expr .)
    /               reduce using rule 54 (expr -> expr / expr .)
    *               reduce using rule 54 (expr -> expr / expr .)
    ;               reduce using rule 54 (expr -> expr / expr .)
    }               reduce using rule 54 (expr -> expr / expr .)
    OF              reduce using rule 54 (expr -> expr / expr .)
    LOOP            reduce using rule 54 (expr -> expr / expr .)
    THEN            reduce using rule 54 (expr -> expr / expr .)
    )               reduce using rule 54 (expr -> expr / expr .)
    ,               reduce using rule 54 (expr -> expr / expr .)
    POOL            reduce using rule 54 (expr -> expr / expr .)
    error           reduce using rule 54 (expr -> expr / expr .)
    ELSE            reduce using rule 54 (expr -> expr / expr .)
    IN              reduce using rule 54 (expr -> expr / expr .)
    FI              reduce using rule 54 (expr -> expr / expr .)
    .               shift and go to state 67
    @               shift and go to state 68


state 103

    (55) expr -> expr * expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    =               reduce using rule 55 (expr -> expr * expr .)
    <               reduce using rule 55 (expr -> expr * expr .)
    LE              reduce using rule 55 (expr -> expr * expr .)
    -               reduce using rule 55 (expr -> expr * expr .)
    +               reduce using rule 55 (expr -> expr * expr .)
    /               reduce using rule 55 (expr -> expr * expr .)
    *               reduce using rule 55 (expr -> expr * expr .)
    ;               reduce using rule 55 (expr -> expr * expr .)
    }               reduce using rule 55 (expr -> expr * expr .)
    OF              reduce using rule 55 (expr -> expr * expr .)
    LOOP            reduce using rule 55 (expr -> expr * expr .)
    THEN            reduce using rule 55 (expr -> expr * expr .)
    )               reduce using rule 55 (expr -> expr * expr .)
    ,               reduce using rule 55 (expr -> expr * expr .)
    POOL            reduce using rule 55 (expr -> expr * expr .)
    error           reduce using rule 55 (expr -> expr * expr .)
    ELSE            reduce using rule 55 (expr -> expr * expr .)
    IN              reduce using rule 55 (expr -> expr * expr .)
    FI              reduce using rule 55 (expr -> expr * expr .)
    .               shift and go to state 67
    @               shift and go to state 68


state 104

    (25) expr -> { bloque } .
    .               reduce using rule 25 (expr -> { bloque } .)
    @               reduce using rule 25 (expr -> { bloque } .)
    =               reduce using rule 25 (expr -> { bloque } .)
    <               reduce using rule 25 (expr -> { bloque } .)
    LE              reduce using rule 25 (expr -> { bloque } .)
    -               reduce using rule 25 (expr -> { bloque } .)
    +               reduce using rule 25 (expr -> { bloque } .)
    /               reduce using rule 25 (expr -> { bloque } .)
    *               reduce using rule 25 (expr -> { bloque } .)
    ;               reduce using rule 25 (expr -> { bloque } .)
    }               reduce using rule 25 (expr -> { bloque } .)
    OF              reduce using rule 25 (expr -> { bloque } .)
    LOOP            reduce using rule 25 (expr -> { bloque } .)
    THEN            reduce using rule 25 (expr -> { bloque } .)
    )               reduce using rule 25 (expr -> { bloque } .)
    ,               reduce using rule 25 (expr -> { bloque } .)
    POOL            reduce using rule 25 (expr -> { bloque } .)
    error           reduce using rule 25 (expr -> { bloque } .)
    ELSE            reduce using rule 25 (expr -> { bloque } .)
    IN              reduce using rule 25 (expr -> { bloque } .)
    FI              reduce using rule 25 (expr -> { bloque } .)


state 105

    (69) bloque -> bloque error . ;
    ;               shift and go to state 123


state 106

    (70) bloque -> bloque expr . ;
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    ;               shift and go to state 124
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 107

    (30) expr -> { expr } .
    .               reduce using rule 30 (expr -> { expr } .)
    @               reduce using rule 30 (expr -> { expr } .)
    =               reduce using rule 30 (expr -> { expr } .)
    <               reduce using rule 30 (expr -> { expr } .)
    LE              reduce using rule 30 (expr -> { expr } .)
    -               reduce using rule 30 (expr -> { expr } .)
    +               reduce using rule 30 (expr -> { expr } .)
    /               reduce using rule 30 (expr -> { expr } .)
    *               reduce using rule 30 (expr -> { expr } .)
    ;               reduce using rule 30 (expr -> { expr } .)
    }               reduce using rule 30 (expr -> { expr } .)
    OF              reduce using rule 30 (expr -> { expr } .)
    LOOP            reduce using rule 30 (expr -> { expr } .)
    THEN            reduce using rule 30 (expr -> { expr } .)
    )               reduce using rule 30 (expr -> { expr } .)
    ,               reduce using rule 30 (expr -> { expr } .)
    POOL            reduce using rule 30 (expr -> { expr } .)
    error           reduce using rule 30 (expr -> { expr } .)
    ELSE            reduce using rule 30 (expr -> { expr } .)
    IN              reduce using rule 30 (expr -> { expr } .)
    FI              reduce using rule 30 (expr -> { expr } .)


state 108

    (71) bloque -> expr ; .
    }               reduce using rule 71 (bloque -> expr ; .)
    error           reduce using rule 71 (bloque -> expr ; .)
    {               reduce using rule 71 (bloque -> expr ; .)
    BOOL_CONST      reduce using rule 71 (bloque -> expr ; .)
    STR_CONST       reduce using rule 71 (bloque -> expr ; .)
    INT_CONST       reduce using rule 71 (bloque -> expr ; .)
    OBJECTID        reduce using rule 71 (bloque -> expr ; .)
    NEW             reduce using rule 71 (bloque -> expr ; .)
    CASE            reduce using rule 71 (bloque -> expr ; .)
    LET             reduce using rule 71 (bloque -> expr ; .)
    WHILE           reduce using rule 71 (bloque -> expr ; .)
    IF              reduce using rule 71 (bloque -> expr ; .)
    (               reduce using rule 71 (bloque -> expr ; .)
    ~               reduce using rule 71 (bloque -> expr ; .)
    NOT             reduce using rule 71 (bloque -> expr ; .)
    ISVOID          reduce using rule 71 (bloque -> expr ; .)


state 109

    (32) expr -> CASE expr OF . cuerpo_case ESAC
    (33) expr -> CASE expr OF . ESAC
    (66) cuerpo_case -> . cuerpo_case OBJECTID : TYPEID DARROW error ;
    (67) cuerpo_case -> . cuerpo_case OBJECTID : TYPEID DARROW expr ;
    (68) cuerpo_case -> . OBJECTID : TYPEID DARROW expr ;
    ESAC            shift and go to state 126
    OBJECTID        shift and go to state 127

    cuerpo_case                    shift and go to state 125

state 110

    (34) expr -> LET OBJECTID : . TYPEID opcionales lista_inicia IN error
    (35) expr -> LET OBJECTID : . TYPEID opcionales lista_inicia IN expr
    TYPEID          shift and go to state 128


state 111

    (36) expr -> WHILE expr LOOP . expr POOL
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 129

state 112

    (37) expr -> IF expr THEN . expr error FI
    (38) expr -> IF expr THEN . expr ELSE expr FI
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 130

state 113

    (45) expr -> ( expr ) .
    .               reduce using rule 45 (expr -> ( expr ) .)
    @               reduce using rule 45 (expr -> ( expr ) .)
    =               reduce using rule 45 (expr -> ( expr ) .)
    <               reduce using rule 45 (expr -> ( expr ) .)
    LE              reduce using rule 45 (expr -> ( expr ) .)
    -               reduce using rule 45 (expr -> ( expr ) .)
    +               reduce using rule 45 (expr -> ( expr ) .)
    /               reduce using rule 45 (expr -> ( expr ) .)
    *               reduce using rule 45 (expr -> ( expr ) .)
    ;               reduce using rule 45 (expr -> ( expr ) .)
    }               reduce using rule 45 (expr -> ( expr ) .)
    OF              reduce using rule 45 (expr -> ( expr ) .)
    LOOP            reduce using rule 45 (expr -> ( expr ) .)
    THEN            reduce using rule 45 (expr -> ( expr ) .)
    )               reduce using rule 45 (expr -> ( expr ) .)
    ,               reduce using rule 45 (expr -> ( expr ) .)
    POOL            reduce using rule 45 (expr -> ( expr ) .)
    error           reduce using rule 45 (expr -> ( expr ) .)
    ELSE            reduce using rule 45 (expr -> ( expr ) .)
    IN              reduce using rule 45 (expr -> ( expr ) .)
    FI              reduce using rule 45 (expr -> ( expr ) .)


state 114

    (16) Metodo -> OBJECTID ( error ) : TYPEID { expr . }
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    }               shift and go to state 131
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 115

    (19) Metodo -> OBJECTID ( ) : TYPEID { error } .
    ;               reduce using rule 19 (Metodo -> OBJECTID ( ) : TYPEID { error } .)


state 116

    (21) Metodo -> OBJECTID ( ) : TYPEID { expr } .
    ;               reduce using rule 21 (Metodo -> OBJECTID ( ) : TYPEID { expr } .)


state 117

    (17) Metodo -> OBJECTID ( formales ) : TYPEID { error . }
    }               shift and go to state 132


state 118

    (18) Metodo -> OBJECTID ( formales ) : TYPEID { expr . }
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    }               shift and go to state 133
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 119

    (42) expr -> OBJECTID ( lista_argumentos ) .
    .               reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    @               reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    =               reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    <               reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    LE              reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    -               reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    +               reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    /               reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    *               reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    ;               reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    }               reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    OF              reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    LOOP            reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    THEN            reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    )               reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    ,               reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    POOL            reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    error           reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    ELSE            reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    IN              reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)
    FI              reduce using rule 42 (expr -> OBJECTID ( lista_argumentos ) .)


state 120

    (59) lista_argumentos -> expr , . lista_argumentos
    (59) lista_argumentos -> . expr , lista_argumentos
    (60) lista_argumentos -> . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 93
    lista_argumentos               shift and go to state 134

state 121

    (39) expr -> expr . OBJECTID ( . lista_argumentos )
    (40) expr -> expr . OBJECTID ( . )
    (59) lista_argumentos -> . expr , lista_argumentos
    (60) lista_argumentos -> . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    )               shift and go to state 136
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 93
    lista_argumentos               shift and go to state 135

state 122

    (43) expr -> expr @ TYPEID . . OBJECTID ( argumentos )
    (44) expr -> expr @ TYPEID . . OBJECTID ( )
    OBJECTID        shift and go to state 137


state 123

    (69) bloque -> bloque error ; .
    }               reduce using rule 69 (bloque -> bloque error ; .)
    error           reduce using rule 69 (bloque -> bloque error ; .)
    {               reduce using rule 69 (bloque -> bloque error ; .)
    BOOL_CONST      reduce using rule 69 (bloque -> bloque error ; .)
    STR_CONST       reduce using rule 69 (bloque -> bloque error ; .)
    INT_CONST       reduce using rule 69 (bloque -> bloque error ; .)
    OBJECTID        reduce using rule 69 (bloque -> bloque error ; .)
    NEW             reduce using rule 69 (bloque -> bloque error ; .)
    CASE            reduce using rule 69 (bloque -> bloque error ; .)
    LET             reduce using rule 69 (bloque -> bloque error ; .)
    WHILE           reduce using rule 69 (bloque -> bloque error ; .)
    IF              reduce using rule 69 (bloque -> bloque error ; .)
    (               reduce using rule 69 (bloque -> bloque error ; .)
    ~               reduce using rule 69 (bloque -> bloque error ; .)
    NOT             reduce using rule 69 (bloque -> bloque error ; .)
    ISVOID          reduce using rule 69 (bloque -> bloque error ; .)


state 124

    (70) bloque -> bloque expr ; .
    }               reduce using rule 70 (bloque -> bloque expr ; .)
    error           reduce using rule 70 (bloque -> bloque expr ; .)
    {               reduce using rule 70 (bloque -> bloque expr ; .)
    BOOL_CONST      reduce using rule 70 (bloque -> bloque expr ; .)
    STR_CONST       reduce using rule 70 (bloque -> bloque expr ; .)
    INT_CONST       reduce using rule 70 (bloque -> bloque expr ; .)
    OBJECTID        reduce using rule 70 (bloque -> bloque expr ; .)
    NEW             reduce using rule 70 (bloque -> bloque expr ; .)
    CASE            reduce using rule 70 (bloque -> bloque expr ; .)
    LET             reduce using rule 70 (bloque -> bloque expr ; .)
    WHILE           reduce using rule 70 (bloque -> bloque expr ; .)
    IF              reduce using rule 70 (bloque -> bloque expr ; .)
    (               reduce using rule 70 (bloque -> bloque expr ; .)
    ~               reduce using rule 70 (bloque -> bloque expr ; .)
    NOT             reduce using rule 70 (bloque -> bloque expr ; .)
    ISVOID          reduce using rule 70 (bloque -> bloque expr ; .)


state 125

    (32) expr -> CASE expr OF cuerpo_case . ESAC
    (66) cuerpo_case -> cuerpo_case . OBJECTID : TYPEID DARROW error ;
    (67) cuerpo_case -> cuerpo_case . OBJECTID : TYPEID DARROW expr ;
    ESAC            shift and go to state 138
    OBJECTID        shift and go to state 139


state 126

    (33) expr -> CASE expr OF ESAC .
    .               reduce using rule 33 (expr -> CASE expr OF ESAC .)
    @               reduce using rule 33 (expr -> CASE expr OF ESAC .)
    =               reduce using rule 33 (expr -> CASE expr OF ESAC .)
    <               reduce using rule 33 (expr -> CASE expr OF ESAC .)
    LE              reduce using rule 33 (expr -> CASE expr OF ESAC .)
    -               reduce using rule 33 (expr -> CASE expr OF ESAC .)
    +               reduce using rule 33 (expr -> CASE expr OF ESAC .)
    /               reduce using rule 33 (expr -> CASE expr OF ESAC .)
    *               reduce using rule 33 (expr -> CASE expr OF ESAC .)
    ;               reduce using rule 33 (expr -> CASE expr OF ESAC .)
    }               reduce using rule 33 (expr -> CASE expr OF ESAC .)
    OF              reduce using rule 33 (expr -> CASE expr OF ESAC .)
    LOOP            reduce using rule 33 (expr -> CASE expr OF ESAC .)
    THEN            reduce using rule 33 (expr -> CASE expr OF ESAC .)
    )               reduce using rule 33 (expr -> CASE expr OF ESAC .)
    ,               reduce using rule 33 (expr -> CASE expr OF ESAC .)
    POOL            reduce using rule 33 (expr -> CASE expr OF ESAC .)
    error           reduce using rule 33 (expr -> CASE expr OF ESAC .)
    ELSE            reduce using rule 33 (expr -> CASE expr OF ESAC .)
    IN              reduce using rule 33 (expr -> CASE expr OF ESAC .)
    FI              reduce using rule 33 (expr -> CASE expr OF ESAC .)


state 127

    (68) cuerpo_case -> OBJECTID . : TYPEID DARROW expr ;
    :               shift and go to state 140


state 128

    (34) expr -> LET OBJECTID : TYPEID . opcionales lista_inicia IN error
    (35) expr -> LET OBJECTID : TYPEID . opcionales lista_inicia IN expr
    (63) opcionales -> .
    (64) opcionales -> . ASSIGN error
    (65) opcionales -> . ASSIGN expr
    IN              reduce using rule 63 (opcionales -> .)
    ,               reduce using rule 63 (opcionales -> .)
    ASSIGN          shift and go to state 142

    opcionales                     shift and go to state 141

state 129

    (36) expr -> WHILE expr LOOP expr . POOL
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    POOL            shift and go to state 143
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 130

    (37) expr -> IF expr THEN expr . error FI
    (38) expr -> IF expr THEN expr . ELSE expr FI
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    error           shift and go to state 144
    ELSE            shift and go to state 145
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 131

    (16) Metodo -> OBJECTID ( error ) : TYPEID { expr } .
    ;               reduce using rule 16 (Metodo -> OBJECTID ( error ) : TYPEID { expr } .)


state 132

    (17) Metodo -> OBJECTID ( formales ) : TYPEID { error } .
    ;               reduce using rule 17 (Metodo -> OBJECTID ( formales ) : TYPEID { error } .)


state 133

    (18) Metodo -> OBJECTID ( formales ) : TYPEID { expr } .
    ;               reduce using rule 18 (Metodo -> OBJECTID ( formales ) : TYPEID { expr } .)


state 134

    (59) lista_argumentos -> expr , lista_argumentos .
    )               reduce using rule 59 (lista_argumentos -> expr , lista_argumentos .)


state 135

    (39) expr -> expr . OBJECTID ( lista_argumentos . )
    )               shift and go to state 146


state 136

    (40) expr -> expr . OBJECTID ( ) .
    .               reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    @               reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    =               reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    <               reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    LE              reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    -               reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    +               reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    /               reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    *               reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    ;               reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    }               reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    OF              reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    LOOP            reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    THEN            reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    )               reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    ,               reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    POOL            reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    error           reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    ELSE            reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    IN              reduce using rule 40 (expr -> expr . OBJECTID ( ) .)
    FI              reduce using rule 40 (expr -> expr . OBJECTID ( ) .)


state 137

    (43) expr -> expr @ TYPEID . OBJECTID . ( argumentos )
    (44) expr -> expr @ TYPEID . OBJECTID . ( )
    (               shift and go to state 147


state 138

    (32) expr -> CASE expr OF cuerpo_case ESAC .
    .               reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    @               reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    =               reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    <               reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    LE              reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    -               reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    +               reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    /               reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    *               reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    ;               reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    }               reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    OF              reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    LOOP            reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    THEN            reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    )               reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    ,               reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    POOL            reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    error           reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    ELSE            reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    IN              reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)
    FI              reduce using rule 32 (expr -> CASE expr OF cuerpo_case ESAC .)


state 139

    (66) cuerpo_case -> cuerpo_case OBJECTID . : TYPEID DARROW error ;
    (67) cuerpo_case -> cuerpo_case OBJECTID . : TYPEID DARROW expr ;
    :               shift and go to state 148


state 140

    (68) cuerpo_case -> OBJECTID : . TYPEID DARROW expr ;
    TYPEID          shift and go to state 149


state 141

    (34) expr -> LET OBJECTID : TYPEID opcionales . lista_inicia IN error
    (35) expr -> LET OBJECTID : TYPEID opcionales . lista_inicia IN expr
    (61) lista_inicia -> . lista_inicia , OBJECTID : TYPEID opcionales
    (62) lista_inicia -> .
    IN              reduce using rule 62 (lista_inicia -> .)
    ,               reduce using rule 62 (lista_inicia -> .)

    lista_inicia                   shift and go to state 150

state 142

    (64) opcionales -> ASSIGN . error
    (65) opcionales -> ASSIGN . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    error           shift and go to state 151
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 152

state 143

    (36) expr -> WHILE expr LOOP expr POOL .
    .               reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    @               reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    =               reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    <               reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    LE              reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    -               reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    +               reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    /               reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    *               reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    ;               reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    }               reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    OF              reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    LOOP            reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    THEN            reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    )               reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    ,               reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    POOL            reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    error           reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    ELSE            reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    IN              reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)
    FI              reduce using rule 36 (expr -> WHILE expr LOOP expr POOL .)


state 144

    (37) expr -> IF expr THEN expr error . FI
    FI              shift and go to state 153


state 145

    (38) expr -> IF expr THEN expr ELSE . expr FI
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 154

state 146

    (39) expr -> expr . OBJECTID ( lista_argumentos ) .
    .               reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    @               reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    =               reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    <               reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    LE              reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    -               reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    +               reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    /               reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    *               reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    ;               reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    }               reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    OF              reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    LOOP            reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    THEN            reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    )               reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    ,               reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    POOL            reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    error           reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    ELSE            reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    IN              reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    FI              reduce using rule 39 (expr -> expr . OBJECTID ( lista_argumentos ) .)


state 147

    (43) expr -> expr @ TYPEID . OBJECTID ( . argumentos )
    (44) expr -> expr @ TYPEID . OBJECTID ( . )
    (57) argumentos -> . expr , argumentos
    (58) argumentos -> . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    )               shift and go to state 157
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 155
    argumentos                     shift and go to state 156

state 148

    (66) cuerpo_case -> cuerpo_case OBJECTID : . TYPEID DARROW error ;
    (67) cuerpo_case -> cuerpo_case OBJECTID : . TYPEID DARROW expr ;
    TYPEID          shift and go to state 158


state 149

    (68) cuerpo_case -> OBJECTID : TYPEID . DARROW expr ;
    DARROW          shift and go to state 159


state 150

    (34) expr -> LET OBJECTID : TYPEID opcionales lista_inicia . IN error
    (35) expr -> LET OBJECTID : TYPEID opcionales lista_inicia . IN expr
    (61) lista_inicia -> lista_inicia . , OBJECTID : TYPEID opcionales
    IN              shift and go to state 160
    ,               shift and go to state 161


state 151

    (64) opcionales -> ASSIGN error .
    IN              reduce using rule 64 (opcionales -> ASSIGN error .)
    ,               reduce using rule 64 (opcionales -> ASSIGN error .)


state 152

    (65) opcionales -> ASSIGN expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    IN              reduce using rule 65 (opcionales -> ASSIGN expr .)
    ,               reduce using rule 65 (opcionales -> ASSIGN expr .)
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 153

    (37) expr -> IF expr THEN expr error FI .
    .               reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    @               reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    =               reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    <               reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    LE              reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    -               reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    +               reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    /               reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    *               reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    ;               reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    }               reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    OF              reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    LOOP            reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    THEN            reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    )               reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    ,               reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    POOL            reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    error           reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    ELSE            reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    IN              reduce using rule 37 (expr -> IF expr THEN expr error FI .)
    FI              reduce using rule 37 (expr -> IF expr THEN expr error FI .)


state 154

    (38) expr -> IF expr THEN expr ELSE expr . FI
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    FI              shift and go to state 162
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 155

    (57) argumentos -> expr . , argumentos
    (58) argumentos -> expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    ,               shift and go to state 163
    )               reduce using rule 58 (argumentos -> expr .)
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 156

    (43) expr -> expr @ TYPEID . OBJECTID ( argumentos . )
    )               shift and go to state 164


state 157

    (44) expr -> expr @ TYPEID . OBJECTID ( ) .
    .               reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    @               reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    =               reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    <               reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LE              reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    -               reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    +               reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    /               reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    *               reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ;               reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    }               reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    OF              reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LOOP            reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    THEN            reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    )               reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ,               reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    POOL            reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    error           reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ELSE            reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    IN              reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    FI              reduce using rule 44 (expr -> expr @ TYPEID . OBJECTID ( ) .)


state 158

    (66) cuerpo_case -> cuerpo_case OBJECTID : TYPEID . DARROW error ;
    (67) cuerpo_case -> cuerpo_case OBJECTID : TYPEID . DARROW expr ;
    DARROW          shift and go to state 165


state 159

    (68) cuerpo_case -> OBJECTID : TYPEID DARROW . expr ;
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 166

state 160

    (34) expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN . error
    (35) expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    error           shift and go to state 167
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 168

state 161

    (61) lista_inicia -> lista_inicia , . OBJECTID : TYPEID opcionales
    OBJECTID        shift and go to state 169


state 162

    (38) expr -> IF expr THEN expr ELSE expr FI .
    .               reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    @               reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    =               reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    <               reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    LE              reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    -               reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    +               reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    /               reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    *               reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    ;               reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    }               reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    OF              reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    LOOP            reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    THEN            reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    )               reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    ,               reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    POOL            reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    error           reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    ELSE            reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    IN              reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)
    FI              reduce using rule 38 (expr -> IF expr THEN expr ELSE expr FI .)


state 163

    (57) argumentos -> expr , . argumentos
    (57) argumentos -> . expr , argumentos
    (58) argumentos -> . expr
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 155
    argumentos                     shift and go to state 170

state 164

    (43) expr -> expr @ TYPEID . OBJECTID ( argumentos ) .
    .               reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    @               reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    =               reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    <               reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    LE              reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    -               reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    +               reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    /               reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    *               reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    ;               reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    }               reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    OF              reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    LOOP            reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    THEN            reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    )               reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    ,               reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    POOL            reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    error           reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    ELSE            reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    IN              reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    FI              reduce using rule 43 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)


state 165

    (66) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW . error ;
    (67) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW . expr ;
    (25) expr -> . { bloque }
    (26) expr -> . BOOL_CONST
    (27) expr -> . STR_CONST
    (28) expr -> . INT_CONST
    (29) expr -> . OBJECTID
    (30) expr -> . { expr }
    (31) expr -> . NEW TYPEID
    (32) expr -> . CASE expr OF cuerpo_case ESAC
    (33) expr -> . CASE expr OF ESAC
    (34) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN error
    (35) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (36) expr -> . WHILE expr LOOP expr POOL
    (37) expr -> . IF expr THEN expr error FI
    (38) expr -> . IF expr THEN expr ELSE expr FI
    (39) expr -> . expr . OBJECTID ( lista_argumentos )
    (40) expr -> . expr . OBJECTID ( )
    (41) expr -> . OBJECTID ( )
    (42) expr -> . OBJECTID ( lista_argumentos )
    (43) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> . expr @ TYPEID . OBJECTID ( )
    (45) expr -> . ( expr )
    (46) expr -> . ~ expr
    (47) expr -> . OBJECTID ASSIGN expr
    (48) expr -> . NOT expr
    (49) expr -> . expr = expr
    (50) expr -> . expr < expr
    (51) expr -> . expr LE expr
    (52) expr -> . expr - expr
    (53) expr -> . expr + expr
    (54) expr -> . expr / expr
    (55) expr -> . expr * expr
    (56) expr -> . ISVOID expr
    error           shift and go to state 171
    {               shift and go to state 49
    BOOL_CONST      shift and go to state 50
    STR_CONST       shift and go to state 51
    INT_CONST       shift and go to state 52
    OBJECTID        shift and go to state 47
    NEW             shift and go to state 53
    CASE            shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    (               shift and go to state 58
    ~               shift and go to state 59
    NOT             shift and go to state 60
    ISVOID          shift and go to state 61

    expr                           shift and go to state 172

state 166

    (68) cuerpo_case -> OBJECTID : TYPEID DARROW expr . ;
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    ;               shift and go to state 173
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 167

    (34) expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .
    .               reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    @               reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    =               reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    <               reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    LE              reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    -               reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    +               reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    /               reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    *               reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    ;               reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    }               reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    OF              reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    LOOP            reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    THEN            reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    )               reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    ,               reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    POOL            reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    error           reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    ELSE            reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    IN              reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)
    FI              reduce using rule 34 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN error .)


state 168

    (35) expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
    ;               reduce using rule 35 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    }               reduce using rule 35 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    OF              reduce using rule 35 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    LOOP            reduce using rule 35 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    THEN            reduce using rule 35 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    )               reduce using rule 35 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    ,               reduce using rule 35 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    POOL            reduce using rule 35 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    error           reduce using rule 35 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    ELSE            reduce using rule 35 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    IN              reduce using rule 35 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    FI              reduce using rule 35 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 169

    (61) lista_inicia -> lista_inicia , OBJECTID . : TYPEID opcionales
    :               shift and go to state 174


state 170

    (57) argumentos -> expr , argumentos .
    )               reduce using rule 57 (argumentos -> expr , argumentos .)


state 171

    (66) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW error . ;
    ;               shift and go to state 175


state 172

    (67) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr . ;
    (39) expr -> expr . . OBJECTID ( lista_argumentos )
    (40) expr -> expr . . OBJECTID ( )
    (43) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (44) expr -> expr . @ TYPEID . OBJECTID ( )
    (49) expr -> expr . = expr
    (50) expr -> expr . < expr
    (51) expr -> expr . LE expr
    (52) expr -> expr . - expr
    (53) expr -> expr . + expr
    (54) expr -> expr . / expr
    (55) expr -> expr . * expr
    ;               shift and go to state 176
    .               shift and go to state 67
    @               shift and go to state 68
    =               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    /               shift and go to state 74
    *               shift and go to state 75


state 173

    (68) cuerpo_case -> OBJECTID : TYPEID DARROW expr ; .
    ESAC            reduce using rule 68 (cuerpo_case -> OBJECTID : TYPEID DARROW expr ; .)
    OBJECTID        reduce using rule 68 (cuerpo_case -> OBJECTID : TYPEID DARROW expr ; .)


state 174

    (61) lista_inicia -> lista_inicia , OBJECTID : . TYPEID opcionales
    TYPEID          shift and go to state 177


state 175

    (66) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW error ; .
    ESAC            reduce using rule 66 (cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW error ; .)
    OBJECTID        reduce using rule 66 (cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW error ; .)


state 176

    (67) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ; .
    ESAC            reduce using rule 67 (cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ; .)
    OBJECTID        reduce using rule 67 (cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ; .)


state 177

    (61) lista_inicia -> lista_inicia , OBJECTID : TYPEID . opcionales
    (63) opcionales -> .
    (64) opcionales -> . ASSIGN error
    (65) opcionales -> . ASSIGN expr
    IN              reduce using rule 63 (opcionales -> .)
    ,               reduce using rule 63 (opcionales -> .)
    ASSIGN          shift and go to state 142

    opcionales                     shift and go to state 178

state 178

    (61) lista_inicia -> lista_inicia , OBJECTID : TYPEID opcionales .
    IN              reduce using rule 61 (lista_inicia -> lista_inicia , OBJECTID : TYPEID opcionales .)
    ,               reduce using rule 61 (lista_inicia -> lista_inicia , OBJECTID : TYPEID opcionales .)


Conflicts:

shift/reduce conflict for } in state 10 resolved as shift
shift/reduce conflict for } in state 14 resolved as shift
shift/reduce conflict for . in state 168 resolved as shift
shift/reduce conflict for @ in state 168 resolved as shift
shift/reduce conflict for = in state 168 resolved as shift
shift/reduce conflict for < in state 168 resolved as shift
shift/reduce conflict for LE in state 168 resolved as shift
shift/reduce conflict for - in state 168 resolved as shift
shift/reduce conflict for + in state 168 resolved as shift
shift/reduce conflict for / in state 168 resolved as shift
shift/reduce conflict for * in state 168 resolved as shift