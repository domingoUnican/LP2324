Grammar:

Rule 0     S' -> Programa
Rule 1     Programa -> Clase
Rule 2     Clase -> CLASS TYPEID INHERITSTYPEID { cuerpo_clase }
Rule 3     Clase -> CLASS TYPEID INHERITSTYPEID { }
Rule 4     INHERITSTYPEID -> INHERITS TYPEID
Rule 5     cuerpo_clase -> cuerpo_clase caracteristica ;
Rule 6     cuerpo_clase -> <empty>
Rule 7     caracteristica -> Metodo ;
Rule 8     caracteristica -> Atributo ;
Rule 9     Atributo -> OBJECTID : TYPEID ASSIGN expr  [precedence=right, level=1]
Rule 10    Atributo -> OBJECTID : TYPEID
Rule 11    Metodo -> OBJECTID ( formal ) : TYPEID { expr }
Rule 12    Metodo -> OBJECTID ( ) : TYPEID { expr }
Rule 13    formal -> OBJECTID : TYPEID
Rule 14    formal -> <empty>
Rule 15    expr -> BOOL_CONST
Rule 16    expr -> STR_CONST
Rule 17    expr -> INT_CONST
Rule 18    expr -> OBJECTID
Rule 19    expr -> { expr }
Rule 20    expr -> NEW TYPEID
Rule 21    expr -> CASE expr OF { cuerpo_case } ESAC
Rule 22    expr -> CASE expr OF { } ESAC
Rule 23    expr -> LET OBJECTID : TYPEID lista_inicia IN expr
Rule 24    expr -> WHILE expr LOOP expr POOL
Rule 25    expr -> IF expr THEN expr ELSE expr FI
Rule 26    expr -> OBJECTID ( )
Rule 27    expr -> OBJECTID ( expr )
Rule 28    expr -> @ TYPEID . OBJECTID ( expr )
Rule 29    expr -> @ TYPEID . OBJECTID ( )
Rule 30    expr -> ( expr )
Rule 31    expr -> ~ expr
Rule 32    expr -> ISVOID expr  [precedence=left, level=5]
Rule 33    expr -> NOT expr  [precedence=left, level=2]
Rule 34    expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
Rule 35    expr -> OBJECTID ASSIGN expr  [precedence=right, level=1]
Rule 36    lista_inicia -> OBJECTID : TYPEID
Rule 37    cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ;
Rule 38    cuerpo_case -> <empty>

Unused terminals:

    COMMENT_BLOQUE
    NUMBER
    ERROR
    COMMENT_1LINEA

Terminals, with rules where they appear:

(                    : 11 12 26 27 28 29 30
)                    : 11 12 26 27 28 29 30
*                    : 34
+                    : 34
,                    : 34 34 34 34 34 34
-                    : 34
.                    : 28 29
/                    : 34
:                    : 9 10 11 12 13 23 36 37
;                    : 5 7 8 37
<                    : 34
=                    : 34
@                    : 28 29
ASSIGN               : 9 35
BOOL_CONST           : 15
CASE                 : 21 22
CLASS                : 2 3
COMMENT_1LINEA       : 
COMMENT_BLOQUE       : 
DARROW               : 37
ELSE                 : 25
ERROR                : 
ESAC                 : 21 22
FI                   : 25
IF                   : 25
IN                   : 23
INHERITS             : 4
INT_CONST            : 17
ISVOID               : 32
LE                   : 34
LET                  : 23
LOOP                 : 24
NEW                  : 20
NOT                  : 33
NUMBER               : 
OBJECTID             : 9 10 11 12 13 18 23 26 27 28 29 35 36 37
OF                   : 21 22
POOL                 : 24
STR_CONST            : 16
THEN                 : 25
TYPEID               : 2 3 4 9 10 11 12 13 20 23 28 29 36 37
WHILE                : 24
error                : 
{                    : 2 3 11 12 19 21 22
}                    : 2 3 11 12 19 21 22
~                    : 31

Nonterminals, with rules where they appear:

Atributo             : 8
Clase                : 1
INHERITSTYPEID       : 2 3
Metodo               : 7
Programa             : 0
caracteristica       : 5
cuerpo_case          : 21 37
cuerpo_clase         : 2 5
expr                 : 9 11 12 19 21 22 23 24 24 25 25 25 27 28 30 31 32 33 34 34 34 34 34 34 34 34 34 34 34 34 34 34 35 37
formal               : 11
lista_inicia         : 23


state 0

    (0) S' -> . Programa
    (1) Programa -> . Clase
    (2) Clase -> . CLASS TYPEID INHERITSTYPEID { cuerpo_clase }
    (3) Clase -> . CLASS TYPEID INHERITSTYPEID { }
    CLASS           shift and go to state 3

    Programa                       shift and go to state 1
    Clase                          shift and go to state 2

state 1

    (0) S' -> Programa .


state 2

    (1) Programa -> Clase .
    $end            reduce using rule 1 (Programa -> Clase .)


state 3

    (2) Clase -> CLASS . TYPEID INHERITSTYPEID { cuerpo_clase }
    (3) Clase -> CLASS . TYPEID INHERITSTYPEID { }
    TYPEID          shift and go to state 4


state 4

    (2) Clase -> CLASS TYPEID . INHERITSTYPEID { cuerpo_clase }
    (3) Clase -> CLASS TYPEID . INHERITSTYPEID { }
    (4) INHERITSTYPEID -> . INHERITS TYPEID
    INHERITS        shift and go to state 6

    INHERITSTYPEID                 shift and go to state 5

state 5

    (2) Clase -> CLASS TYPEID INHERITSTYPEID . { cuerpo_clase }
    (3) Clase -> CLASS TYPEID INHERITSTYPEID . { }
    {               shift and go to state 7


state 6

    (4) INHERITSTYPEID -> INHERITS . TYPEID
    TYPEID          shift and go to state 8


state 7

    (2) Clase -> CLASS TYPEID INHERITSTYPEID { . cuerpo_clase }
    (3) Clase -> CLASS TYPEID INHERITSTYPEID { . }
    (5) cuerpo_clase -> . cuerpo_clase caracteristica ;
    (6) cuerpo_clase -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 10
    OBJECTID        reduce using rule 6 (cuerpo_clase -> .)

    cuerpo_clase                   shift and go to state 9

state 8

    (4) INHERITSTYPEID -> INHERITS TYPEID .
    {               reduce using rule 4 (INHERITSTYPEID -> INHERITS TYPEID .)


state 9

    (2) Clase -> CLASS TYPEID INHERITSTYPEID { cuerpo_clase . }
    (5) cuerpo_clase -> cuerpo_clase . caracteristica ;
    (7) caracteristica -> . Metodo ;
    (8) caracteristica -> . Atributo ;
    (11) Metodo -> . OBJECTID ( formal ) : TYPEID { expr }
    (12) Metodo -> . OBJECTID ( ) : TYPEID { expr }
    (9) Atributo -> . OBJECTID : TYPEID ASSIGN expr
    (10) Atributo -> . OBJECTID : TYPEID
    }               shift and go to state 11
    OBJECTID        shift and go to state 15

    caracteristica                 shift and go to state 12
    Metodo                         shift and go to state 13
    Atributo                       shift and go to state 14

state 10

    (3) Clase -> CLASS TYPEID INHERITSTYPEID { } .
    $end            reduce using rule 3 (Clase -> CLASS TYPEID INHERITSTYPEID { } .)


state 11

    (2) Clase -> CLASS TYPEID INHERITSTYPEID { cuerpo_clase } .
    $end            reduce using rule 2 (Clase -> CLASS TYPEID INHERITSTYPEID { cuerpo_clase } .)


state 12

    (5) cuerpo_clase -> cuerpo_clase caracteristica . ;
    ;               shift and go to state 16


state 13

    (7) caracteristica -> Metodo . ;
    ;               shift and go to state 17


state 14

    (8) caracteristica -> Atributo . ;
    ;               shift and go to state 18


state 15

    (11) Metodo -> OBJECTID . ( formal ) : TYPEID { expr }
    (12) Metodo -> OBJECTID . ( ) : TYPEID { expr }
    (9) Atributo -> OBJECTID . : TYPEID ASSIGN expr
    (10) Atributo -> OBJECTID . : TYPEID
    (               shift and go to state 19
    :               shift and go to state 20


state 16

    (5) cuerpo_clase -> cuerpo_clase caracteristica ; .
    }               reduce using rule 5 (cuerpo_clase -> cuerpo_clase caracteristica ; .)
    OBJECTID        reduce using rule 5 (cuerpo_clase -> cuerpo_clase caracteristica ; .)


state 17

    (7) caracteristica -> Metodo ; .
    ;               reduce using rule 7 (caracteristica -> Metodo ; .)


state 18

    (8) caracteristica -> Atributo ; .
    ;               reduce using rule 8 (caracteristica -> Atributo ; .)


state 19

    (11) Metodo -> OBJECTID ( . formal ) : TYPEID { expr }
    (12) Metodo -> OBJECTID ( . ) : TYPEID { expr }
    (13) formal -> . OBJECTID : TYPEID
    (14) formal -> .
  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 23
    OBJECTID        shift and go to state 21

    formal                         shift and go to state 22

state 20

    (9) Atributo -> OBJECTID : . TYPEID ASSIGN expr
    (10) Atributo -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 24


state 21

    (13) formal -> OBJECTID . : TYPEID
    :               shift and go to state 25


state 22

    (11) Metodo -> OBJECTID ( formal . ) : TYPEID { expr }
    )               shift and go to state 26


state 23

    (12) Metodo -> OBJECTID ( ) . : TYPEID { expr }
    :               shift and go to state 27


state 24

    (9) Atributo -> OBJECTID : TYPEID . ASSIGN expr
    (10) Atributo -> OBJECTID : TYPEID .
    ASSIGN          shift and go to state 28
    ;               reduce using rule 10 (Atributo -> OBJECTID : TYPEID .)


state 25

    (13) formal -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 29


state 26

    (11) Metodo -> OBJECTID ( formal ) . : TYPEID { expr }
    :               shift and go to state 30


state 27

    (12) Metodo -> OBJECTID ( ) : . TYPEID { expr }
    TYPEID          shift and go to state 31


state 28

    (9) Atributo -> OBJECTID : TYPEID ASSIGN . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 33

state 29

    (13) formal -> OBJECTID : TYPEID .
    )               reduce using rule 13 (formal -> OBJECTID : TYPEID .)


state 30

    (11) Metodo -> OBJECTID ( formal ) : . TYPEID { expr }
    TYPEID          shift and go to state 48


state 31

    (12) Metodo -> OBJECTID ( ) : TYPEID . { expr }
    {               shift and go to state 49


state 32

    (18) expr -> OBJECTID .
    (26) expr -> OBJECTID . ( )
    (27) expr -> OBJECTID . ( expr )
    (35) expr -> OBJECTID . ASSIGN expr
    +               reduce using rule 18 (expr -> OBJECTID .)
    ;               reduce using rule 18 (expr -> OBJECTID .)
    }               reduce using rule 18 (expr -> OBJECTID .)
    OF              reduce using rule 18 (expr -> OBJECTID .)
    LOOP            reduce using rule 18 (expr -> OBJECTID .)
    THEN            reduce using rule 18 (expr -> OBJECTID .)
    )               reduce using rule 18 (expr -> OBJECTID .)
    ,               reduce using rule 18 (expr -> OBJECTID .)
    POOL            reduce using rule 18 (expr -> OBJECTID .)
    ELSE            reduce using rule 18 (expr -> OBJECTID .)
    -               reduce using rule 18 (expr -> OBJECTID .)
    FI              reduce using rule 18 (expr -> OBJECTID .)
    *               reduce using rule 18 (expr -> OBJECTID .)
    /               reduce using rule 18 (expr -> OBJECTID .)
    <               reduce using rule 18 (expr -> OBJECTID .)
    LE              reduce using rule 18 (expr -> OBJECTID .)
    =               reduce using rule 18 (expr -> OBJECTID .)
    (               shift and go to state 50
    ASSIGN          shift and go to state 51


state 33

    (9) Atributo -> OBJECTID : TYPEID ASSIGN expr .
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    ;               reduce using rule 9 (Atributo -> OBJECTID : TYPEID ASSIGN expr .)
    +               shift and go to state 52


state 34

    (15) expr -> BOOL_CONST .
    +               reduce using rule 15 (expr -> BOOL_CONST .)
    ;               reduce using rule 15 (expr -> BOOL_CONST .)
    }               reduce using rule 15 (expr -> BOOL_CONST .)
    OF              reduce using rule 15 (expr -> BOOL_CONST .)
    LOOP            reduce using rule 15 (expr -> BOOL_CONST .)
    THEN            reduce using rule 15 (expr -> BOOL_CONST .)
    )               reduce using rule 15 (expr -> BOOL_CONST .)
    ,               reduce using rule 15 (expr -> BOOL_CONST .)
    POOL            reduce using rule 15 (expr -> BOOL_CONST .)
    ELSE            reduce using rule 15 (expr -> BOOL_CONST .)
    -               reduce using rule 15 (expr -> BOOL_CONST .)
    FI              reduce using rule 15 (expr -> BOOL_CONST .)
    *               reduce using rule 15 (expr -> BOOL_CONST .)
    /               reduce using rule 15 (expr -> BOOL_CONST .)
    <               reduce using rule 15 (expr -> BOOL_CONST .)
    LE              reduce using rule 15 (expr -> BOOL_CONST .)
    =               reduce using rule 15 (expr -> BOOL_CONST .)


state 35

    (16) expr -> STR_CONST .
    +               reduce using rule 16 (expr -> STR_CONST .)
    ;               reduce using rule 16 (expr -> STR_CONST .)
    }               reduce using rule 16 (expr -> STR_CONST .)
    OF              reduce using rule 16 (expr -> STR_CONST .)
    LOOP            reduce using rule 16 (expr -> STR_CONST .)
    THEN            reduce using rule 16 (expr -> STR_CONST .)
    )               reduce using rule 16 (expr -> STR_CONST .)
    ,               reduce using rule 16 (expr -> STR_CONST .)
    POOL            reduce using rule 16 (expr -> STR_CONST .)
    ELSE            reduce using rule 16 (expr -> STR_CONST .)
    -               reduce using rule 16 (expr -> STR_CONST .)
    FI              reduce using rule 16 (expr -> STR_CONST .)
    *               reduce using rule 16 (expr -> STR_CONST .)
    /               reduce using rule 16 (expr -> STR_CONST .)
    <               reduce using rule 16 (expr -> STR_CONST .)
    LE              reduce using rule 16 (expr -> STR_CONST .)
    =               reduce using rule 16 (expr -> STR_CONST .)


state 36

    (17) expr -> INT_CONST .
    +               reduce using rule 17 (expr -> INT_CONST .)
    ;               reduce using rule 17 (expr -> INT_CONST .)
    }               reduce using rule 17 (expr -> INT_CONST .)
    OF              reduce using rule 17 (expr -> INT_CONST .)
    LOOP            reduce using rule 17 (expr -> INT_CONST .)
    THEN            reduce using rule 17 (expr -> INT_CONST .)
    )               reduce using rule 17 (expr -> INT_CONST .)
    ,               reduce using rule 17 (expr -> INT_CONST .)
    POOL            reduce using rule 17 (expr -> INT_CONST .)
    ELSE            reduce using rule 17 (expr -> INT_CONST .)
    -               reduce using rule 17 (expr -> INT_CONST .)
    FI              reduce using rule 17 (expr -> INT_CONST .)
    *               reduce using rule 17 (expr -> INT_CONST .)
    /               reduce using rule 17 (expr -> INT_CONST .)
    <               reduce using rule 17 (expr -> INT_CONST .)
    LE              reduce using rule 17 (expr -> INT_CONST .)
    =               reduce using rule 17 (expr -> INT_CONST .)


state 37

    (19) expr -> { . expr }
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 53

state 38

    (20) expr -> NEW . TYPEID
    TYPEID          shift and go to state 54


state 39

    (21) expr -> CASE . expr OF { cuerpo_case } ESAC
    (22) expr -> CASE . expr OF { } ESAC
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 55

state 40

    (23) expr -> LET . OBJECTID : TYPEID lista_inicia IN expr
    OBJECTID        shift and go to state 56


state 41

    (24) expr -> WHILE . expr LOOP expr POOL
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 57

state 42

    (25) expr -> IF . expr THEN expr ELSE expr FI
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 58

state 43

    (30) expr -> ( . expr )
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 59

state 44

    (28) expr -> @ . TYPEID . OBJECTID ( expr )
    (29) expr -> @ . TYPEID . OBJECTID ( )
    TYPEID          shift and go to state 60


state 45

    (31) expr -> ~ . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 61

state 46

    (32) expr -> ISVOID . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 62

state 47

    (33) expr -> NOT . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 63

state 48

    (11) Metodo -> OBJECTID ( formal ) : TYPEID . { expr }
    {               shift and go to state 64


state 49

    (12) Metodo -> OBJECTID ( ) : TYPEID { . expr }
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 65

state 50

    (26) expr -> OBJECTID ( . )
    (27) expr -> OBJECTID ( . expr )
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    )               shift and go to state 66
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 67

state 51

    (35) expr -> OBJECTID ASSIGN . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 68

state 52

    (34) expr -> expr + . expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 69

state 53

    (19) expr -> { expr . }
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    }               shift and go to state 70
    +               shift and go to state 52


state 54

    (20) expr -> NEW TYPEID .
    +               reduce using rule 20 (expr -> NEW TYPEID .)
    ;               reduce using rule 20 (expr -> NEW TYPEID .)
    }               reduce using rule 20 (expr -> NEW TYPEID .)
    OF              reduce using rule 20 (expr -> NEW TYPEID .)
    LOOP            reduce using rule 20 (expr -> NEW TYPEID .)
    THEN            reduce using rule 20 (expr -> NEW TYPEID .)
    )               reduce using rule 20 (expr -> NEW TYPEID .)
    ,               reduce using rule 20 (expr -> NEW TYPEID .)
    POOL            reduce using rule 20 (expr -> NEW TYPEID .)
    ELSE            reduce using rule 20 (expr -> NEW TYPEID .)
    -               reduce using rule 20 (expr -> NEW TYPEID .)
    FI              reduce using rule 20 (expr -> NEW TYPEID .)
    *               reduce using rule 20 (expr -> NEW TYPEID .)
    /               reduce using rule 20 (expr -> NEW TYPEID .)
    <               reduce using rule 20 (expr -> NEW TYPEID .)
    LE              reduce using rule 20 (expr -> NEW TYPEID .)
    =               reduce using rule 20 (expr -> NEW TYPEID .)


state 55

    (21) expr -> CASE expr . OF { cuerpo_case } ESAC
    (22) expr -> CASE expr . OF { } ESAC
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    OF              shift and go to state 71
    +               shift and go to state 52


state 56

    (23) expr -> LET OBJECTID . : TYPEID lista_inicia IN expr
    :               shift and go to state 72


state 57

    (24) expr -> WHILE expr . LOOP expr POOL
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    LOOP            shift and go to state 73
    +               shift and go to state 52


state 58

    (25) expr -> IF expr . THEN expr ELSE expr FI
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    THEN            shift and go to state 74
    +               shift and go to state 52


state 59

    (30) expr -> ( expr . )
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    )               shift and go to state 75
    +               shift and go to state 52


state 60

    (28) expr -> @ TYPEID . . OBJECTID ( expr )
    (29) expr -> @ TYPEID . . OBJECTID ( )
    .               shift and go to state 76


state 61

    (31) expr -> ~ expr .
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 31 (expr -> ~ expr .)
    }               reduce using rule 31 (expr -> ~ expr .)
    OF              reduce using rule 31 (expr -> ~ expr .)
    LOOP            reduce using rule 31 (expr -> ~ expr .)
    THEN            reduce using rule 31 (expr -> ~ expr .)
    )               reduce using rule 31 (expr -> ~ expr .)
    ,               reduce using rule 31 (expr -> ~ expr .)
    POOL            reduce using rule 31 (expr -> ~ expr .)
    ELSE            reduce using rule 31 (expr -> ~ expr .)
    -               reduce using rule 31 (expr -> ~ expr .)
    FI              reduce using rule 31 (expr -> ~ expr .)
    *               reduce using rule 31 (expr -> ~ expr .)
    /               reduce using rule 31 (expr -> ~ expr .)
    <               reduce using rule 31 (expr -> ~ expr .)
    LE              reduce using rule 31 (expr -> ~ expr .)
    =               reduce using rule 31 (expr -> ~ expr .)
    +               shift and go to state 52


state 62

    (32) expr -> ISVOID expr .
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    +               reduce using rule 32 (expr -> ISVOID expr .)
    ;               reduce using rule 32 (expr -> ISVOID expr .)
    }               reduce using rule 32 (expr -> ISVOID expr .)
    OF              reduce using rule 32 (expr -> ISVOID expr .)
    LOOP            reduce using rule 32 (expr -> ISVOID expr .)
    THEN            reduce using rule 32 (expr -> ISVOID expr .)
    )               reduce using rule 32 (expr -> ISVOID expr .)
    ,               reduce using rule 32 (expr -> ISVOID expr .)
    POOL            reduce using rule 32 (expr -> ISVOID expr .)
    ELSE            reduce using rule 32 (expr -> ISVOID expr .)
    -               reduce using rule 32 (expr -> ISVOID expr .)
    FI              reduce using rule 32 (expr -> ISVOID expr .)
    *               reduce using rule 32 (expr -> ISVOID expr .)
    /               reduce using rule 32 (expr -> ISVOID expr .)
    <               reduce using rule 32 (expr -> ISVOID expr .)
    LE              reduce using rule 32 (expr -> ISVOID expr .)
    =               reduce using rule 32 (expr -> ISVOID expr .)


state 63

    (33) expr -> NOT expr .
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    ;               reduce using rule 33 (expr -> NOT expr .)
    }               reduce using rule 33 (expr -> NOT expr .)
    OF              reduce using rule 33 (expr -> NOT expr .)
    LOOP            reduce using rule 33 (expr -> NOT expr .)
    THEN            reduce using rule 33 (expr -> NOT expr .)
    )               reduce using rule 33 (expr -> NOT expr .)
    ,               reduce using rule 33 (expr -> NOT expr .)
    POOL            reduce using rule 33 (expr -> NOT expr .)
    ELSE            reduce using rule 33 (expr -> NOT expr .)
    -               reduce using rule 33 (expr -> NOT expr .)
    FI              reduce using rule 33 (expr -> NOT expr .)
    *               reduce using rule 33 (expr -> NOT expr .)
    /               reduce using rule 33 (expr -> NOT expr .)
    <               reduce using rule 33 (expr -> NOT expr .)
    LE              reduce using rule 33 (expr -> NOT expr .)
    =               reduce using rule 33 (expr -> NOT expr .)
    +               shift and go to state 52


state 64

    (11) Metodo -> OBJECTID ( formal ) : TYPEID { . expr }
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 77

state 65

    (12) Metodo -> OBJECTID ( ) : TYPEID { expr . }
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    }               shift and go to state 78
    +               shift and go to state 52


state 66

    (26) expr -> OBJECTID ( ) .
    +               reduce using rule 26 (expr -> OBJECTID ( ) .)
    ;               reduce using rule 26 (expr -> OBJECTID ( ) .)
    }               reduce using rule 26 (expr -> OBJECTID ( ) .)
    OF              reduce using rule 26 (expr -> OBJECTID ( ) .)
    LOOP            reduce using rule 26 (expr -> OBJECTID ( ) .)
    THEN            reduce using rule 26 (expr -> OBJECTID ( ) .)
    )               reduce using rule 26 (expr -> OBJECTID ( ) .)
    ,               reduce using rule 26 (expr -> OBJECTID ( ) .)
    POOL            reduce using rule 26 (expr -> OBJECTID ( ) .)
    ELSE            reduce using rule 26 (expr -> OBJECTID ( ) .)
    -               reduce using rule 26 (expr -> OBJECTID ( ) .)
    FI              reduce using rule 26 (expr -> OBJECTID ( ) .)
    *               reduce using rule 26 (expr -> OBJECTID ( ) .)
    /               reduce using rule 26 (expr -> OBJECTID ( ) .)
    <               reduce using rule 26 (expr -> OBJECTID ( ) .)
    LE              reduce using rule 26 (expr -> OBJECTID ( ) .)
    =               reduce using rule 26 (expr -> OBJECTID ( ) .)


state 67

    (27) expr -> OBJECTID ( expr . )
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    )               shift and go to state 79
    +               shift and go to state 52


state 68

    (35) expr -> OBJECTID ASSIGN expr .
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    ;               reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    }               reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    OF              reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    LOOP            reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    THEN            reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    )               reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    ,               reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    POOL            reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    ELSE            reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    -               reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    FI              reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    *               reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    /               reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    <               reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    LE              reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    =               reduce using rule 35 (expr -> OBJECTID ASSIGN expr .)
    +               shift and go to state 52


state 69

    (34) expr -> expr + expr . , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    ,               shift and go to state 80
    +               shift and go to state 52


state 70

    (19) expr -> { expr } .
    +               reduce using rule 19 (expr -> { expr } .)
    ;               reduce using rule 19 (expr -> { expr } .)
    }               reduce using rule 19 (expr -> { expr } .)
    OF              reduce using rule 19 (expr -> { expr } .)
    LOOP            reduce using rule 19 (expr -> { expr } .)
    THEN            reduce using rule 19 (expr -> { expr } .)
    )               reduce using rule 19 (expr -> { expr } .)
    ,               reduce using rule 19 (expr -> { expr } .)
    POOL            reduce using rule 19 (expr -> { expr } .)
    ELSE            reduce using rule 19 (expr -> { expr } .)
    -               reduce using rule 19 (expr -> { expr } .)
    FI              reduce using rule 19 (expr -> { expr } .)
    *               reduce using rule 19 (expr -> { expr } .)
    /               reduce using rule 19 (expr -> { expr } .)
    <               reduce using rule 19 (expr -> { expr } .)
    LE              reduce using rule 19 (expr -> { expr } .)
    =               reduce using rule 19 (expr -> { expr } .)


state 71

    (21) expr -> CASE expr OF . { cuerpo_case } ESAC
    (22) expr -> CASE expr OF . { } ESAC
    {               shift and go to state 81


state 72

    (23) expr -> LET OBJECTID : . TYPEID lista_inicia IN expr
    TYPEID          shift and go to state 82


state 73

    (24) expr -> WHILE expr LOOP . expr POOL
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 83

state 74

    (25) expr -> IF expr THEN . expr ELSE expr FI
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 84

state 75

    (30) expr -> ( expr ) .
    +               reduce using rule 30 (expr -> ( expr ) .)
    ;               reduce using rule 30 (expr -> ( expr ) .)
    }               reduce using rule 30 (expr -> ( expr ) .)
    OF              reduce using rule 30 (expr -> ( expr ) .)
    LOOP            reduce using rule 30 (expr -> ( expr ) .)
    THEN            reduce using rule 30 (expr -> ( expr ) .)
    )               reduce using rule 30 (expr -> ( expr ) .)
    ,               reduce using rule 30 (expr -> ( expr ) .)
    POOL            reduce using rule 30 (expr -> ( expr ) .)
    ELSE            reduce using rule 30 (expr -> ( expr ) .)
    -               reduce using rule 30 (expr -> ( expr ) .)
    FI              reduce using rule 30 (expr -> ( expr ) .)
    *               reduce using rule 30 (expr -> ( expr ) .)
    /               reduce using rule 30 (expr -> ( expr ) .)
    <               reduce using rule 30 (expr -> ( expr ) .)
    LE              reduce using rule 30 (expr -> ( expr ) .)
    =               reduce using rule 30 (expr -> ( expr ) .)


state 76

    (28) expr -> @ TYPEID . . OBJECTID ( expr )
    (29) expr -> @ TYPEID . . OBJECTID ( )
    OBJECTID        shift and go to state 85


state 77

    (11) Metodo -> OBJECTID ( formal ) : TYPEID { expr . }
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    }               shift and go to state 86
    +               shift and go to state 52


state 78

    (12) Metodo -> OBJECTID ( ) : TYPEID { expr } .
    ;               reduce using rule 12 (Metodo -> OBJECTID ( ) : TYPEID { expr } .)


state 79

    (27) expr -> OBJECTID ( expr ) .
    +               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    ;               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    }               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    OF              reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    LOOP            reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    THEN            reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    )               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    ,               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    POOL            reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    ELSE            reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    -               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    FI              reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    *               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    /               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    <               reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    LE              reduce using rule 27 (expr -> OBJECTID ( expr ) .)
    =               reduce using rule 27 (expr -> OBJECTID ( expr ) .)


state 80

    (34) expr -> expr + expr , . expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 87

state 81

    (21) expr -> CASE expr OF { . cuerpo_case } ESAC
    (22) expr -> CASE expr OF { . } ESAC
    (37) cuerpo_case -> . cuerpo_case OBJECTID : TYPEID DARROW expr ;
    (38) cuerpo_case -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 89
    OBJECTID        reduce using rule 38 (cuerpo_case -> .)

    cuerpo_case                    shift and go to state 88

state 82

    (23) expr -> LET OBJECTID : TYPEID . lista_inicia IN expr
    (36) lista_inicia -> . OBJECTID : TYPEID
    OBJECTID        shift and go to state 90

    lista_inicia                   shift and go to state 91

state 83

    (24) expr -> WHILE expr LOOP expr . POOL
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    POOL            shift and go to state 92
    +               shift and go to state 52


state 84

    (25) expr -> IF expr THEN expr . ELSE expr FI
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    ELSE            shift and go to state 93
    +               shift and go to state 52


state 85

    (28) expr -> @ TYPEID . OBJECTID . ( expr )
    (29) expr -> @ TYPEID . OBJECTID . ( )
    (               shift and go to state 94


state 86

    (11) Metodo -> OBJECTID ( formal ) : TYPEID { expr } .
    ;               reduce using rule 11 (Metodo -> OBJECTID ( formal ) : TYPEID { expr } .)


state 87

    (34) expr -> expr + expr , expr . - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    -               shift and go to state 95
    +               shift and go to state 52


state 88

    (21) expr -> CASE expr OF { cuerpo_case . } ESAC
    (37) cuerpo_case -> cuerpo_case . OBJECTID : TYPEID DARROW expr ;
    }               shift and go to state 96
    OBJECTID        shift and go to state 97


state 89

    (22) expr -> CASE expr OF { } . ESAC
    ESAC            shift and go to state 98


state 90

    (36) lista_inicia -> OBJECTID . : TYPEID
    :               shift and go to state 99


state 91

    (23) expr -> LET OBJECTID : TYPEID lista_inicia . IN expr
    IN              shift and go to state 100


state 92

    (24) expr -> WHILE expr LOOP expr POOL .
    +               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    ;               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    }               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    OF              reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    LOOP            reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    THEN            reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    )               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    ,               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    POOL            reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    ELSE            reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    -               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    FI              reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    *               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    /               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    <               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    LE              reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    =               reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)


state 93

    (25) expr -> IF expr THEN expr ELSE . expr FI
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 101

state 94

    (28) expr -> @ TYPEID . OBJECTID ( . expr )
    (29) expr -> @ TYPEID . OBJECTID ( . )
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    )               shift and go to state 103
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 102

state 95

    (34) expr -> expr + expr , expr - . expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 104

state 96

    (21) expr -> CASE expr OF { cuerpo_case } . ESAC
    ESAC            shift and go to state 105


state 97

    (37) cuerpo_case -> cuerpo_case OBJECTID . : TYPEID DARROW expr ;
    :               shift and go to state 106


state 98

    (22) expr -> CASE expr OF { } ESAC .
    +               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    ;               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    }               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    OF              reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    LOOP            reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    THEN            reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    )               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    ,               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    POOL            reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    ELSE            reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    -               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    FI              reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    *               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    /               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    <               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    LE              reduce using rule 22 (expr -> CASE expr OF { } ESAC .)
    =               reduce using rule 22 (expr -> CASE expr OF { } ESAC .)


state 99

    (36) lista_inicia -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 107


state 100

    (23) expr -> LET OBJECTID : TYPEID lista_inicia IN . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 108

state 101

    (25) expr -> IF expr THEN expr ELSE expr . FI
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    FI              shift and go to state 109
    +               shift and go to state 52


state 102

    (28) expr -> @ TYPEID . OBJECTID ( expr . )
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    )               shift and go to state 110
    +               shift and go to state 52


state 103

    (29) expr -> @ TYPEID . OBJECTID ( ) .
    +               reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    ;               reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    }               reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    OF              reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    LOOP            reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    THEN            reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    )               reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    ,               reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    POOL            reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    ELSE            reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    -               reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    FI              reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    *               reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    /               reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    <               reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    LE              reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)
    =               reduce using rule 29 (expr -> @ TYPEID . OBJECTID ( ) .)


state 104

    (34) expr -> expr + expr , expr - expr . , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    ,               shift and go to state 111
    +               shift and go to state 52


state 105

    (21) expr -> CASE expr OF { cuerpo_case } ESAC .
    +               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    ;               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    }               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    OF              reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    LOOP            reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    THEN            reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    )               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    ,               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    POOL            reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    ELSE            reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    -               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    FI              reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    *               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    /               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    <               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    LE              reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    =               reduce using rule 21 (expr -> CASE expr OF { cuerpo_case } ESAC .)


state 106

    (37) cuerpo_case -> cuerpo_case OBJECTID : . TYPEID DARROW expr ;
    TYPEID          shift and go to state 112


state 107

    (36) lista_inicia -> OBJECTID : TYPEID .
    IN              reduce using rule 36 (lista_inicia -> OBJECTID : TYPEID .)


state 108

    (23) expr -> LET OBJECTID : TYPEID lista_inicia IN expr .
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    }               reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    OF              reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    LOOP            reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    THEN            reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    )               reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    ,               reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    POOL            reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    ELSE            reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    -               reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    FI              reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    *               reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    /               reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    <               reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    LE              reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    =               reduce using rule 23 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    +               shift and go to state 52


state 109

    (25) expr -> IF expr THEN expr ELSE expr FI .
    +               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    ;               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    }               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    OF              reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    LOOP            reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    THEN            reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    )               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    ,               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    POOL            reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    ELSE            reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    -               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    FI              reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    *               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    /               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    <               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    LE              reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)
    =               reduce using rule 25 (expr -> IF expr THEN expr ELSE expr FI .)


state 110

    (28) expr -> @ TYPEID . OBJECTID ( expr ) .
    +               reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    ;               reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    }               reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    OF              reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    LOOP            reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    THEN            reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    )               reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    ,               reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    POOL            reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    ELSE            reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    -               reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    FI              reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    *               reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    /               reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    <               reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    LE              reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)
    =               reduce using rule 28 (expr -> @ TYPEID . OBJECTID ( expr ) .)


state 111

    (34) expr -> expr + expr , expr - expr , . expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 113

state 112

    (37) cuerpo_case -> cuerpo_case OBJECTID : TYPEID . DARROW expr ;
    DARROW          shift and go to state 114


state 113

    (34) expr -> expr + expr , expr - expr , expr . * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    *               shift and go to state 115
    +               shift and go to state 52


state 114

    (37) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW . expr ;
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 116

state 115

    (34) expr -> expr + expr , expr - expr , expr * . expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 117

state 116

    (37) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr . ;
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    ;               shift and go to state 118
    +               shift and go to state 52


state 117

    (34) expr -> expr + expr , expr - expr , expr * expr . , expr / expr , expr < expr , expr LE expr , expr = expr
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    ,               shift and go to state 119
    +               shift and go to state 52


state 118

    (37) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ; .
    }               reduce using rule 37 (cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ; .)
    OBJECTID        reduce using rule 37 (cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ; .)


state 119

    (34) expr -> expr + expr , expr - expr , expr * expr , . expr / expr , expr < expr , expr LE expr , expr = expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 120

state 120

    (34) expr -> expr + expr , expr - expr , expr * expr , expr . / expr , expr < expr , expr LE expr , expr = expr
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    /               shift and go to state 121
    +               shift and go to state 52


state 121

    (34) expr -> expr + expr , expr - expr , expr * expr , expr / . expr , expr < expr , expr LE expr , expr = expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 122

state 122

    (34) expr -> expr + expr , expr - expr , expr * expr , expr / expr . , expr < expr , expr LE expr , expr = expr
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    ,               shift and go to state 123
    +               shift and go to state 52


state 123

    (34) expr -> expr + expr , expr - expr , expr * expr , expr / expr , . expr < expr , expr LE expr , expr = expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 124

state 124

    (34) expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr . < expr , expr LE expr , expr = expr
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    <               shift and go to state 125
    +               shift and go to state 52


state 125

    (34) expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < . expr , expr LE expr , expr = expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 126

state 126

    (34) expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr . , expr LE expr , expr = expr
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    ,               shift and go to state 127
    +               shift and go to state 52


state 127

    (34) expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , . expr LE expr , expr = expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 128

state 128

    (34) expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr . LE expr , expr = expr
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    LE              shift and go to state 129
    +               shift and go to state 52


state 129

    (34) expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE . expr , expr = expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 130

state 130

    (34) expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr . , expr = expr
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    ,               shift and go to state 131
    +               shift and go to state 52


state 131

    (34) expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , . expr = expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 132

state 132

    (34) expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr . = expr
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    =               shift and go to state 133
    +               shift and go to state 52


state 133

    (34) expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = . expr
    (15) expr -> . BOOL_CONST
    (16) expr -> . STR_CONST
    (17) expr -> . INT_CONST
    (18) expr -> . OBJECTID
    (19) expr -> . { expr }
    (20) expr -> . NEW TYPEID
    (21) expr -> . CASE expr OF { cuerpo_case } ESAC
    (22) expr -> . CASE expr OF { } ESAC
    (23) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . IF expr THEN expr ELSE expr FI
    (26) expr -> . OBJECTID ( )
    (27) expr -> . OBJECTID ( expr )
    (28) expr -> . @ TYPEID . OBJECTID ( expr )
    (29) expr -> . @ TYPEID . OBJECTID ( )
    (30) expr -> . ( expr )
    (31) expr -> . ~ expr
    (32) expr -> . ISVOID expr
    (33) expr -> . NOT expr
    (34) expr -> . expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
    (35) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 34
    STR_CONST       shift and go to state 35
    INT_CONST       shift and go to state 36
    OBJECTID        shift and go to state 32
    {               shift and go to state 37
    NEW             shift and go to state 38
    CASE            shift and go to state 39
    LET             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    @               shift and go to state 44
    (               shift and go to state 43
    ~               shift and go to state 45
    ISVOID          shift and go to state 46
    NOT             shift and go to state 47

    expr                           shift and go to state 134

state 134

    (34) expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .
    (34) expr -> expr . + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    }               reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    OF              reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    LOOP            reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    THEN            reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    )               reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    ,               reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    POOL            reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    ELSE            reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    -               reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    FI              reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    *               reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    /               reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    <               reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    LE              reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    =               reduce using rule 34 (expr -> expr + expr , expr - expr , expr * expr , expr / expr , expr < expr , expr LE expr , expr = expr .)
    +               shift and go to state 52


Conflicts:

shift/reduce conflict for } in state 7 resolved as shift
shift/reduce conflict for ) in state 19 resolved as shift
shift/reduce conflict for + in state 61 resolved as shift
shift/reduce conflict for } in state 81 resolved as shift
shift/reduce conflict for + in state 108 resolved as shift
shift/reduce conflict for + in state 134 resolved as shift