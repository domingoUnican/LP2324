Grammar:

Rule 0     S' -> Programa
Rule 1     Programa -> Programa error
Rule 2     Programa -> Programa Clase ;
Rule 3     Programa -> Clase ;
Rule 4     Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
Rule 5     Clase -> CLASS TYPEID INHERITS TYPEID { }
Rule 6     Clase -> CLASS TYPEID { cuerpo_clase }
Rule 7     Clase -> CLASS TYPEID { }
Rule 8     cuerpo_clase -> cuerpo_clase caracteristica ;
Rule 9     cuerpo_clase -> <empty>
Rule 10    caracteristica -> Metodo
Rule 11    caracteristica -> Atributo
Rule 12    Atributo -> OBJECTID : TYPEID ASSIGN expr  [precedence=right, level=1]
Rule 13    Atributo -> OBJECTID : TYPEID
Rule 14    Metodo -> OBJECTID ( formales ) : TYPEID { expr }
Rule 15    Metodo -> OBJECTID ( ) : TYPEID { expr }
Rule 16    Metodo -> OBJECTID ( ) : TYPEID { }
Rule 17    formales -> formal , formales
Rule 18    formales -> formal
Rule 19    formal -> OBJECTID : TYPEID
Rule 20    expr -> { bloque }
Rule 21    expr -> BOOL_CONST
Rule 22    expr -> STR_CONST
Rule 23    expr -> INT_CONST
Rule 24    expr -> OBJECTID
Rule 25    expr -> { expr }
Rule 26    expr -> NEW TYPEID
Rule 27    expr -> CASE expr OF cuerpo_case ESAC
Rule 28    expr -> CASE expr OF ESAC
Rule 29    expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr
Rule 30    expr -> WHILE expr LOOP expr POOL
Rule 31    expr -> IF expr THEN expr ELSE expr FI
Rule 32    expr -> expr . OBJECTID ( lista_argumentos )
Rule 33    expr -> expr . OBJECTID ( )
Rule 34    expr -> OBJECTID ( )
Rule 35    expr -> OBJECTID ( lista_argumentos )
Rule 36    expr -> expr @ TYPEID . OBJECTID ( argumentos )
Rule 37    expr -> expr @ TYPEID . OBJECTID ( )
Rule 38    expr -> ( expr )
Rule 39    expr -> ~ expr
Rule 40    expr -> ISVOID expr  [precedence=left, level=5]
Rule 41    expr -> NOT expr  [precedence=left, level=2]
Rule 42    expr -> expr = expr
Rule 43    expr -> expr LE expr
Rule 44    expr -> expr < expr
Rule 45    expr -> expr / expr  [precedence=left, level=4]
Rule 46    expr -> expr * expr  [precedence=left, level=4]
Rule 47    expr -> expr - expr  [precedence=left, level=3]
Rule 48    expr -> expr + expr  [precedence=left, level=3]
Rule 49    expr -> OBJECTID ASSIGN expr  [precedence=right, level=1]
Rule 50    argumentos -> expr , argumentos
Rule 51    argumentos -> expr
Rule 52    lista_argumentos -> expr , lista_argumentos
Rule 53    lista_argumentos -> expr
Rule 54    lista_inicia -> lista_inicia , OBJECTID : TYPEID opcionales
Rule 55    lista_inicia -> <empty>
Rule 56    opcionales -> <empty>
Rule 57    opcionales -> ASSIGN expr  [precedence=right, level=1]
Rule 58    cuerpo_case -> cuerpo_case ;
Rule 59    cuerpo_case -> cuerpo_case cuerpo_case ;
Rule 60    cuerpo_case -> OBJECTID : TYPEID DARROW expr ;
Rule 61    bloque -> bloque error ;
Rule 62    bloque -> bloque expr ;
Rule 63    bloque -> expr ;

Unused terminals:

    NUMBER
    COMMENT_BLOQUE
    ERROR
    COMMENT_1LINEA

Terminals, with rules where they appear:

(                    : 14 15 16 32 33 34 35 36 37 38
)                    : 14 15 16 32 33 34 35 36 37 38
*                    : 46
+                    : 48
,                    : 17 50 52 54
-                    : 47
.                    : 32 33 36 37
/                    : 45
:                    : 12 13 14 15 16 19 29 54 60
;                    : 2 3 8 58 59 60 61 62 63
<                    : 44
=                    : 42
@                    : 36 37
ASSIGN               : 12 49 57
BOOL_CONST           : 21
CASE                 : 27 28
CLASS                : 4 5 6 7
COMMENT_1LINEA       : 
COMMENT_BLOQUE       : 
DARROW               : 60
ELSE                 : 31
ERROR                : 
ESAC                 : 27 28
FI                   : 31
IF                   : 31
IN                   : 29
INHERITS             : 4 5
INT_CONST            : 23
ISVOID               : 40
LE                   : 43
LET                  : 29
LOOP                 : 30
NEW                  : 26
NOT                  : 41
NUMBER               : 
OBJECTID             : 12 13 14 15 16 19 24 29 32 33 34 35 36 37 49 54 60
OF                   : 27 28
POOL                 : 30
STR_CONST            : 22
THEN                 : 31
TYPEID               : 4 4 5 5 6 7 12 13 14 15 16 19 26 29 36 37 54 60
WHILE                : 30
error                : 1 61
{                    : 4 5 6 7 14 15 16 20 25
}                    : 4 5 6 7 14 15 16 20 25
~                    : 39

Nonterminals, with rules where they appear:

Atributo             : 11
Clase                : 2 3
Metodo               : 10
Programa             : 1 2 0
argumentos           : 36 50
bloque               : 20 61 62
caracteristica       : 8
cuerpo_case          : 27 58 59 59
cuerpo_clase         : 4 6 8
expr                 : 12 14 15 25 27 28 29 30 30 31 31 31 32 33 36 37 38 39 40 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 50 51 52 53 57 60 62 63
formal               : 17 18
formales             : 14 17
lista_argumentos     : 32 35 52
lista_inicia         : 29 54
opcionales           : 29 54


state 0

    (0) S' -> . Programa
    (1) Programa -> . Programa error
    (2) Programa -> . Programa Clase ;
    (3) Programa -> . Clase ;
    (4) Clase -> . CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> . CLASS TYPEID INHERITS TYPEID { }
    (6) Clase -> . CLASS TYPEID { cuerpo_clase }
    (7) Clase -> . CLASS TYPEID { }
    CLASS           shift and go to state 3

    Programa                       shift and go to state 1
    Clase                          shift and go to state 2

state 1

    (0) S' -> Programa .
    (1) Programa -> Programa . error
    (2) Programa -> Programa . Clase ;
    (4) Clase -> . CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> . CLASS TYPEID INHERITS TYPEID { }
    (6) Clase -> . CLASS TYPEID { cuerpo_clase }
    (7) Clase -> . CLASS TYPEID { }
    error           shift and go to state 4
    CLASS           shift and go to state 3

    Clase                          shift and go to state 5

state 2

    (3) Programa -> Clase . ;
    ;               shift and go to state 6


state 3

    (4) Clase -> CLASS . TYPEID INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> CLASS . TYPEID INHERITS TYPEID { }
    (6) Clase -> CLASS . TYPEID { cuerpo_clase }
    (7) Clase -> CLASS . TYPEID { }
    TYPEID          shift and go to state 7


state 4

    (1) Programa -> Programa error .
    error           reduce using rule 1 (Programa -> Programa error .)
    CLASS           reduce using rule 1 (Programa -> Programa error .)
    $end            reduce using rule 1 (Programa -> Programa error .)


state 5

    (2) Programa -> Programa Clase . ;
    ;               shift and go to state 8


state 6

    (3) Programa -> Clase ; .
    error           reduce using rule 3 (Programa -> Clase ; .)
    CLASS           reduce using rule 3 (Programa -> Clase ; .)
    $end            reduce using rule 3 (Programa -> Clase ; .)


state 7

    (4) Clase -> CLASS TYPEID . INHERITS TYPEID { cuerpo_clase }
    (5) Clase -> CLASS TYPEID . INHERITS TYPEID { }
    (6) Clase -> CLASS TYPEID . { cuerpo_clase }
    (7) Clase -> CLASS TYPEID . { }
    INHERITS        shift and go to state 9
    {               shift and go to state 10


state 8

    (2) Programa -> Programa Clase ; .
    error           reduce using rule 2 (Programa -> Programa Clase ; .)
    CLASS           reduce using rule 2 (Programa -> Programa Clase ; .)
    $end            reduce using rule 2 (Programa -> Programa Clase ; .)


state 9

    (4) Clase -> CLASS TYPEID INHERITS . TYPEID { cuerpo_clase }
    (5) Clase -> CLASS TYPEID INHERITS . TYPEID { }
    TYPEID          shift and go to state 11


state 10

    (6) Clase -> CLASS TYPEID { . cuerpo_clase }
    (7) Clase -> CLASS TYPEID { . }
    (8) cuerpo_clase -> . cuerpo_clase caracteristica ;
    (9) cuerpo_clase -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 13
    OBJECTID        reduce using rule 9 (cuerpo_clase -> .)

    cuerpo_clase                   shift and go to state 12

state 11

    (4) Clase -> CLASS TYPEID INHERITS TYPEID . { cuerpo_clase }
    (5) Clase -> CLASS TYPEID INHERITS TYPEID . { }
    {               shift and go to state 14


state 12

    (6) Clase -> CLASS TYPEID { cuerpo_clase . }
    (8) cuerpo_clase -> cuerpo_clase . caracteristica ;
    (10) caracteristica -> . Metodo
    (11) caracteristica -> . Atributo
    (14) Metodo -> . OBJECTID ( formales ) : TYPEID { expr }
    (15) Metodo -> . OBJECTID ( ) : TYPEID { expr }
    (16) Metodo -> . OBJECTID ( ) : TYPEID { }
    (12) Atributo -> . OBJECTID : TYPEID ASSIGN expr
    (13) Atributo -> . OBJECTID : TYPEID
    }               shift and go to state 15
    OBJECTID        shift and go to state 19

    caracteristica                 shift and go to state 16
    Metodo                         shift and go to state 17
    Atributo                       shift and go to state 18

state 13

    (7) Clase -> CLASS TYPEID { } .
    ;               reduce using rule 7 (Clase -> CLASS TYPEID { } .)


state 14

    (4) Clase -> CLASS TYPEID INHERITS TYPEID { . cuerpo_clase }
    (5) Clase -> CLASS TYPEID INHERITS TYPEID { . }
    (8) cuerpo_clase -> . cuerpo_clase caracteristica ;
    (9) cuerpo_clase -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 21
    OBJECTID        reduce using rule 9 (cuerpo_clase -> .)

    cuerpo_clase                   shift and go to state 20

state 15

    (6) Clase -> CLASS TYPEID { cuerpo_clase } .
    ;               reduce using rule 6 (Clase -> CLASS TYPEID { cuerpo_clase } .)


state 16

    (8) cuerpo_clase -> cuerpo_clase caracteristica . ;
    ;               shift and go to state 22


state 17

    (10) caracteristica -> Metodo .
    ;               reduce using rule 10 (caracteristica -> Metodo .)


state 18

    (11) caracteristica -> Atributo .
    ;               reduce using rule 11 (caracteristica -> Atributo .)


state 19

    (14) Metodo -> OBJECTID . ( formales ) : TYPEID { expr }
    (15) Metodo -> OBJECTID . ( ) : TYPEID { expr }
    (16) Metodo -> OBJECTID . ( ) : TYPEID { }
    (12) Atributo -> OBJECTID . : TYPEID ASSIGN expr
    (13) Atributo -> OBJECTID . : TYPEID
    (               shift and go to state 23
    :               shift and go to state 24


state 20

    (4) Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase . }
    (8) cuerpo_clase -> cuerpo_clase . caracteristica ;
    (10) caracteristica -> . Metodo
    (11) caracteristica -> . Atributo
    (14) Metodo -> . OBJECTID ( formales ) : TYPEID { expr }
    (15) Metodo -> . OBJECTID ( ) : TYPEID { expr }
    (16) Metodo -> . OBJECTID ( ) : TYPEID { }
    (12) Atributo -> . OBJECTID : TYPEID ASSIGN expr
    (13) Atributo -> . OBJECTID : TYPEID
    }               shift and go to state 25
    OBJECTID        shift and go to state 19

    caracteristica                 shift and go to state 16
    Metodo                         shift and go to state 17
    Atributo                       shift and go to state 18

state 21

    (5) Clase -> CLASS TYPEID INHERITS TYPEID { } .
    ;               reduce using rule 5 (Clase -> CLASS TYPEID INHERITS TYPEID { } .)


state 22

    (8) cuerpo_clase -> cuerpo_clase caracteristica ; .
    }               reduce using rule 8 (cuerpo_clase -> cuerpo_clase caracteristica ; .)
    OBJECTID        reduce using rule 8 (cuerpo_clase -> cuerpo_clase caracteristica ; .)


state 23

    (14) Metodo -> OBJECTID ( . formales ) : TYPEID { expr }
    (15) Metodo -> OBJECTID ( . ) : TYPEID { expr }
    (16) Metodo -> OBJECTID ( . ) : TYPEID { }
    (17) formales -> . formal , formales
    (18) formales -> . formal
    (19) formal -> . OBJECTID : TYPEID
    )               shift and go to state 28
    OBJECTID        shift and go to state 26

    formales                       shift and go to state 27
    formal                         shift and go to state 29

state 24

    (12) Atributo -> OBJECTID : . TYPEID ASSIGN expr
    (13) Atributo -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 30


state 25

    (4) Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase } .
    ;               reduce using rule 4 (Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase } .)


state 26

    (19) formal -> OBJECTID . : TYPEID
    :               shift and go to state 31


state 27

    (14) Metodo -> OBJECTID ( formales . ) : TYPEID { expr }
    )               shift and go to state 32


state 28

    (15) Metodo -> OBJECTID ( ) . : TYPEID { expr }
    (16) Metodo -> OBJECTID ( ) . : TYPEID { }
    :               shift and go to state 33


state 29

    (17) formales -> formal . , formales
    (18) formales -> formal .
    ,               shift and go to state 34
    )               reduce using rule 18 (formales -> formal .)


state 30

    (12) Atributo -> OBJECTID : TYPEID . ASSIGN expr
    (13) Atributo -> OBJECTID : TYPEID .
    ASSIGN          shift and go to state 35
    ;               reduce using rule 13 (Atributo -> OBJECTID : TYPEID .)


state 31

    (19) formal -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 36


state 32

    (14) Metodo -> OBJECTID ( formales ) . : TYPEID { expr }
    :               shift and go to state 37


state 33

    (15) Metodo -> OBJECTID ( ) : . TYPEID { expr }
    (16) Metodo -> OBJECTID ( ) : . TYPEID { }
    TYPEID          shift and go to state 38


state 34

    (17) formales -> formal , . formales
    (17) formales -> . formal , formales
    (18) formales -> . formal
    (19) formal -> . OBJECTID : TYPEID
    OBJECTID        shift and go to state 26

    formal                         shift and go to state 29
    formales                       shift and go to state 39

state 35

    (12) Atributo -> OBJECTID : TYPEID ASSIGN . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 41

state 36

    (19) formal -> OBJECTID : TYPEID .
    ,               reduce using rule 19 (formal -> OBJECTID : TYPEID .)
    )               reduce using rule 19 (formal -> OBJECTID : TYPEID .)


state 37

    (14) Metodo -> OBJECTID ( formales ) : . TYPEID { expr }
    TYPEID          shift and go to state 55


state 38

    (15) Metodo -> OBJECTID ( ) : TYPEID . { expr }
    (16) Metodo -> OBJECTID ( ) : TYPEID . { }
    {               shift and go to state 56


state 39

    (17) formales -> formal , formales .
    )               reduce using rule 17 (formales -> formal , formales .)


state 40

    (24) expr -> OBJECTID .
    (34) expr -> OBJECTID . ( )
    (35) expr -> OBJECTID . ( lista_argumentos )
    (49) expr -> OBJECTID . ASSIGN expr
    .               reduce using rule 24 (expr -> OBJECTID .)
    @               reduce using rule 24 (expr -> OBJECTID .)
    =               reduce using rule 24 (expr -> OBJECTID .)
    LE              reduce using rule 24 (expr -> OBJECTID .)
    <               reduce using rule 24 (expr -> OBJECTID .)
    /               reduce using rule 24 (expr -> OBJECTID .)
    *               reduce using rule 24 (expr -> OBJECTID .)
    -               reduce using rule 24 (expr -> OBJECTID .)
    +               reduce using rule 24 (expr -> OBJECTID .)
    ;               reduce using rule 24 (expr -> OBJECTID .)
    }               reduce using rule 24 (expr -> OBJECTID .)
    OF              reduce using rule 24 (expr -> OBJECTID .)
    LOOP            reduce using rule 24 (expr -> OBJECTID .)
    THEN            reduce using rule 24 (expr -> OBJECTID .)
    )               reduce using rule 24 (expr -> OBJECTID .)
    ,               reduce using rule 24 (expr -> OBJECTID .)
    POOL            reduce using rule 24 (expr -> OBJECTID .)
    ELSE            reduce using rule 24 (expr -> OBJECTID .)
    IN              reduce using rule 24 (expr -> OBJECTID .)
    FI              reduce using rule 24 (expr -> OBJECTID .)
    (               shift and go to state 57
    ASSIGN          shift and go to state 58


state 41

    (12) Atributo -> OBJECTID : TYPEID ASSIGN expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    ;               reduce using rule 12 (Atributo -> OBJECTID : TYPEID ASSIGN expr .)
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 42

    (20) expr -> { . bloque }
    (25) expr -> { . expr }
    (61) bloque -> . bloque error ;
    (62) bloque -> . bloque expr ;
    (63) bloque -> . expr ;
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    bloque                         shift and go to state 68
    expr                           shift and go to state 69

state 43

    (21) expr -> BOOL_CONST .
    .               reduce using rule 21 (expr -> BOOL_CONST .)
    @               reduce using rule 21 (expr -> BOOL_CONST .)
    =               reduce using rule 21 (expr -> BOOL_CONST .)
    LE              reduce using rule 21 (expr -> BOOL_CONST .)
    <               reduce using rule 21 (expr -> BOOL_CONST .)
    /               reduce using rule 21 (expr -> BOOL_CONST .)
    *               reduce using rule 21 (expr -> BOOL_CONST .)
    -               reduce using rule 21 (expr -> BOOL_CONST .)
    +               reduce using rule 21 (expr -> BOOL_CONST .)
    ;               reduce using rule 21 (expr -> BOOL_CONST .)
    }               reduce using rule 21 (expr -> BOOL_CONST .)
    OF              reduce using rule 21 (expr -> BOOL_CONST .)
    LOOP            reduce using rule 21 (expr -> BOOL_CONST .)
    THEN            reduce using rule 21 (expr -> BOOL_CONST .)
    )               reduce using rule 21 (expr -> BOOL_CONST .)
    ,               reduce using rule 21 (expr -> BOOL_CONST .)
    POOL            reduce using rule 21 (expr -> BOOL_CONST .)
    ELSE            reduce using rule 21 (expr -> BOOL_CONST .)
    IN              reduce using rule 21 (expr -> BOOL_CONST .)
    FI              reduce using rule 21 (expr -> BOOL_CONST .)


state 44

    (22) expr -> STR_CONST .
    .               reduce using rule 22 (expr -> STR_CONST .)
    @               reduce using rule 22 (expr -> STR_CONST .)
    =               reduce using rule 22 (expr -> STR_CONST .)
    LE              reduce using rule 22 (expr -> STR_CONST .)
    <               reduce using rule 22 (expr -> STR_CONST .)
    /               reduce using rule 22 (expr -> STR_CONST .)
    *               reduce using rule 22 (expr -> STR_CONST .)
    -               reduce using rule 22 (expr -> STR_CONST .)
    +               reduce using rule 22 (expr -> STR_CONST .)
    ;               reduce using rule 22 (expr -> STR_CONST .)
    }               reduce using rule 22 (expr -> STR_CONST .)
    OF              reduce using rule 22 (expr -> STR_CONST .)
    LOOP            reduce using rule 22 (expr -> STR_CONST .)
    THEN            reduce using rule 22 (expr -> STR_CONST .)
    )               reduce using rule 22 (expr -> STR_CONST .)
    ,               reduce using rule 22 (expr -> STR_CONST .)
    POOL            reduce using rule 22 (expr -> STR_CONST .)
    ELSE            reduce using rule 22 (expr -> STR_CONST .)
    IN              reduce using rule 22 (expr -> STR_CONST .)
    FI              reduce using rule 22 (expr -> STR_CONST .)


state 45

    (23) expr -> INT_CONST .
    .               reduce using rule 23 (expr -> INT_CONST .)
    @               reduce using rule 23 (expr -> INT_CONST .)
    =               reduce using rule 23 (expr -> INT_CONST .)
    LE              reduce using rule 23 (expr -> INT_CONST .)
    <               reduce using rule 23 (expr -> INT_CONST .)
    /               reduce using rule 23 (expr -> INT_CONST .)
    *               reduce using rule 23 (expr -> INT_CONST .)
    -               reduce using rule 23 (expr -> INT_CONST .)
    +               reduce using rule 23 (expr -> INT_CONST .)
    ;               reduce using rule 23 (expr -> INT_CONST .)
    }               reduce using rule 23 (expr -> INT_CONST .)
    OF              reduce using rule 23 (expr -> INT_CONST .)
    LOOP            reduce using rule 23 (expr -> INT_CONST .)
    THEN            reduce using rule 23 (expr -> INT_CONST .)
    )               reduce using rule 23 (expr -> INT_CONST .)
    ,               reduce using rule 23 (expr -> INT_CONST .)
    POOL            reduce using rule 23 (expr -> INT_CONST .)
    ELSE            reduce using rule 23 (expr -> INT_CONST .)
    IN              reduce using rule 23 (expr -> INT_CONST .)
    FI              reduce using rule 23 (expr -> INT_CONST .)


state 46

    (26) expr -> NEW . TYPEID
    TYPEID          shift and go to state 70


state 47

    (27) expr -> CASE . expr OF cuerpo_case ESAC
    (28) expr -> CASE . expr OF ESAC
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 71

state 48

    (29) expr -> LET . OBJECTID : TYPEID opcionales lista_inicia IN expr
    OBJECTID        shift and go to state 72


state 49

    (30) expr -> WHILE . expr LOOP expr POOL
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 73

state 50

    (31) expr -> IF . expr THEN expr ELSE expr FI
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 74

state 51

    (38) expr -> ( . expr )
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 75

state 52

    (39) expr -> ~ . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 76

state 53

    (40) expr -> ISVOID . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 77

state 54

    (41) expr -> NOT . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 78

state 55

    (14) Metodo -> OBJECTID ( formales ) : TYPEID . { expr }
    {               shift and go to state 79


state 56

    (15) Metodo -> OBJECTID ( ) : TYPEID { . expr }
    (16) Metodo -> OBJECTID ( ) : TYPEID { . }
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    }               shift and go to state 81
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 80

state 57

    (34) expr -> OBJECTID ( . )
    (35) expr -> OBJECTID ( . lista_argumentos )
    (52) lista_argumentos -> . expr , lista_argumentos
    (53) lista_argumentos -> . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    )               shift and go to state 82
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    lista_argumentos               shift and go to state 83
    expr                           shift and go to state 84

state 58

    (49) expr -> OBJECTID ASSIGN . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 85

state 59

    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    OBJECTID        shift and go to state 86


state 60

    (36) expr -> expr @ . TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr @ . TYPEID . OBJECTID ( )
    TYPEID          shift and go to state 87


state 61

    (42) expr -> expr = . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 88

state 62

    (43) expr -> expr LE . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 89

state 63

    (44) expr -> expr < . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 90

state 64

    (45) expr -> expr / . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 91

state 65

    (46) expr -> expr * . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 92

state 66

    (47) expr -> expr - . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 93

state 67

    (48) expr -> expr + . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 94

state 68

    (20) expr -> { bloque . }
    (61) bloque -> bloque . error ;
    (62) bloque -> bloque . expr ;
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    }               shift and go to state 95
    error           shift and go to state 96
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 97

state 69

    (25) expr -> { expr . }
    (63) bloque -> expr . ;
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    }               shift and go to state 98
    ;               shift and go to state 99
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 70

    (26) expr -> NEW TYPEID .
    .               reduce using rule 26 (expr -> NEW TYPEID .)
    @               reduce using rule 26 (expr -> NEW TYPEID .)
    =               reduce using rule 26 (expr -> NEW TYPEID .)
    LE              reduce using rule 26 (expr -> NEW TYPEID .)
    <               reduce using rule 26 (expr -> NEW TYPEID .)
    /               reduce using rule 26 (expr -> NEW TYPEID .)
    *               reduce using rule 26 (expr -> NEW TYPEID .)
    -               reduce using rule 26 (expr -> NEW TYPEID .)
    +               reduce using rule 26 (expr -> NEW TYPEID .)
    ;               reduce using rule 26 (expr -> NEW TYPEID .)
    }               reduce using rule 26 (expr -> NEW TYPEID .)
    OF              reduce using rule 26 (expr -> NEW TYPEID .)
    LOOP            reduce using rule 26 (expr -> NEW TYPEID .)
    THEN            reduce using rule 26 (expr -> NEW TYPEID .)
    )               reduce using rule 26 (expr -> NEW TYPEID .)
    ,               reduce using rule 26 (expr -> NEW TYPEID .)
    POOL            reduce using rule 26 (expr -> NEW TYPEID .)
    ELSE            reduce using rule 26 (expr -> NEW TYPEID .)
    IN              reduce using rule 26 (expr -> NEW TYPEID .)
    FI              reduce using rule 26 (expr -> NEW TYPEID .)


state 71

    (27) expr -> CASE expr . OF cuerpo_case ESAC
    (28) expr -> CASE expr . OF ESAC
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    OF              shift and go to state 100
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 72

    (29) expr -> LET OBJECTID . : TYPEID opcionales lista_inicia IN expr
    :               shift and go to state 101


state 73

    (30) expr -> WHILE expr . LOOP expr POOL
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    LOOP            shift and go to state 102
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 74

    (31) expr -> IF expr . THEN expr ELSE expr FI
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    THEN            shift and go to state 103
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 75

    (38) expr -> ( expr . )
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    )               shift and go to state 104
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 76

    (39) expr -> ~ expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 39 (expr -> ~ expr .)
    }               reduce using rule 39 (expr -> ~ expr .)
    OF              reduce using rule 39 (expr -> ~ expr .)
    LOOP            reduce using rule 39 (expr -> ~ expr .)
    THEN            reduce using rule 39 (expr -> ~ expr .)
    )               reduce using rule 39 (expr -> ~ expr .)
    ,               reduce using rule 39 (expr -> ~ expr .)
    POOL            reduce using rule 39 (expr -> ~ expr .)
    ELSE            reduce using rule 39 (expr -> ~ expr .)
    IN              reduce using rule 39 (expr -> ~ expr .)
    FI              reduce using rule 39 (expr -> ~ expr .)
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 77

    (40) expr -> ISVOID expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    .               reduce using rule 40 (expr -> ISVOID expr .)
    @               reduce using rule 40 (expr -> ISVOID expr .)
    =               reduce using rule 40 (expr -> ISVOID expr .)
    LE              reduce using rule 40 (expr -> ISVOID expr .)
    <               reduce using rule 40 (expr -> ISVOID expr .)
    /               reduce using rule 40 (expr -> ISVOID expr .)
    *               reduce using rule 40 (expr -> ISVOID expr .)
    -               reduce using rule 40 (expr -> ISVOID expr .)
    +               reduce using rule 40 (expr -> ISVOID expr .)
    ;               reduce using rule 40 (expr -> ISVOID expr .)
    }               reduce using rule 40 (expr -> ISVOID expr .)
    OF              reduce using rule 40 (expr -> ISVOID expr .)
    LOOP            reduce using rule 40 (expr -> ISVOID expr .)
    THEN            reduce using rule 40 (expr -> ISVOID expr .)
    )               reduce using rule 40 (expr -> ISVOID expr .)
    ,               reduce using rule 40 (expr -> ISVOID expr .)
    POOL            reduce using rule 40 (expr -> ISVOID expr .)
    ELSE            reduce using rule 40 (expr -> ISVOID expr .)
    IN              reduce using rule 40 (expr -> ISVOID expr .)
    FI              reduce using rule 40 (expr -> ISVOID expr .)


state 78

    (41) expr -> NOT expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    .               reduce using rule 41 (expr -> NOT expr .)
    @               reduce using rule 41 (expr -> NOT expr .)
    =               reduce using rule 41 (expr -> NOT expr .)
    LE              reduce using rule 41 (expr -> NOT expr .)
    <               reduce using rule 41 (expr -> NOT expr .)
    ;               reduce using rule 41 (expr -> NOT expr .)
    }               reduce using rule 41 (expr -> NOT expr .)
    OF              reduce using rule 41 (expr -> NOT expr .)
    LOOP            reduce using rule 41 (expr -> NOT expr .)
    THEN            reduce using rule 41 (expr -> NOT expr .)
    )               reduce using rule 41 (expr -> NOT expr .)
    ,               reduce using rule 41 (expr -> NOT expr .)
    POOL            reduce using rule 41 (expr -> NOT expr .)
    ELSE            reduce using rule 41 (expr -> NOT expr .)
    IN              reduce using rule 41 (expr -> NOT expr .)
    FI              reduce using rule 41 (expr -> NOT expr .)
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 79

    (14) Metodo -> OBJECTID ( formales ) : TYPEID { . expr }
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 105

state 80

    (15) Metodo -> OBJECTID ( ) : TYPEID { expr . }
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    }               shift and go to state 106
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 81

    (16) Metodo -> OBJECTID ( ) : TYPEID { } .
    ;               reduce using rule 16 (Metodo -> OBJECTID ( ) : TYPEID { } .)


state 82

    (34) expr -> OBJECTID ( ) .
    .               reduce using rule 34 (expr -> OBJECTID ( ) .)
    @               reduce using rule 34 (expr -> OBJECTID ( ) .)
    =               reduce using rule 34 (expr -> OBJECTID ( ) .)
    LE              reduce using rule 34 (expr -> OBJECTID ( ) .)
    <               reduce using rule 34 (expr -> OBJECTID ( ) .)
    /               reduce using rule 34 (expr -> OBJECTID ( ) .)
    *               reduce using rule 34 (expr -> OBJECTID ( ) .)
    -               reduce using rule 34 (expr -> OBJECTID ( ) .)
    +               reduce using rule 34 (expr -> OBJECTID ( ) .)
    ;               reduce using rule 34 (expr -> OBJECTID ( ) .)
    }               reduce using rule 34 (expr -> OBJECTID ( ) .)
    OF              reduce using rule 34 (expr -> OBJECTID ( ) .)
    LOOP            reduce using rule 34 (expr -> OBJECTID ( ) .)
    THEN            reduce using rule 34 (expr -> OBJECTID ( ) .)
    )               reduce using rule 34 (expr -> OBJECTID ( ) .)
    ,               reduce using rule 34 (expr -> OBJECTID ( ) .)
    POOL            reduce using rule 34 (expr -> OBJECTID ( ) .)
    ELSE            reduce using rule 34 (expr -> OBJECTID ( ) .)
    IN              reduce using rule 34 (expr -> OBJECTID ( ) .)
    FI              reduce using rule 34 (expr -> OBJECTID ( ) .)


state 83

    (35) expr -> OBJECTID ( lista_argumentos . )
    )               shift and go to state 107


state 84

    (52) lista_argumentos -> expr . , lista_argumentos
    (53) lista_argumentos -> expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    ,               shift and go to state 108
    )               reduce using rule 53 (lista_argumentos -> expr .)
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 85

    (49) expr -> OBJECTID ASSIGN expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    .               reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    @               reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    =               reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    LE              reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    <               reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    ;               reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    }               reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    OF              reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    LOOP            reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    THEN            reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    )               reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    ,               reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    POOL            reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    ELSE            reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    IN              reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    FI              reduce using rule 49 (expr -> OBJECTID ASSIGN expr .)
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 86

    (32) expr -> expr . OBJECTID . ( lista_argumentos )
    (33) expr -> expr . OBJECTID . ( )
    (               shift and go to state 109


state 87

    (36) expr -> expr @ TYPEID . . OBJECTID ( argumentos )
    (37) expr -> expr @ TYPEID . . OBJECTID ( )
    .               shift and go to state 110


state 88

    (42) expr -> expr = expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 42 (expr -> expr = expr .)
    }               reduce using rule 42 (expr -> expr = expr .)
    OF              reduce using rule 42 (expr -> expr = expr .)
    LOOP            reduce using rule 42 (expr -> expr = expr .)
    THEN            reduce using rule 42 (expr -> expr = expr .)
    )               reduce using rule 42 (expr -> expr = expr .)
    ,               reduce using rule 42 (expr -> expr = expr .)
    POOL            reduce using rule 42 (expr -> expr = expr .)
    ELSE            reduce using rule 42 (expr -> expr = expr .)
    IN              reduce using rule 42 (expr -> expr = expr .)
    FI              reduce using rule 42 (expr -> expr = expr .)
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 89

    (43) expr -> expr LE expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 43 (expr -> expr LE expr .)
    }               reduce using rule 43 (expr -> expr LE expr .)
    OF              reduce using rule 43 (expr -> expr LE expr .)
    LOOP            reduce using rule 43 (expr -> expr LE expr .)
    THEN            reduce using rule 43 (expr -> expr LE expr .)
    )               reduce using rule 43 (expr -> expr LE expr .)
    ,               reduce using rule 43 (expr -> expr LE expr .)
    POOL            reduce using rule 43 (expr -> expr LE expr .)
    ELSE            reduce using rule 43 (expr -> expr LE expr .)
    IN              reduce using rule 43 (expr -> expr LE expr .)
    FI              reduce using rule 43 (expr -> expr LE expr .)
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 90

    (44) expr -> expr < expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 44 (expr -> expr < expr .)
    }               reduce using rule 44 (expr -> expr < expr .)
    OF              reduce using rule 44 (expr -> expr < expr .)
    LOOP            reduce using rule 44 (expr -> expr < expr .)
    THEN            reduce using rule 44 (expr -> expr < expr .)
    )               reduce using rule 44 (expr -> expr < expr .)
    ,               reduce using rule 44 (expr -> expr < expr .)
    POOL            reduce using rule 44 (expr -> expr < expr .)
    ELSE            reduce using rule 44 (expr -> expr < expr .)
    IN              reduce using rule 44 (expr -> expr < expr .)
    FI              reduce using rule 44 (expr -> expr < expr .)
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 91

    (45) expr -> expr / expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    .               reduce using rule 45 (expr -> expr / expr .)
    @               reduce using rule 45 (expr -> expr / expr .)
    =               reduce using rule 45 (expr -> expr / expr .)
    LE              reduce using rule 45 (expr -> expr / expr .)
    <               reduce using rule 45 (expr -> expr / expr .)
    /               reduce using rule 45 (expr -> expr / expr .)
    *               reduce using rule 45 (expr -> expr / expr .)
    -               reduce using rule 45 (expr -> expr / expr .)
    +               reduce using rule 45 (expr -> expr / expr .)
    ;               reduce using rule 45 (expr -> expr / expr .)
    }               reduce using rule 45 (expr -> expr / expr .)
    OF              reduce using rule 45 (expr -> expr / expr .)
    LOOP            reduce using rule 45 (expr -> expr / expr .)
    THEN            reduce using rule 45 (expr -> expr / expr .)
    )               reduce using rule 45 (expr -> expr / expr .)
    ,               reduce using rule 45 (expr -> expr / expr .)
    POOL            reduce using rule 45 (expr -> expr / expr .)
    ELSE            reduce using rule 45 (expr -> expr / expr .)
    IN              reduce using rule 45 (expr -> expr / expr .)
    FI              reduce using rule 45 (expr -> expr / expr .)


state 92

    (46) expr -> expr * expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    .               reduce using rule 46 (expr -> expr * expr .)
    @               reduce using rule 46 (expr -> expr * expr .)
    =               reduce using rule 46 (expr -> expr * expr .)
    LE              reduce using rule 46 (expr -> expr * expr .)
    <               reduce using rule 46 (expr -> expr * expr .)
    /               reduce using rule 46 (expr -> expr * expr .)
    *               reduce using rule 46 (expr -> expr * expr .)
    -               reduce using rule 46 (expr -> expr * expr .)
    +               reduce using rule 46 (expr -> expr * expr .)
    ;               reduce using rule 46 (expr -> expr * expr .)
    }               reduce using rule 46 (expr -> expr * expr .)
    OF              reduce using rule 46 (expr -> expr * expr .)
    LOOP            reduce using rule 46 (expr -> expr * expr .)
    THEN            reduce using rule 46 (expr -> expr * expr .)
    )               reduce using rule 46 (expr -> expr * expr .)
    ,               reduce using rule 46 (expr -> expr * expr .)
    POOL            reduce using rule 46 (expr -> expr * expr .)
    ELSE            reduce using rule 46 (expr -> expr * expr .)
    IN              reduce using rule 46 (expr -> expr * expr .)
    FI              reduce using rule 46 (expr -> expr * expr .)


state 93

    (47) expr -> expr - expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    .               reduce using rule 47 (expr -> expr - expr .)
    @               reduce using rule 47 (expr -> expr - expr .)
    =               reduce using rule 47 (expr -> expr - expr .)
    LE              reduce using rule 47 (expr -> expr - expr .)
    <               reduce using rule 47 (expr -> expr - expr .)
    -               reduce using rule 47 (expr -> expr - expr .)
    +               reduce using rule 47 (expr -> expr - expr .)
    ;               reduce using rule 47 (expr -> expr - expr .)
    }               reduce using rule 47 (expr -> expr - expr .)
    OF              reduce using rule 47 (expr -> expr - expr .)
    LOOP            reduce using rule 47 (expr -> expr - expr .)
    THEN            reduce using rule 47 (expr -> expr - expr .)
    )               reduce using rule 47 (expr -> expr - expr .)
    ,               reduce using rule 47 (expr -> expr - expr .)
    POOL            reduce using rule 47 (expr -> expr - expr .)
    ELSE            reduce using rule 47 (expr -> expr - expr .)
    IN              reduce using rule 47 (expr -> expr - expr .)
    FI              reduce using rule 47 (expr -> expr - expr .)
    /               shift and go to state 64
    *               shift and go to state 65


state 94

    (48) expr -> expr + expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    .               reduce using rule 48 (expr -> expr + expr .)
    @               reduce using rule 48 (expr -> expr + expr .)
    =               reduce using rule 48 (expr -> expr + expr .)
    LE              reduce using rule 48 (expr -> expr + expr .)
    <               reduce using rule 48 (expr -> expr + expr .)
    -               reduce using rule 48 (expr -> expr + expr .)
    +               reduce using rule 48 (expr -> expr + expr .)
    ;               reduce using rule 48 (expr -> expr + expr .)
    }               reduce using rule 48 (expr -> expr + expr .)
    OF              reduce using rule 48 (expr -> expr + expr .)
    LOOP            reduce using rule 48 (expr -> expr + expr .)
    THEN            reduce using rule 48 (expr -> expr + expr .)
    )               reduce using rule 48 (expr -> expr + expr .)
    ,               reduce using rule 48 (expr -> expr + expr .)
    POOL            reduce using rule 48 (expr -> expr + expr .)
    ELSE            reduce using rule 48 (expr -> expr + expr .)
    IN              reduce using rule 48 (expr -> expr + expr .)
    FI              reduce using rule 48 (expr -> expr + expr .)
    /               shift and go to state 64
    *               shift and go to state 65


state 95

    (20) expr -> { bloque } .
    .               reduce using rule 20 (expr -> { bloque } .)
    @               reduce using rule 20 (expr -> { bloque } .)
    =               reduce using rule 20 (expr -> { bloque } .)
    LE              reduce using rule 20 (expr -> { bloque } .)
    <               reduce using rule 20 (expr -> { bloque } .)
    /               reduce using rule 20 (expr -> { bloque } .)
    *               reduce using rule 20 (expr -> { bloque } .)
    -               reduce using rule 20 (expr -> { bloque } .)
    +               reduce using rule 20 (expr -> { bloque } .)
    ;               reduce using rule 20 (expr -> { bloque } .)
    }               reduce using rule 20 (expr -> { bloque } .)
    OF              reduce using rule 20 (expr -> { bloque } .)
    LOOP            reduce using rule 20 (expr -> { bloque } .)
    THEN            reduce using rule 20 (expr -> { bloque } .)
    )               reduce using rule 20 (expr -> { bloque } .)
    ,               reduce using rule 20 (expr -> { bloque } .)
    POOL            reduce using rule 20 (expr -> { bloque } .)
    ELSE            reduce using rule 20 (expr -> { bloque } .)
    IN              reduce using rule 20 (expr -> { bloque } .)
    FI              reduce using rule 20 (expr -> { bloque } .)


state 96

    (61) bloque -> bloque error . ;
    ;               shift and go to state 111


state 97

    (62) bloque -> bloque expr . ;
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    ;               shift and go to state 112
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 98

    (25) expr -> { expr } .
    .               reduce using rule 25 (expr -> { expr } .)
    @               reduce using rule 25 (expr -> { expr } .)
    =               reduce using rule 25 (expr -> { expr } .)
    LE              reduce using rule 25 (expr -> { expr } .)
    <               reduce using rule 25 (expr -> { expr } .)
    /               reduce using rule 25 (expr -> { expr } .)
    *               reduce using rule 25 (expr -> { expr } .)
    -               reduce using rule 25 (expr -> { expr } .)
    +               reduce using rule 25 (expr -> { expr } .)
    ;               reduce using rule 25 (expr -> { expr } .)
    }               reduce using rule 25 (expr -> { expr } .)
    OF              reduce using rule 25 (expr -> { expr } .)
    LOOP            reduce using rule 25 (expr -> { expr } .)
    THEN            reduce using rule 25 (expr -> { expr } .)
    )               reduce using rule 25 (expr -> { expr } .)
    ,               reduce using rule 25 (expr -> { expr } .)
    POOL            reduce using rule 25 (expr -> { expr } .)
    ELSE            reduce using rule 25 (expr -> { expr } .)
    IN              reduce using rule 25 (expr -> { expr } .)
    FI              reduce using rule 25 (expr -> { expr } .)


state 99

    (63) bloque -> expr ; .
    }               reduce using rule 63 (bloque -> expr ; .)
    error           reduce using rule 63 (bloque -> expr ; .)
    {               reduce using rule 63 (bloque -> expr ; .)
    BOOL_CONST      reduce using rule 63 (bloque -> expr ; .)
    STR_CONST       reduce using rule 63 (bloque -> expr ; .)
    INT_CONST       reduce using rule 63 (bloque -> expr ; .)
    OBJECTID        reduce using rule 63 (bloque -> expr ; .)
    NEW             reduce using rule 63 (bloque -> expr ; .)
    CASE            reduce using rule 63 (bloque -> expr ; .)
    LET             reduce using rule 63 (bloque -> expr ; .)
    WHILE           reduce using rule 63 (bloque -> expr ; .)
    IF              reduce using rule 63 (bloque -> expr ; .)
    (               reduce using rule 63 (bloque -> expr ; .)
    ~               reduce using rule 63 (bloque -> expr ; .)
    ISVOID          reduce using rule 63 (bloque -> expr ; .)
    NOT             reduce using rule 63 (bloque -> expr ; .)


state 100

    (27) expr -> CASE expr OF . cuerpo_case ESAC
    (28) expr -> CASE expr OF . ESAC
    (58) cuerpo_case -> . cuerpo_case ;
    (59) cuerpo_case -> . cuerpo_case cuerpo_case ;
    (60) cuerpo_case -> . OBJECTID : TYPEID DARROW expr ;
    ESAC            shift and go to state 114
    OBJECTID        shift and go to state 115

    cuerpo_case                    shift and go to state 113

state 101

    (29) expr -> LET OBJECTID : . TYPEID opcionales lista_inicia IN expr
    TYPEID          shift and go to state 116


state 102

    (30) expr -> WHILE expr LOOP . expr POOL
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 117

state 103

    (31) expr -> IF expr THEN . expr ELSE expr FI
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 118

state 104

    (38) expr -> ( expr ) .
    .               reduce using rule 38 (expr -> ( expr ) .)
    @               reduce using rule 38 (expr -> ( expr ) .)
    =               reduce using rule 38 (expr -> ( expr ) .)
    LE              reduce using rule 38 (expr -> ( expr ) .)
    <               reduce using rule 38 (expr -> ( expr ) .)
    /               reduce using rule 38 (expr -> ( expr ) .)
    *               reduce using rule 38 (expr -> ( expr ) .)
    -               reduce using rule 38 (expr -> ( expr ) .)
    +               reduce using rule 38 (expr -> ( expr ) .)
    ;               reduce using rule 38 (expr -> ( expr ) .)
    }               reduce using rule 38 (expr -> ( expr ) .)
    OF              reduce using rule 38 (expr -> ( expr ) .)
    LOOP            reduce using rule 38 (expr -> ( expr ) .)
    THEN            reduce using rule 38 (expr -> ( expr ) .)
    )               reduce using rule 38 (expr -> ( expr ) .)
    ,               reduce using rule 38 (expr -> ( expr ) .)
    POOL            reduce using rule 38 (expr -> ( expr ) .)
    ELSE            reduce using rule 38 (expr -> ( expr ) .)
    IN              reduce using rule 38 (expr -> ( expr ) .)
    FI              reduce using rule 38 (expr -> ( expr ) .)


state 105

    (14) Metodo -> OBJECTID ( formales ) : TYPEID { expr . }
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    }               shift and go to state 119
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 106

    (15) Metodo -> OBJECTID ( ) : TYPEID { expr } .
    ;               reduce using rule 15 (Metodo -> OBJECTID ( ) : TYPEID { expr } .)


state 107

    (35) expr -> OBJECTID ( lista_argumentos ) .
    .               reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    @               reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    =               reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    LE              reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    <               reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    /               reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    *               reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    -               reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    +               reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    ;               reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    }               reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    OF              reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    LOOP            reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    THEN            reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    )               reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    ,               reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    POOL            reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    ELSE            reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    IN              reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)
    FI              reduce using rule 35 (expr -> OBJECTID ( lista_argumentos ) .)


state 108

    (52) lista_argumentos -> expr , . lista_argumentos
    (52) lista_argumentos -> . expr , lista_argumentos
    (53) lista_argumentos -> . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 84
    lista_argumentos               shift and go to state 120

state 109

    (32) expr -> expr . OBJECTID ( . lista_argumentos )
    (33) expr -> expr . OBJECTID ( . )
    (52) lista_argumentos -> . expr , lista_argumentos
    (53) lista_argumentos -> . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    )               shift and go to state 122
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 84
    lista_argumentos               shift and go to state 121

state 110

    (36) expr -> expr @ TYPEID . . OBJECTID ( argumentos )
    (37) expr -> expr @ TYPEID . . OBJECTID ( )
    OBJECTID        shift and go to state 123


state 111

    (61) bloque -> bloque error ; .
    }               reduce using rule 61 (bloque -> bloque error ; .)
    error           reduce using rule 61 (bloque -> bloque error ; .)
    {               reduce using rule 61 (bloque -> bloque error ; .)
    BOOL_CONST      reduce using rule 61 (bloque -> bloque error ; .)
    STR_CONST       reduce using rule 61 (bloque -> bloque error ; .)
    INT_CONST       reduce using rule 61 (bloque -> bloque error ; .)
    OBJECTID        reduce using rule 61 (bloque -> bloque error ; .)
    NEW             reduce using rule 61 (bloque -> bloque error ; .)
    CASE            reduce using rule 61 (bloque -> bloque error ; .)
    LET             reduce using rule 61 (bloque -> bloque error ; .)
    WHILE           reduce using rule 61 (bloque -> bloque error ; .)
    IF              reduce using rule 61 (bloque -> bloque error ; .)
    (               reduce using rule 61 (bloque -> bloque error ; .)
    ~               reduce using rule 61 (bloque -> bloque error ; .)
    ISVOID          reduce using rule 61 (bloque -> bloque error ; .)
    NOT             reduce using rule 61 (bloque -> bloque error ; .)


state 112

    (62) bloque -> bloque expr ; .
    }               reduce using rule 62 (bloque -> bloque expr ; .)
    error           reduce using rule 62 (bloque -> bloque expr ; .)
    {               reduce using rule 62 (bloque -> bloque expr ; .)
    BOOL_CONST      reduce using rule 62 (bloque -> bloque expr ; .)
    STR_CONST       reduce using rule 62 (bloque -> bloque expr ; .)
    INT_CONST       reduce using rule 62 (bloque -> bloque expr ; .)
    OBJECTID        reduce using rule 62 (bloque -> bloque expr ; .)
    NEW             reduce using rule 62 (bloque -> bloque expr ; .)
    CASE            reduce using rule 62 (bloque -> bloque expr ; .)
    LET             reduce using rule 62 (bloque -> bloque expr ; .)
    WHILE           reduce using rule 62 (bloque -> bloque expr ; .)
    IF              reduce using rule 62 (bloque -> bloque expr ; .)
    (               reduce using rule 62 (bloque -> bloque expr ; .)
    ~               reduce using rule 62 (bloque -> bloque expr ; .)
    ISVOID          reduce using rule 62 (bloque -> bloque expr ; .)
    NOT             reduce using rule 62 (bloque -> bloque expr ; .)


state 113

    (27) expr -> CASE expr OF cuerpo_case . ESAC
    (58) cuerpo_case -> cuerpo_case . ;
    (59) cuerpo_case -> cuerpo_case . cuerpo_case ;
    (58) cuerpo_case -> . cuerpo_case ;
    (59) cuerpo_case -> . cuerpo_case cuerpo_case ;
    (60) cuerpo_case -> . OBJECTID : TYPEID DARROW expr ;
    ESAC            shift and go to state 125
    ;               shift and go to state 126
    OBJECTID        shift and go to state 115

    cuerpo_case                    shift and go to state 124

state 114

    (28) expr -> CASE expr OF ESAC .
    .               reduce using rule 28 (expr -> CASE expr OF ESAC .)
    @               reduce using rule 28 (expr -> CASE expr OF ESAC .)
    =               reduce using rule 28 (expr -> CASE expr OF ESAC .)
    LE              reduce using rule 28 (expr -> CASE expr OF ESAC .)
    <               reduce using rule 28 (expr -> CASE expr OF ESAC .)
    /               reduce using rule 28 (expr -> CASE expr OF ESAC .)
    *               reduce using rule 28 (expr -> CASE expr OF ESAC .)
    -               reduce using rule 28 (expr -> CASE expr OF ESAC .)
    +               reduce using rule 28 (expr -> CASE expr OF ESAC .)
    ;               reduce using rule 28 (expr -> CASE expr OF ESAC .)
    }               reduce using rule 28 (expr -> CASE expr OF ESAC .)
    OF              reduce using rule 28 (expr -> CASE expr OF ESAC .)
    LOOP            reduce using rule 28 (expr -> CASE expr OF ESAC .)
    THEN            reduce using rule 28 (expr -> CASE expr OF ESAC .)
    )               reduce using rule 28 (expr -> CASE expr OF ESAC .)
    ,               reduce using rule 28 (expr -> CASE expr OF ESAC .)
    POOL            reduce using rule 28 (expr -> CASE expr OF ESAC .)
    ELSE            reduce using rule 28 (expr -> CASE expr OF ESAC .)
    IN              reduce using rule 28 (expr -> CASE expr OF ESAC .)
    FI              reduce using rule 28 (expr -> CASE expr OF ESAC .)


state 115

    (60) cuerpo_case -> OBJECTID . : TYPEID DARROW expr ;
    :               shift and go to state 127


state 116

    (29) expr -> LET OBJECTID : TYPEID . opcionales lista_inicia IN expr
    (56) opcionales -> .
    (57) opcionales -> . ASSIGN expr
    IN              reduce using rule 56 (opcionales -> .)
    ,               reduce using rule 56 (opcionales -> .)
    ASSIGN          shift and go to state 129

    opcionales                     shift and go to state 128

state 117

    (30) expr -> WHILE expr LOOP expr . POOL
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    POOL            shift and go to state 130
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 118

    (31) expr -> IF expr THEN expr . ELSE expr FI
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    ELSE            shift and go to state 131
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 119

    (14) Metodo -> OBJECTID ( formales ) : TYPEID { expr } .
    ;               reduce using rule 14 (Metodo -> OBJECTID ( formales ) : TYPEID { expr } .)


state 120

    (52) lista_argumentos -> expr , lista_argumentos .
    )               reduce using rule 52 (lista_argumentos -> expr , lista_argumentos .)


state 121

    (32) expr -> expr . OBJECTID ( lista_argumentos . )
    )               shift and go to state 132


state 122

    (33) expr -> expr . OBJECTID ( ) .
    .               reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    @               reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    =               reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    LE              reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    <               reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    /               reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    *               reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    -               reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    +               reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    ;               reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    }               reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    OF              reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    LOOP            reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    THEN            reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    )               reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    ,               reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    POOL            reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    ELSE            reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    IN              reduce using rule 33 (expr -> expr . OBJECTID ( ) .)
    FI              reduce using rule 33 (expr -> expr . OBJECTID ( ) .)


state 123

    (36) expr -> expr @ TYPEID . OBJECTID . ( argumentos )
    (37) expr -> expr @ TYPEID . OBJECTID . ( )
    (               shift and go to state 133


state 124

    (59) cuerpo_case -> cuerpo_case cuerpo_case . ;
    (58) cuerpo_case -> cuerpo_case . ;
    (59) cuerpo_case -> cuerpo_case . cuerpo_case ;
    (58) cuerpo_case -> . cuerpo_case ;
    (59) cuerpo_case -> . cuerpo_case cuerpo_case ;
    (60) cuerpo_case -> . OBJECTID : TYPEID DARROW expr ;
    ;               shift and go to state 134
    OBJECTID        shift and go to state 115

    cuerpo_case                    shift and go to state 124

state 125

    (27) expr -> CASE expr OF cuerpo_case ESAC .
    .               reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    @               reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    =               reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    LE              reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    <               reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    /               reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    *               reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    -               reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    +               reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    ;               reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    }               reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    OF              reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    LOOP            reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    THEN            reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    )               reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    ,               reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    POOL            reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    ELSE            reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    IN              reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)
    FI              reduce using rule 27 (expr -> CASE expr OF cuerpo_case ESAC .)


state 126

    (58) cuerpo_case -> cuerpo_case ; .
    ESAC            reduce using rule 58 (cuerpo_case -> cuerpo_case ; .)
    ;               reduce using rule 58 (cuerpo_case -> cuerpo_case ; .)
    OBJECTID        reduce using rule 58 (cuerpo_case -> cuerpo_case ; .)


state 127

    (60) cuerpo_case -> OBJECTID : . TYPEID DARROW expr ;
    TYPEID          shift and go to state 135


state 128

    (29) expr -> LET OBJECTID : TYPEID opcionales . lista_inicia IN expr
    (54) lista_inicia -> . lista_inicia , OBJECTID : TYPEID opcionales
    (55) lista_inicia -> .
    IN              reduce using rule 55 (lista_inicia -> .)
    ,               reduce using rule 55 (lista_inicia -> .)

    lista_inicia                   shift and go to state 136

state 129

    (57) opcionales -> ASSIGN . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 137

state 130

    (30) expr -> WHILE expr LOOP expr POOL .
    .               reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    @               reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    =               reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    LE              reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    <               reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    /               reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    *               reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    -               reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    +               reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    ;               reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    }               reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    OF              reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    LOOP            reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    THEN            reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    )               reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    ,               reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    POOL            reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    ELSE            reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    IN              reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)
    FI              reduce using rule 30 (expr -> WHILE expr LOOP expr POOL .)


state 131

    (31) expr -> IF expr THEN expr ELSE . expr FI
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 138

state 132

    (32) expr -> expr . OBJECTID ( lista_argumentos ) .
    .               reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    @               reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    =               reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    LE              reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    <               reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    /               reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    *               reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    -               reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    +               reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    ;               reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    }               reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    OF              reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    LOOP            reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    THEN            reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    )               reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    ,               reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    POOL            reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    ELSE            reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    IN              reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)
    FI              reduce using rule 32 (expr -> expr . OBJECTID ( lista_argumentos ) .)


state 133

    (36) expr -> expr @ TYPEID . OBJECTID ( . argumentos )
    (37) expr -> expr @ TYPEID . OBJECTID ( . )
    (50) argumentos -> . expr , argumentos
    (51) argumentos -> . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    )               shift and go to state 141
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 139
    argumentos                     shift and go to state 140

state 134

    (59) cuerpo_case -> cuerpo_case cuerpo_case ; .
    (58) cuerpo_case -> cuerpo_case ; .
  ! reduce/reduce conflict for ; resolved using rule 59 (cuerpo_case -> cuerpo_case cuerpo_case ; .)
  ! reduce/reduce conflict for OBJECTID resolved using rule 59 (cuerpo_case -> cuerpo_case cuerpo_case ; .)
    ESAC            reduce using rule 59 (cuerpo_case -> cuerpo_case cuerpo_case ; .)
    ;               reduce using rule 59 (cuerpo_case -> cuerpo_case cuerpo_case ; .)
    OBJECTID        reduce using rule 59 (cuerpo_case -> cuerpo_case cuerpo_case ; .)


state 135

    (60) cuerpo_case -> OBJECTID : TYPEID . DARROW expr ;
    DARROW          shift and go to state 142


state 136

    (29) expr -> LET OBJECTID : TYPEID opcionales lista_inicia . IN expr
    (54) lista_inicia -> lista_inicia . , OBJECTID : TYPEID opcionales
    IN              shift and go to state 143
    ,               shift and go to state 144


state 137

    (57) opcionales -> ASSIGN expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    IN              reduce using rule 57 (opcionales -> ASSIGN expr .)
    ,               reduce using rule 57 (opcionales -> ASSIGN expr .)
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 138

    (31) expr -> IF expr THEN expr ELSE expr . FI
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    FI              shift and go to state 145
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 139

    (50) argumentos -> expr . , argumentos
    (51) argumentos -> expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    ,               shift and go to state 146
    )               reduce using rule 51 (argumentos -> expr .)
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 140

    (36) expr -> expr @ TYPEID . OBJECTID ( argumentos . )
    )               shift and go to state 147


state 141

    (37) expr -> expr @ TYPEID . OBJECTID ( ) .
    .               reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    @               reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    =               reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LE              reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    <               reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    /               reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    *               reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    -               reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    +               reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ;               reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    }               reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    OF              reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LOOP            reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    THEN            reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    )               reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ,               reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    POOL            reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ELSE            reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    IN              reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    FI              reduce using rule 37 (expr -> expr @ TYPEID . OBJECTID ( ) .)


state 142

    (60) cuerpo_case -> OBJECTID : TYPEID DARROW . expr ;
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 148

state 143

    (29) expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 149

state 144

    (54) lista_inicia -> lista_inicia , . OBJECTID : TYPEID opcionales
    OBJECTID        shift and go to state 150


state 145

    (31) expr -> IF expr THEN expr ELSE expr FI .
    .               reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    @               reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    =               reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    LE              reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    <               reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    /               reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    *               reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    -               reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    +               reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    ;               reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    }               reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    OF              reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    LOOP            reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    THEN            reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    )               reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    ,               reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    POOL            reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    ELSE            reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    IN              reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)
    FI              reduce using rule 31 (expr -> IF expr THEN expr ELSE expr FI .)


state 146

    (50) argumentos -> expr , . argumentos
    (50) argumentos -> . expr , argumentos
    (51) argumentos -> . expr
    (20) expr -> . { bloque }
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . { expr }
    (26) expr -> . NEW TYPEID
    (27) expr -> . CASE expr OF cuerpo_case ESAC
    (28) expr -> . CASE expr OF ESAC
    (29) expr -> . LET OBJECTID : TYPEID opcionales lista_inicia IN expr
    (30) expr -> . WHILE expr LOOP expr POOL
    (31) expr -> . IF expr THEN expr ELSE expr FI
    (32) expr -> . expr . OBJECTID ( lista_argumentos )
    (33) expr -> . expr . OBJECTID ( )
    (34) expr -> . OBJECTID ( )
    (35) expr -> . OBJECTID ( lista_argumentos )
    (36) expr -> . expr @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> . expr @ TYPEID . OBJECTID ( )
    (38) expr -> . ( expr )
    (39) expr -> . ~ expr
    (40) expr -> . ISVOID expr
    (41) expr -> . NOT expr
    (42) expr -> . expr = expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr < expr
    (45) expr -> . expr / expr
    (46) expr -> . expr * expr
    (47) expr -> . expr - expr
    (48) expr -> . expr + expr
    (49) expr -> . OBJECTID ASSIGN expr
    {               shift and go to state 42
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 40
    NEW             shift and go to state 46
    CASE            shift and go to state 47
    LET             shift and go to state 48
    WHILE           shift and go to state 49
    IF              shift and go to state 50
    (               shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 139
    argumentos                     shift and go to state 151

state 147

    (36) expr -> expr @ TYPEID . OBJECTID ( argumentos ) .
    .               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    @               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    =               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    LE              reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    <               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    /               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    *               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    -               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    +               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    ;               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    }               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    OF              reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    LOOP            reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    THEN            reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    )               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    ,               reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    POOL            reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    ELSE            reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    IN              reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)
    FI              reduce using rule 36 (expr -> expr @ TYPEID . OBJECTID ( argumentos ) .)


state 148

    (60) cuerpo_case -> OBJECTID : TYPEID DARROW expr . ;
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
    ;               shift and go to state 152
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 149

    (29) expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .
    (32) expr -> expr . . OBJECTID ( lista_argumentos )
    (33) expr -> expr . . OBJECTID ( )
    (36) expr -> expr . @ TYPEID . OBJECTID ( argumentos )
    (37) expr -> expr . @ TYPEID . OBJECTID ( )
    (42) expr -> expr . = expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . < expr
    (45) expr -> expr . / expr
    (46) expr -> expr . * expr
    (47) expr -> expr . - expr
    (48) expr -> expr . + expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 29 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    }               reduce using rule 29 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    OF              reduce using rule 29 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    LOOP            reduce using rule 29 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    THEN            reduce using rule 29 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    )               reduce using rule 29 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    ,               reduce using rule 29 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    POOL            reduce using rule 29 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    ELSE            reduce using rule 29 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    IN              reduce using rule 29 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    FI              reduce using rule 29 (expr -> LET OBJECTID : TYPEID opcionales lista_inicia IN expr .)
    .               shift and go to state 59
    @               shift and go to state 60
    =               shift and go to state 61
    LE              shift and go to state 62
    <               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67


state 150

    (54) lista_inicia -> lista_inicia , OBJECTID . : TYPEID opcionales
    :               shift and go to state 153


state 151

    (50) argumentos -> expr , argumentos .
    )               reduce using rule 50 (argumentos -> expr , argumentos .)


state 152

    (60) cuerpo_case -> OBJECTID : TYPEID DARROW expr ; .
    ESAC            reduce using rule 60 (cuerpo_case -> OBJECTID : TYPEID DARROW expr ; .)
    ;               reduce using rule 60 (cuerpo_case -> OBJECTID : TYPEID DARROW expr ; .)
    OBJECTID        reduce using rule 60 (cuerpo_case -> OBJECTID : TYPEID DARROW expr ; .)


state 153

    (54) lista_inicia -> lista_inicia , OBJECTID : . TYPEID opcionales
    TYPEID          shift and go to state 154


state 154

    (54) lista_inicia -> lista_inicia , OBJECTID : TYPEID . opcionales
    (56) opcionales -> .
    (57) opcionales -> . ASSIGN expr
    IN              reduce using rule 56 (opcionales -> .)
    ,               reduce using rule 56 (opcionales -> .)
    ASSIGN          shift and go to state 129

    opcionales                     shift and go to state 155

state 155

    (54) lista_inicia -> lista_inicia , OBJECTID : TYPEID opcionales .
    IN              reduce using rule 54 (lista_inicia -> lista_inicia , OBJECTID : TYPEID opcionales .)
    ,               reduce using rule 54 (lista_inicia -> lista_inicia , OBJECTID : TYPEID opcionales .)


Conflicts:

shift/reduce conflict for } in state 10 resolved as shift
shift/reduce conflict for } in state 14 resolved as shift
shift/reduce conflict for . in state 76 resolved as shift
shift/reduce conflict for @ in state 76 resolved as shift
shift/reduce conflict for = in state 76 resolved as shift
shift/reduce conflict for LE in state 76 resolved as shift
shift/reduce conflict for < in state 76 resolved as shift
shift/reduce conflict for / in state 76 resolved as shift
shift/reduce conflict for * in state 76 resolved as shift
shift/reduce conflict for - in state 76 resolved as shift
shift/reduce conflict for + in state 76 resolved as shift
shift/reduce conflict for . in state 88 resolved as shift
shift/reduce conflict for @ in state 88 resolved as shift
shift/reduce conflict for = in state 88 resolved as shift
shift/reduce conflict for LE in state 88 resolved as shift
shift/reduce conflict for < in state 88 resolved as shift
shift/reduce conflict for / in state 88 resolved as shift
shift/reduce conflict for * in state 88 resolved as shift
shift/reduce conflict for - in state 88 resolved as shift
shift/reduce conflict for + in state 88 resolved as shift
shift/reduce conflict for . in state 89 resolved as shift
shift/reduce conflict for @ in state 89 resolved as shift
shift/reduce conflict for = in state 89 resolved as shift
shift/reduce conflict for LE in state 89 resolved as shift
shift/reduce conflict for < in state 89 resolved as shift
shift/reduce conflict for / in state 89 resolved as shift
shift/reduce conflict for * in state 89 resolved as shift
shift/reduce conflict for - in state 89 resolved as shift
shift/reduce conflict for + in state 89 resolved as shift
shift/reduce conflict for . in state 90 resolved as shift
shift/reduce conflict for @ in state 90 resolved as shift
shift/reduce conflict for = in state 90 resolved as shift
shift/reduce conflict for LE in state 90 resolved as shift
shift/reduce conflict for < in state 90 resolved as shift
shift/reduce conflict for / in state 90 resolved as shift
shift/reduce conflict for * in state 90 resolved as shift
shift/reduce conflict for - in state 90 resolved as shift
shift/reduce conflict for + in state 90 resolved as shift
shift/reduce conflict for . in state 149 resolved as shift
shift/reduce conflict for @ in state 149 resolved as shift
shift/reduce conflict for = in state 149 resolved as shift
shift/reduce conflict for LE in state 149 resolved as shift
shift/reduce conflict for < in state 149 resolved as shift
shift/reduce conflict for / in state 149 resolved as shift
shift/reduce conflict for * in state 149 resolved as shift
shift/reduce conflict for - in state 149 resolved as shift
shift/reduce conflict for + in state 149 resolved as shift
reduce/reduce conflict in state 134 resolved using rule cuerpo_case -> cuerpo_case cuerpo_case ;
rejected rule (cuerpo_case -> cuerpo_case ;) in state 134