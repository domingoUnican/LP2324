Grammar:

Rule 0     S' -> Programa
Rule 1     Programa -> Programa Clase ;
Rule 2     Programa -> Clase ;
Rule 3     Clase -> CLASS TYPEID opcionalPadre { lista_atr_metodos }
Rule 4     opcionalPadre -> INHERITS TYPEID
Rule 5     opcionalPadre -> <empty>
Rule 6     lista_atr_metodos -> Metodo ; lista_atr_metodos
Rule 7     lista_atr_metodos -> error ; lista_atr_metodos
Rule 8     lista_atr_metodos -> Atributo ; lista_atr_metodos
Rule 9     lista_atr_metodos -> <empty>
Rule 10    Atributo -> OBJECTID : TYPEID opcional_expr
Rule 11    opcional_expr -> ASSIGN Expresion  [precedence=left, level=1]
Rule 12    opcional_expr -> <empty>
Rule 13    Metodo -> OBJECTID ( Formal lista_formal ) : TYPEID { error }
Rule 14    Metodo -> OBJECTID ( Formal error ) : TYPEID { Expresion }
Rule 15    Metodo -> OBJECTID ( Formal lista_formal ) : TYPEID { Expresion }
Rule 16    Metodo -> OBJECTID ( ) : TYPEID { Expresion }
Rule 17    lista_formal -> , Formal lista_formal
Rule 18    lista_formal -> <empty>
Rule 19    Formal -> OBJECTID : TYPEID
Rule 20    Expresion -> BOOL_CONST
Rule 21    Expresion -> STR_CONST
Rule 22    Expresion -> INT_CONST
Rule 23    Expresion -> OBJECTID
Rule 24    Expresion -> { error }
Rule 25    Expresion -> { lista_expr_pc }
Rule 26    Expresion -> NEW TYPEID
Rule 27    Expresion -> CASE error OF lista_expr_case ESAC
Rule 28    Expresion -> CASE Expresion OF lista_expr_case ESAC
Rule 29    Expresion -> LET lista_expr_let IN Expresion
Rule 30    Expresion -> WHILE Expresion LOOP Expresion POOL
Rule 31    Expresion -> IF Expresion THEN Expresion ELSE Expresion FI
Rule 32    Expresion -> OBJECTID ( )
Rule 33    Expresion -> OBJECTID ( Expresion lista_expr )
Rule 34    Expresion -> Expresion . OBJECTID ( )
Rule 35    Expresion -> Expresion . OBJECTID ( Expresion lista_expr )
Rule 36    Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
Rule 37    Expresion -> Expresion @ TYPEID . OBJECTID ( )
Rule 38    Expresion -> ~ Expresion  [precedence=left, level=4]
Rule 39    Expresion -> ISVOID Expresion  [precedence=left, level=6]
Rule 40    Expresion -> NOT Expresion  [precedence=left, level=1]
Rule 41    Expresion -> ( Expresion )
Rule 42    Expresion -> Expresion = Expresion  [precedence=nonassoc, level=2]
Rule 43    Expresion -> Expresion LE Expresion  [precedence=left, level=4]
Rule 44    Expresion -> Expresion < Expresion  [precedence=left, level=4]
Rule 45    Expresion -> Expresion - Expresion  [precedence=left, level=3]
Rule 46    Expresion -> Expresion + Expresion  [precedence=left, level=3]
Rule 47    Expresion -> Expresion / Expresion  [precedence=left, level=5]
Rule 48    Expresion -> Expresion * Expresion  [precedence=left, level=5]
Rule 49    Expresion -> OBJECTID ASSIGN Expresion  [precedence=left, level=1]
Rule 50    lista_expr -> , Expresion lista_expr
Rule 51    lista_expr -> <empty>
Rule 52    lista_expr_let -> OBJECTID : TYPEID lista_expr_let
Rule 53    lista_expr_let -> , OBJECTID : TYPEID lista_expr_let
Rule 54    lista_expr_let -> OBJECTID : TYPEID ASSIGN Expresion lista_expr_let  [precedence=left, level=1]
Rule 55    lista_expr_let -> , OBJECTID : TYPEID ASSIGN Expresion lista_expr_let  [precedence=left, level=1]
Rule 56    lista_expr_let -> <empty>
Rule 57    lista_expr_let -> OBJECTID : TYPEID ASSIGN error lista_expr_let
Rule 58    lista_expr_let -> , OBJECTID : TYPEID ASSIGN error lista_expr_let
Rule 59    lista_expr_case -> OBJECTID : TYPEID DARROW error ; lista_expr_case
Rule 60    lista_expr_case -> OBJECTID : TYPEID DARROW error ;
Rule 61    lista_expr_case -> OBJECTID : TYPEID DARROW Expresion ; lista_expr_case
Rule 62    lista_expr_case -> OBJECTID : TYPEID DARROW Expresion ;
Rule 63    lista_expr_pc -> lista_expr_pc error ;
Rule 64    lista_expr_pc -> lista_expr_pc Expresion ;
Rule 65    lista_expr_pc -> error ;
Rule 66    lista_expr_pc -> Expresion ;

Terminals, with rules where they appear:

(                    : 13 14 15 16 32 33 34 35 36 37 41
)                    : 13 14 15 16 32 33 34 35 36 37 41
*                    : 48
+                    : 46
,                    : 17 50 53 55 58
-                    : 45
.                    : 34 35 36 37
/                    : 47
:                    : 10 13 14 15 16 19 52 53 54 55 57 58 59 60 61 62
;                    : 1 2 6 7 8 59 60 61 62 63 64 65 66
<                    : 44
=                    : 42
@                    : 36 37
ASSIGN               : 11 49 54 55 57 58
BOOL_CONST           : 20
CASE                 : 27 28
CLASS                : 3
DARROW               : 59 60 61 62
ELSE                 : 31
ESAC                 : 27 28
FI                   : 31
IF                   : 31
IN                   : 29
INHERITS             : 4
INT_CONST            : 22
ISVOID               : 39
LE                   : 43
LET                  : 29
LOOP                 : 30
NEW                  : 26
NOT                  : 40
OBJECTID             : 10 13 14 15 16 19 23 32 33 34 35 36 37 49 52 53 54 55 57 58 59 60 61 62
OF                   : 27 28
POOL                 : 30
STR_CONST            : 21
THEN                 : 31
TYPEID               : 3 4 10 13 14 15 16 19 26 36 37 52 53 54 55 57 58 59 60 61 62
WHILE                : 30
error                : 7 13 14 24 27 57 58 59 60 63 65
{                    : 3 13 14 15 16 24 25
}                    : 3 13 14 15 16 24 25
~                    : 38

Nonterminals, with rules where they appear:

Atributo             : 8
Clase                : 1 2
Expresion            : 11 14 15 16 28 29 30 30 31 31 31 33 34 35 35 36 36 37 38 39 40 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 50 54 55 61 62 64 66
Formal               : 13 14 15 17
Metodo               : 6
Programa             : 1 0
lista_atr_metodos    : 3 6 7 8
lista_expr           : 33 35 36 50
lista_expr_case      : 27 28 59 61
lista_expr_let       : 29 52 53 54 55 57 58
lista_expr_pc        : 25 63 64
lista_formal         : 13 15 17
opcionalPadre        : 3
opcional_expr        : 10


state 0

    (0) S' -> . Programa
    (1) Programa -> . Programa Clase ;
    (2) Programa -> . Clase ;
    (3) Clase -> . CLASS TYPEID opcionalPadre { lista_atr_metodos }
    CLASS           shift and go to state 3

    Programa                       shift and go to state 1
    Clase                          shift and go to state 2

state 1

    (0) S' -> Programa .
    (1) Programa -> Programa . Clase ;
    (3) Clase -> . CLASS TYPEID opcionalPadre { lista_atr_metodos }
    CLASS           shift and go to state 3

    Clase                          shift and go to state 4

state 2

    (2) Programa -> Clase . ;
    ;               shift and go to state 5


state 3

    (3) Clase -> CLASS . TYPEID opcionalPadre { lista_atr_metodos }
    TYPEID          shift and go to state 6


state 4

    (1) Programa -> Programa Clase . ;
    ;               shift and go to state 7


state 5

    (2) Programa -> Clase ; .
    CLASS           reduce using rule 2 (Programa -> Clase ; .)
    $end            reduce using rule 2 (Programa -> Clase ; .)


state 6

    (3) Clase -> CLASS TYPEID . opcionalPadre { lista_atr_metodos }
    (4) opcionalPadre -> . INHERITS TYPEID
    (5) opcionalPadre -> .
    INHERITS        shift and go to state 9
    {               reduce using rule 5 (opcionalPadre -> .)

    opcionalPadre                  shift and go to state 8

state 7

    (1) Programa -> Programa Clase ; .
    CLASS           reduce using rule 1 (Programa -> Programa Clase ; .)
    $end            reduce using rule 1 (Programa -> Programa Clase ; .)


state 8

    (3) Clase -> CLASS TYPEID opcionalPadre . { lista_atr_metodos }
    {               shift and go to state 10


state 9

    (4) opcionalPadre -> INHERITS . TYPEID
    TYPEID          shift and go to state 11


state 10

    (3) Clase -> CLASS TYPEID opcionalPadre { . lista_atr_metodos }
    (6) lista_atr_metodos -> . Metodo ; lista_atr_metodos
    (7) lista_atr_metodos -> . error ; lista_atr_metodos
    (8) lista_atr_metodos -> . Atributo ; lista_atr_metodos
    (9) lista_atr_metodos -> .
    (13) Metodo -> . OBJECTID ( Formal lista_formal ) : TYPEID { error }
    (14) Metodo -> . OBJECTID ( Formal error ) : TYPEID { Expresion }
    (15) Metodo -> . OBJECTID ( Formal lista_formal ) : TYPEID { Expresion }
    (16) Metodo -> . OBJECTID ( ) : TYPEID { Expresion }
    (10) Atributo -> . OBJECTID : TYPEID opcional_expr
    error           shift and go to state 14
    }               reduce using rule 9 (lista_atr_metodos -> .)
    OBJECTID        shift and go to state 16

    lista_atr_metodos              shift and go to state 12
    Metodo                         shift and go to state 13
    Atributo                       shift and go to state 15

state 11

    (4) opcionalPadre -> INHERITS TYPEID .
    {               reduce using rule 4 (opcionalPadre -> INHERITS TYPEID .)


state 12

    (3) Clase -> CLASS TYPEID opcionalPadre { lista_atr_metodos . }
    }               shift and go to state 17


state 13

    (6) lista_atr_metodos -> Metodo . ; lista_atr_metodos
    ;               shift and go to state 18


state 14

    (7) lista_atr_metodos -> error . ; lista_atr_metodos
    ;               shift and go to state 19


state 15

    (8) lista_atr_metodos -> Atributo . ; lista_atr_metodos
    ;               shift and go to state 20


state 16

    (13) Metodo -> OBJECTID . ( Formal lista_formal ) : TYPEID { error }
    (14) Metodo -> OBJECTID . ( Formal error ) : TYPEID { Expresion }
    (15) Metodo -> OBJECTID . ( Formal lista_formal ) : TYPEID { Expresion }
    (16) Metodo -> OBJECTID . ( ) : TYPEID { Expresion }
    (10) Atributo -> OBJECTID . : TYPEID opcional_expr
    (               shift and go to state 21
    :               shift and go to state 22


state 17

    (3) Clase -> CLASS TYPEID opcionalPadre { lista_atr_metodos } .
    ;               reduce using rule 3 (Clase -> CLASS TYPEID opcionalPadre { lista_atr_metodos } .)


state 18

    (6) lista_atr_metodos -> Metodo ; . lista_atr_metodos
    (6) lista_atr_metodos -> . Metodo ; lista_atr_metodos
    (7) lista_atr_metodos -> . error ; lista_atr_metodos
    (8) lista_atr_metodos -> . Atributo ; lista_atr_metodos
    (9) lista_atr_metodos -> .
    (13) Metodo -> . OBJECTID ( Formal lista_formal ) : TYPEID { error }
    (14) Metodo -> . OBJECTID ( Formal error ) : TYPEID { Expresion }
    (15) Metodo -> . OBJECTID ( Formal lista_formal ) : TYPEID { Expresion }
    (16) Metodo -> . OBJECTID ( ) : TYPEID { Expresion }
    (10) Atributo -> . OBJECTID : TYPEID opcional_expr
    error           shift and go to state 14
    }               reduce using rule 9 (lista_atr_metodos -> .)
    OBJECTID        shift and go to state 16

    Metodo                         shift and go to state 13
    lista_atr_metodos              shift and go to state 23
    Atributo                       shift and go to state 15

state 19

    (7) lista_atr_metodos -> error ; . lista_atr_metodos
    (6) lista_atr_metodos -> . Metodo ; lista_atr_metodos
    (7) lista_atr_metodos -> . error ; lista_atr_metodos
    (8) lista_atr_metodos -> . Atributo ; lista_atr_metodos
    (9) lista_atr_metodos -> .
    (13) Metodo -> . OBJECTID ( Formal lista_formal ) : TYPEID { error }
    (14) Metodo -> . OBJECTID ( Formal error ) : TYPEID { Expresion }
    (15) Metodo -> . OBJECTID ( Formal lista_formal ) : TYPEID { Expresion }
    (16) Metodo -> . OBJECTID ( ) : TYPEID { Expresion }
    (10) Atributo -> . OBJECTID : TYPEID opcional_expr
    error           shift and go to state 14
    }               reduce using rule 9 (lista_atr_metodos -> .)
    OBJECTID        shift and go to state 16

    lista_atr_metodos              shift and go to state 24
    Metodo                         shift and go to state 13
    Atributo                       shift and go to state 15

state 20

    (8) lista_atr_metodos -> Atributo ; . lista_atr_metodos
    (6) lista_atr_metodos -> . Metodo ; lista_atr_metodos
    (7) lista_atr_metodos -> . error ; lista_atr_metodos
    (8) lista_atr_metodos -> . Atributo ; lista_atr_metodos
    (9) lista_atr_metodos -> .
    (13) Metodo -> . OBJECTID ( Formal lista_formal ) : TYPEID { error }
    (14) Metodo -> . OBJECTID ( Formal error ) : TYPEID { Expresion }
    (15) Metodo -> . OBJECTID ( Formal lista_formal ) : TYPEID { Expresion }
    (16) Metodo -> . OBJECTID ( ) : TYPEID { Expresion }
    (10) Atributo -> . OBJECTID : TYPEID opcional_expr
    error           shift and go to state 14
    }               reduce using rule 9 (lista_atr_metodos -> .)
    OBJECTID        shift and go to state 16

    Atributo                       shift and go to state 15
    lista_atr_metodos              shift and go to state 25
    Metodo                         shift and go to state 13

state 21

    (13) Metodo -> OBJECTID ( . Formal lista_formal ) : TYPEID { error }
    (14) Metodo -> OBJECTID ( . Formal error ) : TYPEID { Expresion }
    (15) Metodo -> OBJECTID ( . Formal lista_formal ) : TYPEID { Expresion }
    (16) Metodo -> OBJECTID ( . ) : TYPEID { Expresion }
    (19) Formal -> . OBJECTID : TYPEID
    )               shift and go to state 28
    OBJECTID        shift and go to state 26

    Formal                         shift and go to state 27

state 22

    (10) Atributo -> OBJECTID : . TYPEID opcional_expr
    TYPEID          shift and go to state 29


state 23

    (6) lista_atr_metodos -> Metodo ; lista_atr_metodos .
    }               reduce using rule 6 (lista_atr_metodos -> Metodo ; lista_atr_metodos .)


state 24

    (7) lista_atr_metodos -> error ; lista_atr_metodos .
    }               reduce using rule 7 (lista_atr_metodos -> error ; lista_atr_metodos .)


state 25

    (8) lista_atr_metodos -> Atributo ; lista_atr_metodos .
    }               reduce using rule 8 (lista_atr_metodos -> Atributo ; lista_atr_metodos .)


state 26

    (19) Formal -> OBJECTID . : TYPEID
    :               shift and go to state 30


state 27

    (13) Metodo -> OBJECTID ( Formal . lista_formal ) : TYPEID { error }
    (14) Metodo -> OBJECTID ( Formal . error ) : TYPEID { Expresion }
    (15) Metodo -> OBJECTID ( Formal . lista_formal ) : TYPEID { Expresion }
    (17) lista_formal -> . , Formal lista_formal
    (18) lista_formal -> .
    error           shift and go to state 32
    ,               shift and go to state 33
    )               reduce using rule 18 (lista_formal -> .)

    lista_formal                   shift and go to state 31

state 28

    (16) Metodo -> OBJECTID ( ) . : TYPEID { Expresion }
    :               shift and go to state 34


state 29

    (10) Atributo -> OBJECTID : TYPEID . opcional_expr
    (11) opcional_expr -> . ASSIGN Expresion
    (12) opcional_expr -> .
    ASSIGN          shift and go to state 36
    ;               reduce using rule 12 (opcional_expr -> .)

    opcional_expr                  shift and go to state 35

state 30

    (19) Formal -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 37


state 31

    (13) Metodo -> OBJECTID ( Formal lista_formal . ) : TYPEID { error }
    (15) Metodo -> OBJECTID ( Formal lista_formal . ) : TYPEID { Expresion }
    )               shift and go to state 38


state 32

    (14) Metodo -> OBJECTID ( Formal error . ) : TYPEID { Expresion }
    )               shift and go to state 39


state 33

    (17) lista_formal -> , . Formal lista_formal
    (19) Formal -> . OBJECTID : TYPEID
    OBJECTID        shift and go to state 26

    Formal                         shift and go to state 40

state 34

    (16) Metodo -> OBJECTID ( ) : . TYPEID { Expresion }
    TYPEID          shift and go to state 41


state 35

    (10) Atributo -> OBJECTID : TYPEID opcional_expr .
    ;               reduce using rule 10 (Atributo -> OBJECTID : TYPEID opcional_expr .)


state 36

    (11) opcional_expr -> ASSIGN . Expresion
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 42

state 37

    (19) Formal -> OBJECTID : TYPEID .
    error           reduce using rule 19 (Formal -> OBJECTID : TYPEID .)
    ,               reduce using rule 19 (Formal -> OBJECTID : TYPEID .)
    )               reduce using rule 19 (Formal -> OBJECTID : TYPEID .)


state 38

    (13) Metodo -> OBJECTID ( Formal lista_formal ) . : TYPEID { error }
    (15) Metodo -> OBJECTID ( Formal lista_formal ) . : TYPEID { Expresion }
    :               shift and go to state 57


state 39

    (14) Metodo -> OBJECTID ( Formal error ) . : TYPEID { Expresion }
    :               shift and go to state 58


state 40

    (17) lista_formal -> , Formal . lista_formal
    (17) lista_formal -> . , Formal lista_formal
    (18) lista_formal -> .
    ,               shift and go to state 33
    )               reduce using rule 18 (lista_formal -> .)

    lista_formal                   shift and go to state 59

state 41

    (16) Metodo -> OBJECTID ( ) : TYPEID . { Expresion }
    {               shift and go to state 60


state 42

    (11) opcional_expr -> ASSIGN Expresion .
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    ;               reduce using rule 11 (opcional_expr -> ASSIGN Expresion .)
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 43

    (20) Expresion -> BOOL_CONST .
    .               reduce using rule 20 (Expresion -> BOOL_CONST .)
    @               reduce using rule 20 (Expresion -> BOOL_CONST .)
    =               reduce using rule 20 (Expresion -> BOOL_CONST .)
    LE              reduce using rule 20 (Expresion -> BOOL_CONST .)
    <               reduce using rule 20 (Expresion -> BOOL_CONST .)
    -               reduce using rule 20 (Expresion -> BOOL_CONST .)
    +               reduce using rule 20 (Expresion -> BOOL_CONST .)
    /               reduce using rule 20 (Expresion -> BOOL_CONST .)
    *               reduce using rule 20 (Expresion -> BOOL_CONST .)
    ;               reduce using rule 20 (Expresion -> BOOL_CONST .)
    OF              reduce using rule 20 (Expresion -> BOOL_CONST .)
    LOOP            reduce using rule 20 (Expresion -> BOOL_CONST .)
    THEN            reduce using rule 20 (Expresion -> BOOL_CONST .)
    )               reduce using rule 20 (Expresion -> BOOL_CONST .)
    }               reduce using rule 20 (Expresion -> BOOL_CONST .)
    ,               reduce using rule 20 (Expresion -> BOOL_CONST .)
    POOL            reduce using rule 20 (Expresion -> BOOL_CONST .)
    ELSE            reduce using rule 20 (Expresion -> BOOL_CONST .)
    OBJECTID        reduce using rule 20 (Expresion -> BOOL_CONST .)
    IN              reduce using rule 20 (Expresion -> BOOL_CONST .)
    FI              reduce using rule 20 (Expresion -> BOOL_CONST .)


state 44

    (21) Expresion -> STR_CONST .
    .               reduce using rule 21 (Expresion -> STR_CONST .)
    @               reduce using rule 21 (Expresion -> STR_CONST .)
    =               reduce using rule 21 (Expresion -> STR_CONST .)
    LE              reduce using rule 21 (Expresion -> STR_CONST .)
    <               reduce using rule 21 (Expresion -> STR_CONST .)
    -               reduce using rule 21 (Expresion -> STR_CONST .)
    +               reduce using rule 21 (Expresion -> STR_CONST .)
    /               reduce using rule 21 (Expresion -> STR_CONST .)
    *               reduce using rule 21 (Expresion -> STR_CONST .)
    ;               reduce using rule 21 (Expresion -> STR_CONST .)
    OF              reduce using rule 21 (Expresion -> STR_CONST .)
    LOOP            reduce using rule 21 (Expresion -> STR_CONST .)
    THEN            reduce using rule 21 (Expresion -> STR_CONST .)
    )               reduce using rule 21 (Expresion -> STR_CONST .)
    }               reduce using rule 21 (Expresion -> STR_CONST .)
    ,               reduce using rule 21 (Expresion -> STR_CONST .)
    POOL            reduce using rule 21 (Expresion -> STR_CONST .)
    ELSE            reduce using rule 21 (Expresion -> STR_CONST .)
    OBJECTID        reduce using rule 21 (Expresion -> STR_CONST .)
    IN              reduce using rule 21 (Expresion -> STR_CONST .)
    FI              reduce using rule 21 (Expresion -> STR_CONST .)


state 45

    (22) Expresion -> INT_CONST .
    .               reduce using rule 22 (Expresion -> INT_CONST .)
    @               reduce using rule 22 (Expresion -> INT_CONST .)
    =               reduce using rule 22 (Expresion -> INT_CONST .)
    LE              reduce using rule 22 (Expresion -> INT_CONST .)
    <               reduce using rule 22 (Expresion -> INT_CONST .)
    -               reduce using rule 22 (Expresion -> INT_CONST .)
    +               reduce using rule 22 (Expresion -> INT_CONST .)
    /               reduce using rule 22 (Expresion -> INT_CONST .)
    *               reduce using rule 22 (Expresion -> INT_CONST .)
    ;               reduce using rule 22 (Expresion -> INT_CONST .)
    OF              reduce using rule 22 (Expresion -> INT_CONST .)
    LOOP            reduce using rule 22 (Expresion -> INT_CONST .)
    THEN            reduce using rule 22 (Expresion -> INT_CONST .)
    )               reduce using rule 22 (Expresion -> INT_CONST .)
    }               reduce using rule 22 (Expresion -> INT_CONST .)
    ,               reduce using rule 22 (Expresion -> INT_CONST .)
    POOL            reduce using rule 22 (Expresion -> INT_CONST .)
    ELSE            reduce using rule 22 (Expresion -> INT_CONST .)
    OBJECTID        reduce using rule 22 (Expresion -> INT_CONST .)
    IN              reduce using rule 22 (Expresion -> INT_CONST .)
    FI              reduce using rule 22 (Expresion -> INT_CONST .)


state 46

    (23) Expresion -> OBJECTID .
    (32) Expresion -> OBJECTID . ( )
    (33) Expresion -> OBJECTID . ( Expresion lista_expr )
    (49) Expresion -> OBJECTID . ASSIGN Expresion
    .               reduce using rule 23 (Expresion -> OBJECTID .)
    @               reduce using rule 23 (Expresion -> OBJECTID .)
    =               reduce using rule 23 (Expresion -> OBJECTID .)
    LE              reduce using rule 23 (Expresion -> OBJECTID .)
    <               reduce using rule 23 (Expresion -> OBJECTID .)
    -               reduce using rule 23 (Expresion -> OBJECTID .)
    +               reduce using rule 23 (Expresion -> OBJECTID .)
    /               reduce using rule 23 (Expresion -> OBJECTID .)
    *               reduce using rule 23 (Expresion -> OBJECTID .)
    ;               reduce using rule 23 (Expresion -> OBJECTID .)
    OF              reduce using rule 23 (Expresion -> OBJECTID .)
    LOOP            reduce using rule 23 (Expresion -> OBJECTID .)
    THEN            reduce using rule 23 (Expresion -> OBJECTID .)
    )               reduce using rule 23 (Expresion -> OBJECTID .)
    }               reduce using rule 23 (Expresion -> OBJECTID .)
    ,               reduce using rule 23 (Expresion -> OBJECTID .)
    POOL            reduce using rule 23 (Expresion -> OBJECTID .)
    ELSE            reduce using rule 23 (Expresion -> OBJECTID .)
    OBJECTID        reduce using rule 23 (Expresion -> OBJECTID .)
    IN              reduce using rule 23 (Expresion -> OBJECTID .)
    FI              reduce using rule 23 (Expresion -> OBJECTID .)
    (               shift and go to state 70
    ASSIGN          shift and go to state 71


state 47

    (24) Expresion -> { . error }
    (25) Expresion -> { . lista_expr_pc }
    (63) lista_expr_pc -> . lista_expr_pc error ;
    (64) lista_expr_pc -> . lista_expr_pc Expresion ;
    (65) lista_expr_pc -> . error ;
    (66) lista_expr_pc -> . Expresion ;
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    error           shift and go to state 72
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    lista_expr_pc                  shift and go to state 73
    Expresion                      shift and go to state 74

state 48

    (26) Expresion -> NEW . TYPEID
    TYPEID          shift and go to state 75


state 49

    (27) Expresion -> CASE . error OF lista_expr_case ESAC
    (28) Expresion -> CASE . Expresion OF lista_expr_case ESAC
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    error           shift and go to state 76
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 77

state 50

    (29) Expresion -> LET . lista_expr_let IN Expresion
    (52) lista_expr_let -> . OBJECTID : TYPEID lista_expr_let
    (53) lista_expr_let -> . , OBJECTID : TYPEID lista_expr_let
    (54) lista_expr_let -> . OBJECTID : TYPEID ASSIGN Expresion lista_expr_let
    (55) lista_expr_let -> . , OBJECTID : TYPEID ASSIGN Expresion lista_expr_let
    (56) lista_expr_let -> .
    (57) lista_expr_let -> . OBJECTID : TYPEID ASSIGN error lista_expr_let
    (58) lista_expr_let -> . , OBJECTID : TYPEID ASSIGN error lista_expr_let
    OBJECTID        shift and go to state 79
    ,               shift and go to state 80
    IN              reduce using rule 56 (lista_expr_let -> .)

    lista_expr_let                 shift and go to state 78

state 51

    (30) Expresion -> WHILE . Expresion LOOP Expresion POOL
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 81

state 52

    (31) Expresion -> IF . Expresion THEN Expresion ELSE Expresion FI
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 82

state 53

    (41) Expresion -> ( . Expresion )
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 83

state 54

    (38) Expresion -> ~ . Expresion
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 84

state 55

    (39) Expresion -> ISVOID . Expresion
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 85

state 56

    (40) Expresion -> NOT . Expresion
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 86

state 57

    (13) Metodo -> OBJECTID ( Formal lista_formal ) : . TYPEID { error }
    (15) Metodo -> OBJECTID ( Formal lista_formal ) : . TYPEID { Expresion }
    TYPEID          shift and go to state 87


state 58

    (14) Metodo -> OBJECTID ( Formal error ) : . TYPEID { Expresion }
    TYPEID          shift and go to state 88


state 59

    (17) lista_formal -> , Formal lista_formal .
    )               reduce using rule 17 (lista_formal -> , Formal lista_formal .)


state 60

    (16) Metodo -> OBJECTID ( ) : TYPEID { . Expresion }
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 89

state 61

    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    OBJECTID        shift and go to state 90


state 62

    (36) Expresion -> Expresion @ . TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion @ . TYPEID . OBJECTID ( )
    TYPEID          shift and go to state 91


state 63

    (42) Expresion -> Expresion = . Expresion
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 92

state 64

    (43) Expresion -> Expresion LE . Expresion
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 93

state 65

    (44) Expresion -> Expresion < . Expresion
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 94

state 66

    (45) Expresion -> Expresion - . Expresion
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 95

state 67

    (46) Expresion -> Expresion + . Expresion
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 96

state 68

    (47) Expresion -> Expresion / . Expresion
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 97

state 69

    (48) Expresion -> Expresion * . Expresion
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 98

state 70

    (32) Expresion -> OBJECTID ( . )
    (33) Expresion -> OBJECTID ( . Expresion lista_expr )
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    )               shift and go to state 99
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 100

state 71

    (49) Expresion -> OBJECTID ASSIGN . Expresion
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 101

state 72

    (24) Expresion -> { error . }
    (65) lista_expr_pc -> error . ;
    }               shift and go to state 102
    ;               shift and go to state 103


state 73

    (25) Expresion -> { lista_expr_pc . }
    (63) lista_expr_pc -> lista_expr_pc . error ;
    (64) lista_expr_pc -> lista_expr_pc . Expresion ;
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    }               shift and go to state 104
    error           shift and go to state 105
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 106

state 74

    (66) lista_expr_pc -> Expresion . ;
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    ;               shift and go to state 107
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 75

    (26) Expresion -> NEW TYPEID .
    .               reduce using rule 26 (Expresion -> NEW TYPEID .)
    @               reduce using rule 26 (Expresion -> NEW TYPEID .)
    =               reduce using rule 26 (Expresion -> NEW TYPEID .)
    LE              reduce using rule 26 (Expresion -> NEW TYPEID .)
    <               reduce using rule 26 (Expresion -> NEW TYPEID .)
    -               reduce using rule 26 (Expresion -> NEW TYPEID .)
    +               reduce using rule 26 (Expresion -> NEW TYPEID .)
    /               reduce using rule 26 (Expresion -> NEW TYPEID .)
    *               reduce using rule 26 (Expresion -> NEW TYPEID .)
    ;               reduce using rule 26 (Expresion -> NEW TYPEID .)
    OF              reduce using rule 26 (Expresion -> NEW TYPEID .)
    LOOP            reduce using rule 26 (Expresion -> NEW TYPEID .)
    THEN            reduce using rule 26 (Expresion -> NEW TYPEID .)
    )               reduce using rule 26 (Expresion -> NEW TYPEID .)
    }               reduce using rule 26 (Expresion -> NEW TYPEID .)
    ,               reduce using rule 26 (Expresion -> NEW TYPEID .)
    POOL            reduce using rule 26 (Expresion -> NEW TYPEID .)
    ELSE            reduce using rule 26 (Expresion -> NEW TYPEID .)
    OBJECTID        reduce using rule 26 (Expresion -> NEW TYPEID .)
    IN              reduce using rule 26 (Expresion -> NEW TYPEID .)
    FI              reduce using rule 26 (Expresion -> NEW TYPEID .)


state 76

    (27) Expresion -> CASE error . OF lista_expr_case ESAC
    OF              shift and go to state 108


state 77

    (28) Expresion -> CASE Expresion . OF lista_expr_case ESAC
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    OF              shift and go to state 109
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 78

    (29) Expresion -> LET lista_expr_let . IN Expresion
    IN              shift and go to state 110


state 79

    (52) lista_expr_let -> OBJECTID . : TYPEID lista_expr_let
    (54) lista_expr_let -> OBJECTID . : TYPEID ASSIGN Expresion lista_expr_let
    (57) lista_expr_let -> OBJECTID . : TYPEID ASSIGN error lista_expr_let
    :               shift and go to state 111


state 80

    (53) lista_expr_let -> , . OBJECTID : TYPEID lista_expr_let
    (55) lista_expr_let -> , . OBJECTID : TYPEID ASSIGN Expresion lista_expr_let
    (58) lista_expr_let -> , . OBJECTID : TYPEID ASSIGN error lista_expr_let
    OBJECTID        shift and go to state 112


state 81

    (30) Expresion -> WHILE Expresion . LOOP Expresion POOL
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    LOOP            shift and go to state 113
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 82

    (31) Expresion -> IF Expresion . THEN Expresion ELSE Expresion FI
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    THEN            shift and go to state 114
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 83

    (41) Expresion -> ( Expresion . )
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    )               shift and go to state 115
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 84

    (38) Expresion -> ~ Expresion .
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    =               reduce using rule 38 (Expresion -> ~ Expresion .)
    LE              reduce using rule 38 (Expresion -> ~ Expresion .)
    <               reduce using rule 38 (Expresion -> ~ Expresion .)
    -               reduce using rule 38 (Expresion -> ~ Expresion .)
    +               reduce using rule 38 (Expresion -> ~ Expresion .)
    ;               reduce using rule 38 (Expresion -> ~ Expresion .)
    OF              reduce using rule 38 (Expresion -> ~ Expresion .)
    LOOP            reduce using rule 38 (Expresion -> ~ Expresion .)
    THEN            reduce using rule 38 (Expresion -> ~ Expresion .)
    )               reduce using rule 38 (Expresion -> ~ Expresion .)
    }               reduce using rule 38 (Expresion -> ~ Expresion .)
    ,               reduce using rule 38 (Expresion -> ~ Expresion .)
    POOL            reduce using rule 38 (Expresion -> ~ Expresion .)
    ELSE            reduce using rule 38 (Expresion -> ~ Expresion .)
    OBJECTID        reduce using rule 38 (Expresion -> ~ Expresion .)
    IN              reduce using rule 38 (Expresion -> ~ Expresion .)
    FI              reduce using rule 38 (Expresion -> ~ Expresion .)
    .               shift and go to state 61
    @               shift and go to state 62
    /               shift and go to state 68
    *               shift and go to state 69


state 85

    (39) Expresion -> ISVOID Expresion .
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    =               reduce using rule 39 (Expresion -> ISVOID Expresion .)
    LE              reduce using rule 39 (Expresion -> ISVOID Expresion .)
    <               reduce using rule 39 (Expresion -> ISVOID Expresion .)
    -               reduce using rule 39 (Expresion -> ISVOID Expresion .)
    +               reduce using rule 39 (Expresion -> ISVOID Expresion .)
    /               reduce using rule 39 (Expresion -> ISVOID Expresion .)
    *               reduce using rule 39 (Expresion -> ISVOID Expresion .)
    ;               reduce using rule 39 (Expresion -> ISVOID Expresion .)
    OF              reduce using rule 39 (Expresion -> ISVOID Expresion .)
    LOOP            reduce using rule 39 (Expresion -> ISVOID Expresion .)
    THEN            reduce using rule 39 (Expresion -> ISVOID Expresion .)
    )               reduce using rule 39 (Expresion -> ISVOID Expresion .)
    }               reduce using rule 39 (Expresion -> ISVOID Expresion .)
    ,               reduce using rule 39 (Expresion -> ISVOID Expresion .)
    POOL            reduce using rule 39 (Expresion -> ISVOID Expresion .)
    ELSE            reduce using rule 39 (Expresion -> ISVOID Expresion .)
    OBJECTID        reduce using rule 39 (Expresion -> ISVOID Expresion .)
    IN              reduce using rule 39 (Expresion -> ISVOID Expresion .)
    FI              reduce using rule 39 (Expresion -> ISVOID Expresion .)
    .               shift and go to state 61
    @               shift and go to state 62


state 86

    (40) Expresion -> NOT Expresion .
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    ;               reduce using rule 40 (Expresion -> NOT Expresion .)
    OF              reduce using rule 40 (Expresion -> NOT Expresion .)
    LOOP            reduce using rule 40 (Expresion -> NOT Expresion .)
    THEN            reduce using rule 40 (Expresion -> NOT Expresion .)
    )               reduce using rule 40 (Expresion -> NOT Expresion .)
    }               reduce using rule 40 (Expresion -> NOT Expresion .)
    ,               reduce using rule 40 (Expresion -> NOT Expresion .)
    POOL            reduce using rule 40 (Expresion -> NOT Expresion .)
    ELSE            reduce using rule 40 (Expresion -> NOT Expresion .)
    OBJECTID        reduce using rule 40 (Expresion -> NOT Expresion .)
    IN              reduce using rule 40 (Expresion -> NOT Expresion .)
    FI              reduce using rule 40 (Expresion -> NOT Expresion .)
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 87

    (13) Metodo -> OBJECTID ( Formal lista_formal ) : TYPEID . { error }
    (15) Metodo -> OBJECTID ( Formal lista_formal ) : TYPEID . { Expresion }
    {               shift and go to state 116


state 88

    (14) Metodo -> OBJECTID ( Formal error ) : TYPEID . { Expresion }
    {               shift and go to state 117


state 89

    (16) Metodo -> OBJECTID ( ) : TYPEID { Expresion . }
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    }               shift and go to state 118
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 90

    (34) Expresion -> Expresion . OBJECTID . ( )
    (35) Expresion -> Expresion . OBJECTID . ( Expresion lista_expr )
    (               shift and go to state 119


state 91

    (36) Expresion -> Expresion @ TYPEID . . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion @ TYPEID . . OBJECTID ( )
    .               shift and go to state 120


state 92

    (42) Expresion -> Expresion = Expresion .
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    =               reduce using rule 42 (Expresion -> Expresion = Expresion .)
    ;               reduce using rule 42 (Expresion -> Expresion = Expresion .)
    OF              reduce using rule 42 (Expresion -> Expresion = Expresion .)
    LOOP            reduce using rule 42 (Expresion -> Expresion = Expresion .)
    THEN            reduce using rule 42 (Expresion -> Expresion = Expresion .)
    )               reduce using rule 42 (Expresion -> Expresion = Expresion .)
    }               reduce using rule 42 (Expresion -> Expresion = Expresion .)
    ,               reduce using rule 42 (Expresion -> Expresion = Expresion .)
    POOL            reduce using rule 42 (Expresion -> Expresion = Expresion .)
    ELSE            reduce using rule 42 (Expresion -> Expresion = Expresion .)
    OBJECTID        reduce using rule 42 (Expresion -> Expresion = Expresion .)
    IN              reduce using rule 42 (Expresion -> Expresion = Expresion .)
    FI              reduce using rule 42 (Expresion -> Expresion = Expresion .)
    .               shift and go to state 61
    @               shift and go to state 62
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 93

    (43) Expresion -> Expresion LE Expresion .
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    =               reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    LE              reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    <               reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    -               reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    +               reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    ;               reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    OF              reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    LOOP            reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    THEN            reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    )               reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    }               reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    ,               reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    POOL            reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    ELSE            reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    OBJECTID        reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    IN              reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    FI              reduce using rule 43 (Expresion -> Expresion LE Expresion .)
    .               shift and go to state 61
    @               shift and go to state 62
    /               shift and go to state 68
    *               shift and go to state 69


state 94

    (44) Expresion -> Expresion < Expresion .
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    =               reduce using rule 44 (Expresion -> Expresion < Expresion .)
    LE              reduce using rule 44 (Expresion -> Expresion < Expresion .)
    <               reduce using rule 44 (Expresion -> Expresion < Expresion .)
    -               reduce using rule 44 (Expresion -> Expresion < Expresion .)
    +               reduce using rule 44 (Expresion -> Expresion < Expresion .)
    ;               reduce using rule 44 (Expresion -> Expresion < Expresion .)
    OF              reduce using rule 44 (Expresion -> Expresion < Expresion .)
    LOOP            reduce using rule 44 (Expresion -> Expresion < Expresion .)
    THEN            reduce using rule 44 (Expresion -> Expresion < Expresion .)
    )               reduce using rule 44 (Expresion -> Expresion < Expresion .)
    }               reduce using rule 44 (Expresion -> Expresion < Expresion .)
    ,               reduce using rule 44 (Expresion -> Expresion < Expresion .)
    POOL            reduce using rule 44 (Expresion -> Expresion < Expresion .)
    ELSE            reduce using rule 44 (Expresion -> Expresion < Expresion .)
    OBJECTID        reduce using rule 44 (Expresion -> Expresion < Expresion .)
    IN              reduce using rule 44 (Expresion -> Expresion < Expresion .)
    FI              reduce using rule 44 (Expresion -> Expresion < Expresion .)
    .               shift and go to state 61
    @               shift and go to state 62
    /               shift and go to state 68
    *               shift and go to state 69


state 95

    (45) Expresion -> Expresion - Expresion .
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    =               reduce using rule 45 (Expresion -> Expresion - Expresion .)
    -               reduce using rule 45 (Expresion -> Expresion - Expresion .)
    +               reduce using rule 45 (Expresion -> Expresion - Expresion .)
    ;               reduce using rule 45 (Expresion -> Expresion - Expresion .)
    OF              reduce using rule 45 (Expresion -> Expresion - Expresion .)
    LOOP            reduce using rule 45 (Expresion -> Expresion - Expresion .)
    THEN            reduce using rule 45 (Expresion -> Expresion - Expresion .)
    )               reduce using rule 45 (Expresion -> Expresion - Expresion .)
    }               reduce using rule 45 (Expresion -> Expresion - Expresion .)
    ,               reduce using rule 45 (Expresion -> Expresion - Expresion .)
    POOL            reduce using rule 45 (Expresion -> Expresion - Expresion .)
    ELSE            reduce using rule 45 (Expresion -> Expresion - Expresion .)
    OBJECTID        reduce using rule 45 (Expresion -> Expresion - Expresion .)
    IN              reduce using rule 45 (Expresion -> Expresion - Expresion .)
    FI              reduce using rule 45 (Expresion -> Expresion - Expresion .)
    .               shift and go to state 61
    @               shift and go to state 62
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 68
    *               shift and go to state 69


state 96

    (46) Expresion -> Expresion + Expresion .
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    =               reduce using rule 46 (Expresion -> Expresion + Expresion .)
    -               reduce using rule 46 (Expresion -> Expresion + Expresion .)
    +               reduce using rule 46 (Expresion -> Expresion + Expresion .)
    ;               reduce using rule 46 (Expresion -> Expresion + Expresion .)
    OF              reduce using rule 46 (Expresion -> Expresion + Expresion .)
    LOOP            reduce using rule 46 (Expresion -> Expresion + Expresion .)
    THEN            reduce using rule 46 (Expresion -> Expresion + Expresion .)
    )               reduce using rule 46 (Expresion -> Expresion + Expresion .)
    }               reduce using rule 46 (Expresion -> Expresion + Expresion .)
    ,               reduce using rule 46 (Expresion -> Expresion + Expresion .)
    POOL            reduce using rule 46 (Expresion -> Expresion + Expresion .)
    ELSE            reduce using rule 46 (Expresion -> Expresion + Expresion .)
    OBJECTID        reduce using rule 46 (Expresion -> Expresion + Expresion .)
    IN              reduce using rule 46 (Expresion -> Expresion + Expresion .)
    FI              reduce using rule 46 (Expresion -> Expresion + Expresion .)
    .               shift and go to state 61
    @               shift and go to state 62
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 68
    *               shift and go to state 69


state 97

    (47) Expresion -> Expresion / Expresion .
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    =               reduce using rule 47 (Expresion -> Expresion / Expresion .)
    LE              reduce using rule 47 (Expresion -> Expresion / Expresion .)
    <               reduce using rule 47 (Expresion -> Expresion / Expresion .)
    -               reduce using rule 47 (Expresion -> Expresion / Expresion .)
    +               reduce using rule 47 (Expresion -> Expresion / Expresion .)
    /               reduce using rule 47 (Expresion -> Expresion / Expresion .)
    *               reduce using rule 47 (Expresion -> Expresion / Expresion .)
    ;               reduce using rule 47 (Expresion -> Expresion / Expresion .)
    OF              reduce using rule 47 (Expresion -> Expresion / Expresion .)
    LOOP            reduce using rule 47 (Expresion -> Expresion / Expresion .)
    THEN            reduce using rule 47 (Expresion -> Expresion / Expresion .)
    )               reduce using rule 47 (Expresion -> Expresion / Expresion .)
    }               reduce using rule 47 (Expresion -> Expresion / Expresion .)
    ,               reduce using rule 47 (Expresion -> Expresion / Expresion .)
    POOL            reduce using rule 47 (Expresion -> Expresion / Expresion .)
    ELSE            reduce using rule 47 (Expresion -> Expresion / Expresion .)
    OBJECTID        reduce using rule 47 (Expresion -> Expresion / Expresion .)
    IN              reduce using rule 47 (Expresion -> Expresion / Expresion .)
    FI              reduce using rule 47 (Expresion -> Expresion / Expresion .)
    .               shift and go to state 61
    @               shift and go to state 62


state 98

    (48) Expresion -> Expresion * Expresion .
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    =               reduce using rule 48 (Expresion -> Expresion * Expresion .)
    LE              reduce using rule 48 (Expresion -> Expresion * Expresion .)
    <               reduce using rule 48 (Expresion -> Expresion * Expresion .)
    -               reduce using rule 48 (Expresion -> Expresion * Expresion .)
    +               reduce using rule 48 (Expresion -> Expresion * Expresion .)
    /               reduce using rule 48 (Expresion -> Expresion * Expresion .)
    *               reduce using rule 48 (Expresion -> Expresion * Expresion .)
    ;               reduce using rule 48 (Expresion -> Expresion * Expresion .)
    OF              reduce using rule 48 (Expresion -> Expresion * Expresion .)
    LOOP            reduce using rule 48 (Expresion -> Expresion * Expresion .)
    THEN            reduce using rule 48 (Expresion -> Expresion * Expresion .)
    )               reduce using rule 48 (Expresion -> Expresion * Expresion .)
    }               reduce using rule 48 (Expresion -> Expresion * Expresion .)
    ,               reduce using rule 48 (Expresion -> Expresion * Expresion .)
    POOL            reduce using rule 48 (Expresion -> Expresion * Expresion .)
    ELSE            reduce using rule 48 (Expresion -> Expresion * Expresion .)
    OBJECTID        reduce using rule 48 (Expresion -> Expresion * Expresion .)
    IN              reduce using rule 48 (Expresion -> Expresion * Expresion .)
    FI              reduce using rule 48 (Expresion -> Expresion * Expresion .)
    .               shift and go to state 61
    @               shift and go to state 62


state 99

    (32) Expresion -> OBJECTID ( ) .
    .               reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    @               reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    =               reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    LE              reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    <               reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    -               reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    +               reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    /               reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    *               reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    ;               reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    OF              reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    LOOP            reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    THEN            reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    )               reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    }               reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    ,               reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    POOL            reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    ELSE            reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    OBJECTID        reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    IN              reduce using rule 32 (Expresion -> OBJECTID ( ) .)
    FI              reduce using rule 32 (Expresion -> OBJECTID ( ) .)


state 100

    (33) Expresion -> OBJECTID ( Expresion . lista_expr )
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    (50) lista_expr -> . , Expresion lista_expr
    (51) lista_expr -> .
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    ,               shift and go to state 122
    )               reduce using rule 51 (lista_expr -> .)

    lista_expr                     shift and go to state 121

state 101

    (49) Expresion -> OBJECTID ASSIGN Expresion .
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    ;               reduce using rule 49 (Expresion -> OBJECTID ASSIGN Expresion .)
    OF              reduce using rule 49 (Expresion -> OBJECTID ASSIGN Expresion .)
    LOOP            reduce using rule 49 (Expresion -> OBJECTID ASSIGN Expresion .)
    THEN            reduce using rule 49 (Expresion -> OBJECTID ASSIGN Expresion .)
    )               reduce using rule 49 (Expresion -> OBJECTID ASSIGN Expresion .)
    }               reduce using rule 49 (Expresion -> OBJECTID ASSIGN Expresion .)
    ,               reduce using rule 49 (Expresion -> OBJECTID ASSIGN Expresion .)
    POOL            reduce using rule 49 (Expresion -> OBJECTID ASSIGN Expresion .)
    ELSE            reduce using rule 49 (Expresion -> OBJECTID ASSIGN Expresion .)
    OBJECTID        reduce using rule 49 (Expresion -> OBJECTID ASSIGN Expresion .)
    IN              reduce using rule 49 (Expresion -> OBJECTID ASSIGN Expresion .)
    FI              reduce using rule 49 (Expresion -> OBJECTID ASSIGN Expresion .)
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 102

    (24) Expresion -> { error } .
    .               reduce using rule 24 (Expresion -> { error } .)
    @               reduce using rule 24 (Expresion -> { error } .)
    =               reduce using rule 24 (Expresion -> { error } .)
    LE              reduce using rule 24 (Expresion -> { error } .)
    <               reduce using rule 24 (Expresion -> { error } .)
    -               reduce using rule 24 (Expresion -> { error } .)
    +               reduce using rule 24 (Expresion -> { error } .)
    /               reduce using rule 24 (Expresion -> { error } .)
    *               reduce using rule 24 (Expresion -> { error } .)
    ;               reduce using rule 24 (Expresion -> { error } .)
    OF              reduce using rule 24 (Expresion -> { error } .)
    LOOP            reduce using rule 24 (Expresion -> { error } .)
    THEN            reduce using rule 24 (Expresion -> { error } .)
    )               reduce using rule 24 (Expresion -> { error } .)
    }               reduce using rule 24 (Expresion -> { error } .)
    ,               reduce using rule 24 (Expresion -> { error } .)
    POOL            reduce using rule 24 (Expresion -> { error } .)
    ELSE            reduce using rule 24 (Expresion -> { error } .)
    OBJECTID        reduce using rule 24 (Expresion -> { error } .)
    IN              reduce using rule 24 (Expresion -> { error } .)
    FI              reduce using rule 24 (Expresion -> { error } .)


state 103

    (65) lista_expr_pc -> error ; .
    }               reduce using rule 65 (lista_expr_pc -> error ; .)
    error           reduce using rule 65 (lista_expr_pc -> error ; .)
    BOOL_CONST      reduce using rule 65 (lista_expr_pc -> error ; .)
    STR_CONST       reduce using rule 65 (lista_expr_pc -> error ; .)
    INT_CONST       reduce using rule 65 (lista_expr_pc -> error ; .)
    OBJECTID        reduce using rule 65 (lista_expr_pc -> error ; .)
    {               reduce using rule 65 (lista_expr_pc -> error ; .)
    NEW             reduce using rule 65 (lista_expr_pc -> error ; .)
    CASE            reduce using rule 65 (lista_expr_pc -> error ; .)
    LET             reduce using rule 65 (lista_expr_pc -> error ; .)
    WHILE           reduce using rule 65 (lista_expr_pc -> error ; .)
    IF              reduce using rule 65 (lista_expr_pc -> error ; .)
    ~               reduce using rule 65 (lista_expr_pc -> error ; .)
    ISVOID          reduce using rule 65 (lista_expr_pc -> error ; .)
    NOT             reduce using rule 65 (lista_expr_pc -> error ; .)
    (               reduce using rule 65 (lista_expr_pc -> error ; .)


state 104

    (25) Expresion -> { lista_expr_pc } .
    .               reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    @               reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    =               reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    LE              reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    <               reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    -               reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    +               reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    /               reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    *               reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    ;               reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    OF              reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    LOOP            reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    THEN            reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    )               reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    }               reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    ,               reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    POOL            reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    ELSE            reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    OBJECTID        reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    IN              reduce using rule 25 (Expresion -> { lista_expr_pc } .)
    FI              reduce using rule 25 (Expresion -> { lista_expr_pc } .)


state 105

    (63) lista_expr_pc -> lista_expr_pc error . ;
    ;               shift and go to state 123


state 106

    (64) lista_expr_pc -> lista_expr_pc Expresion . ;
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    ;               shift and go to state 124
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 107

    (66) lista_expr_pc -> Expresion ; .
    }               reduce using rule 66 (lista_expr_pc -> Expresion ; .)
    error           reduce using rule 66 (lista_expr_pc -> Expresion ; .)
    BOOL_CONST      reduce using rule 66 (lista_expr_pc -> Expresion ; .)
    STR_CONST       reduce using rule 66 (lista_expr_pc -> Expresion ; .)
    INT_CONST       reduce using rule 66 (lista_expr_pc -> Expresion ; .)
    OBJECTID        reduce using rule 66 (lista_expr_pc -> Expresion ; .)
    {               reduce using rule 66 (lista_expr_pc -> Expresion ; .)
    NEW             reduce using rule 66 (lista_expr_pc -> Expresion ; .)
    CASE            reduce using rule 66 (lista_expr_pc -> Expresion ; .)
    LET             reduce using rule 66 (lista_expr_pc -> Expresion ; .)
    WHILE           reduce using rule 66 (lista_expr_pc -> Expresion ; .)
    IF              reduce using rule 66 (lista_expr_pc -> Expresion ; .)
    ~               reduce using rule 66 (lista_expr_pc -> Expresion ; .)
    ISVOID          reduce using rule 66 (lista_expr_pc -> Expresion ; .)
    NOT             reduce using rule 66 (lista_expr_pc -> Expresion ; .)
    (               reduce using rule 66 (lista_expr_pc -> Expresion ; .)


state 108

    (27) Expresion -> CASE error OF . lista_expr_case ESAC
    (59) lista_expr_case -> . OBJECTID : TYPEID DARROW error ; lista_expr_case
    (60) lista_expr_case -> . OBJECTID : TYPEID DARROW error ;
    (61) lista_expr_case -> . OBJECTID : TYPEID DARROW Expresion ; lista_expr_case
    (62) lista_expr_case -> . OBJECTID : TYPEID DARROW Expresion ;
    OBJECTID        shift and go to state 126

    lista_expr_case                shift and go to state 125

state 109

    (28) Expresion -> CASE Expresion OF . lista_expr_case ESAC
    (59) lista_expr_case -> . OBJECTID : TYPEID DARROW error ; lista_expr_case
    (60) lista_expr_case -> . OBJECTID : TYPEID DARROW error ;
    (61) lista_expr_case -> . OBJECTID : TYPEID DARROW Expresion ; lista_expr_case
    (62) lista_expr_case -> . OBJECTID : TYPEID DARROW Expresion ;
    OBJECTID        shift and go to state 126

    lista_expr_case                shift and go to state 127

state 110

    (29) Expresion -> LET lista_expr_let IN . Expresion
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 128

state 111

    (52) lista_expr_let -> OBJECTID : . TYPEID lista_expr_let
    (54) lista_expr_let -> OBJECTID : . TYPEID ASSIGN Expresion lista_expr_let
    (57) lista_expr_let -> OBJECTID : . TYPEID ASSIGN error lista_expr_let
    TYPEID          shift and go to state 129


state 112

    (53) lista_expr_let -> , OBJECTID . : TYPEID lista_expr_let
    (55) lista_expr_let -> , OBJECTID . : TYPEID ASSIGN Expresion lista_expr_let
    (58) lista_expr_let -> , OBJECTID . : TYPEID ASSIGN error lista_expr_let
    :               shift and go to state 130


state 113

    (30) Expresion -> WHILE Expresion LOOP . Expresion POOL
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 131

state 114

    (31) Expresion -> IF Expresion THEN . Expresion ELSE Expresion FI
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 132

state 115

    (41) Expresion -> ( Expresion ) .
    .               reduce using rule 41 (Expresion -> ( Expresion ) .)
    @               reduce using rule 41 (Expresion -> ( Expresion ) .)
    =               reduce using rule 41 (Expresion -> ( Expresion ) .)
    LE              reduce using rule 41 (Expresion -> ( Expresion ) .)
    <               reduce using rule 41 (Expresion -> ( Expresion ) .)
    -               reduce using rule 41 (Expresion -> ( Expresion ) .)
    +               reduce using rule 41 (Expresion -> ( Expresion ) .)
    /               reduce using rule 41 (Expresion -> ( Expresion ) .)
    *               reduce using rule 41 (Expresion -> ( Expresion ) .)
    ;               reduce using rule 41 (Expresion -> ( Expresion ) .)
    OF              reduce using rule 41 (Expresion -> ( Expresion ) .)
    LOOP            reduce using rule 41 (Expresion -> ( Expresion ) .)
    THEN            reduce using rule 41 (Expresion -> ( Expresion ) .)
    )               reduce using rule 41 (Expresion -> ( Expresion ) .)
    }               reduce using rule 41 (Expresion -> ( Expresion ) .)
    ,               reduce using rule 41 (Expresion -> ( Expresion ) .)
    POOL            reduce using rule 41 (Expresion -> ( Expresion ) .)
    ELSE            reduce using rule 41 (Expresion -> ( Expresion ) .)
    OBJECTID        reduce using rule 41 (Expresion -> ( Expresion ) .)
    IN              reduce using rule 41 (Expresion -> ( Expresion ) .)
    FI              reduce using rule 41 (Expresion -> ( Expresion ) .)


state 116

    (13) Metodo -> OBJECTID ( Formal lista_formal ) : TYPEID { . error }
    (15) Metodo -> OBJECTID ( Formal lista_formal ) : TYPEID { . Expresion }
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    error           shift and go to state 133
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 134

state 117

    (14) Metodo -> OBJECTID ( Formal error ) : TYPEID { . Expresion }
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 135

state 118

    (16) Metodo -> OBJECTID ( ) : TYPEID { Expresion } .
    ;               reduce using rule 16 (Metodo -> OBJECTID ( ) : TYPEID { Expresion } .)


state 119

    (34) Expresion -> Expresion . OBJECTID ( . )
    (35) Expresion -> Expresion . OBJECTID ( . Expresion lista_expr )
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    )               shift and go to state 137
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 136

state 120

    (36) Expresion -> Expresion @ TYPEID . . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion @ TYPEID . . OBJECTID ( )
    OBJECTID        shift and go to state 138


state 121

    (33) Expresion -> OBJECTID ( Expresion lista_expr . )
    )               shift and go to state 139


state 122

    (50) lista_expr -> , . Expresion lista_expr
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 140

state 123

    (63) lista_expr_pc -> lista_expr_pc error ; .
    }               reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)
    error           reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)
    BOOL_CONST      reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)
    STR_CONST       reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)
    INT_CONST       reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)
    OBJECTID        reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)
    {               reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)
    NEW             reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)
    CASE            reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)
    LET             reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)
    WHILE           reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)
    IF              reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)
    ~               reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)
    ISVOID          reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)
    NOT             reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)
    (               reduce using rule 63 (lista_expr_pc -> lista_expr_pc error ; .)


state 124

    (64) lista_expr_pc -> lista_expr_pc Expresion ; .
    }               reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)
    error           reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)
    BOOL_CONST      reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)
    STR_CONST       reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)
    INT_CONST       reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)
    OBJECTID        reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)
    {               reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)
    NEW             reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)
    CASE            reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)
    LET             reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)
    WHILE           reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)
    IF              reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)
    ~               reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)
    ISVOID          reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)
    NOT             reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)
    (               reduce using rule 64 (lista_expr_pc -> lista_expr_pc Expresion ; .)


state 125

    (27) Expresion -> CASE error OF lista_expr_case . ESAC
    ESAC            shift and go to state 141


state 126

    (59) lista_expr_case -> OBJECTID . : TYPEID DARROW error ; lista_expr_case
    (60) lista_expr_case -> OBJECTID . : TYPEID DARROW error ;
    (61) lista_expr_case -> OBJECTID . : TYPEID DARROW Expresion ; lista_expr_case
    (62) lista_expr_case -> OBJECTID . : TYPEID DARROW Expresion ;
    :               shift and go to state 142


state 127

    (28) Expresion -> CASE Expresion OF lista_expr_case . ESAC
    ESAC            shift and go to state 143


state 128

    (29) Expresion -> LET lista_expr_let IN Expresion .
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
    ;               reduce using rule 29 (Expresion -> LET lista_expr_let IN Expresion .)
    OF              reduce using rule 29 (Expresion -> LET lista_expr_let IN Expresion .)
    LOOP            reduce using rule 29 (Expresion -> LET lista_expr_let IN Expresion .)
    THEN            reduce using rule 29 (Expresion -> LET lista_expr_let IN Expresion .)
    )               reduce using rule 29 (Expresion -> LET lista_expr_let IN Expresion .)
    }               reduce using rule 29 (Expresion -> LET lista_expr_let IN Expresion .)
    ,               reduce using rule 29 (Expresion -> LET lista_expr_let IN Expresion .)
    POOL            reduce using rule 29 (Expresion -> LET lista_expr_let IN Expresion .)
    ELSE            reduce using rule 29 (Expresion -> LET lista_expr_let IN Expresion .)
    OBJECTID        reduce using rule 29 (Expresion -> LET lista_expr_let IN Expresion .)
    IN              reduce using rule 29 (Expresion -> LET lista_expr_let IN Expresion .)
    FI              reduce using rule 29 (Expresion -> LET lista_expr_let IN Expresion .)
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 129

    (52) lista_expr_let -> OBJECTID : TYPEID . lista_expr_let
    (54) lista_expr_let -> OBJECTID : TYPEID . ASSIGN Expresion lista_expr_let
    (57) lista_expr_let -> OBJECTID : TYPEID . ASSIGN error lista_expr_let
    (52) lista_expr_let -> . OBJECTID : TYPEID lista_expr_let
    (53) lista_expr_let -> . , OBJECTID : TYPEID lista_expr_let
    (54) lista_expr_let -> . OBJECTID : TYPEID ASSIGN Expresion lista_expr_let
    (55) lista_expr_let -> . , OBJECTID : TYPEID ASSIGN Expresion lista_expr_let
    (56) lista_expr_let -> .
    (57) lista_expr_let -> . OBJECTID : TYPEID ASSIGN error lista_expr_let
    (58) lista_expr_let -> . , OBJECTID : TYPEID ASSIGN error lista_expr_let
    ASSIGN          shift and go to state 145
    OBJECTID        shift and go to state 79
    ,               shift and go to state 80
    IN              reduce using rule 56 (lista_expr_let -> .)

    lista_expr_let                 shift and go to state 144

state 130

    (53) lista_expr_let -> , OBJECTID : . TYPEID lista_expr_let
    (55) lista_expr_let -> , OBJECTID : . TYPEID ASSIGN Expresion lista_expr_let
    (58) lista_expr_let -> , OBJECTID : . TYPEID ASSIGN error lista_expr_let
    TYPEID          shift and go to state 146


state 131

    (30) Expresion -> WHILE Expresion LOOP Expresion . POOL
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    POOL            shift and go to state 147
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 132

    (31) Expresion -> IF Expresion THEN Expresion . ELSE Expresion FI
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    ELSE            shift and go to state 148
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 133

    (13) Metodo -> OBJECTID ( Formal lista_formal ) : TYPEID { error . }
    }               shift and go to state 149


state 134

    (15) Metodo -> OBJECTID ( Formal lista_formal ) : TYPEID { Expresion . }
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    }               shift and go to state 150
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 135

    (14) Metodo -> OBJECTID ( Formal error ) : TYPEID { Expresion . }
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    }               shift and go to state 151
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 136

    (35) Expresion -> Expresion . OBJECTID ( Expresion . lista_expr )
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    (50) lista_expr -> . , Expresion lista_expr
    (51) lista_expr -> .
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    ,               shift and go to state 122
    )               reduce using rule 51 (lista_expr -> .)

    lista_expr                     shift and go to state 152

state 137

    (34) Expresion -> Expresion . OBJECTID ( ) .
    .               reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    @               reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    =               reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    LE              reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    <               reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    -               reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    +               reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    /               reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    *               reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    ;               reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    OF              reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    LOOP            reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    THEN            reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    )               reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    }               reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    ,               reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    POOL            reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    ELSE            reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    OBJECTID        reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    IN              reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)
    FI              reduce using rule 34 (Expresion -> Expresion . OBJECTID ( ) .)


state 138

    (36) Expresion -> Expresion @ TYPEID . OBJECTID . ( Expresion lista_expr )
    (37) Expresion -> Expresion @ TYPEID . OBJECTID . ( )
    (               shift and go to state 153


state 139

    (33) Expresion -> OBJECTID ( Expresion lista_expr ) .
    .               reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    @               reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    =               reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    LE              reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    <               reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    -               reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    +               reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    /               reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    *               reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    ;               reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    OF              reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    LOOP            reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    THEN            reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    )               reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    }               reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    ,               reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    POOL            reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    ELSE            reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    OBJECTID        reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    IN              reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)
    FI              reduce using rule 33 (Expresion -> OBJECTID ( Expresion lista_expr ) .)


state 140

    (50) lista_expr -> , Expresion . lista_expr
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    (50) lista_expr -> . , Expresion lista_expr
    (51) lista_expr -> .
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    ,               shift and go to state 122
    )               reduce using rule 51 (lista_expr -> .)

    lista_expr                     shift and go to state 154

state 141

    (27) Expresion -> CASE error OF lista_expr_case ESAC .
    .               reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    @               reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    =               reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    LE              reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    <               reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    -               reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    +               reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    /               reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    *               reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    ;               reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    OF              reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    LOOP            reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    THEN            reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    )               reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    }               reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    ,               reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    POOL            reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    ELSE            reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    OBJECTID        reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    IN              reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)
    FI              reduce using rule 27 (Expresion -> CASE error OF lista_expr_case ESAC .)


state 142

    (59) lista_expr_case -> OBJECTID : . TYPEID DARROW error ; lista_expr_case
    (60) lista_expr_case -> OBJECTID : . TYPEID DARROW error ;
    (61) lista_expr_case -> OBJECTID : . TYPEID DARROW Expresion ; lista_expr_case
    (62) lista_expr_case -> OBJECTID : . TYPEID DARROW Expresion ;
    TYPEID          shift and go to state 155


state 143

    (28) Expresion -> CASE Expresion OF lista_expr_case ESAC .
    .               reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    @               reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    =               reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    LE              reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    <               reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    -               reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    +               reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    /               reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    *               reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    ;               reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    OF              reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    LOOP            reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    THEN            reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    )               reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    }               reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    ,               reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    POOL            reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    ELSE            reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    OBJECTID        reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    IN              reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)
    FI              reduce using rule 28 (Expresion -> CASE Expresion OF lista_expr_case ESAC .)


state 144

    (52) lista_expr_let -> OBJECTID : TYPEID lista_expr_let .
    IN              reduce using rule 52 (lista_expr_let -> OBJECTID : TYPEID lista_expr_let .)


state 145

    (54) lista_expr_let -> OBJECTID : TYPEID ASSIGN . Expresion lista_expr_let
    (57) lista_expr_let -> OBJECTID : TYPEID ASSIGN . error lista_expr_let
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    error           shift and go to state 157
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 156

state 146

    (53) lista_expr_let -> , OBJECTID : TYPEID . lista_expr_let
    (55) lista_expr_let -> , OBJECTID : TYPEID . ASSIGN Expresion lista_expr_let
    (58) lista_expr_let -> , OBJECTID : TYPEID . ASSIGN error lista_expr_let
    (52) lista_expr_let -> . OBJECTID : TYPEID lista_expr_let
    (53) lista_expr_let -> . , OBJECTID : TYPEID lista_expr_let
    (54) lista_expr_let -> . OBJECTID : TYPEID ASSIGN Expresion lista_expr_let
    (55) lista_expr_let -> . , OBJECTID : TYPEID ASSIGN Expresion lista_expr_let
    (56) lista_expr_let -> .
    (57) lista_expr_let -> . OBJECTID : TYPEID ASSIGN error lista_expr_let
    (58) lista_expr_let -> . , OBJECTID : TYPEID ASSIGN error lista_expr_let
    ASSIGN          shift and go to state 159
    OBJECTID        shift and go to state 79
    ,               shift and go to state 80
    IN              reduce using rule 56 (lista_expr_let -> .)

    lista_expr_let                 shift and go to state 158

state 147

    (30) Expresion -> WHILE Expresion LOOP Expresion POOL .
    .               reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    @               reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    =               reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    LE              reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    <               reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    -               reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    +               reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    /               reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    *               reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    ;               reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    OF              reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    LOOP            reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    THEN            reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    )               reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    }               reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    ,               reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    POOL            reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    ELSE            reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    OBJECTID        reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    IN              reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)
    FI              reduce using rule 30 (Expresion -> WHILE Expresion LOOP Expresion POOL .)


state 148

    (31) Expresion -> IF Expresion THEN Expresion ELSE . Expresion FI
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 160

state 149

    (13) Metodo -> OBJECTID ( Formal lista_formal ) : TYPEID { error } .
    ;               reduce using rule 13 (Metodo -> OBJECTID ( Formal lista_formal ) : TYPEID { error } .)


state 150

    (15) Metodo -> OBJECTID ( Formal lista_formal ) : TYPEID { Expresion } .
    ;               reduce using rule 15 (Metodo -> OBJECTID ( Formal lista_formal ) : TYPEID { Expresion } .)


state 151

    (14) Metodo -> OBJECTID ( Formal error ) : TYPEID { Expresion } .
    ;               reduce using rule 14 (Metodo -> OBJECTID ( Formal error ) : TYPEID { Expresion } .)


state 152

    (35) Expresion -> Expresion . OBJECTID ( Expresion lista_expr . )
    )               shift and go to state 161


state 153

    (36) Expresion -> Expresion @ TYPEID . OBJECTID ( . Expresion lista_expr )
    (37) Expresion -> Expresion @ TYPEID . OBJECTID ( . )
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    )               shift and go to state 163
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 162

state 154

    (50) lista_expr -> , Expresion lista_expr .
    )               reduce using rule 50 (lista_expr -> , Expresion lista_expr .)


state 155

    (59) lista_expr_case -> OBJECTID : TYPEID . DARROW error ; lista_expr_case
    (60) lista_expr_case -> OBJECTID : TYPEID . DARROW error ;
    (61) lista_expr_case -> OBJECTID : TYPEID . DARROW Expresion ; lista_expr_case
    (62) lista_expr_case -> OBJECTID : TYPEID . DARROW Expresion ;
    DARROW          shift and go to state 164


state 156

    (54) lista_expr_let -> OBJECTID : TYPEID ASSIGN Expresion . lista_expr_let
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    (52) lista_expr_let -> . OBJECTID : TYPEID lista_expr_let
    (53) lista_expr_let -> . , OBJECTID : TYPEID lista_expr_let
    (54) lista_expr_let -> . OBJECTID : TYPEID ASSIGN Expresion lista_expr_let
    (55) lista_expr_let -> . , OBJECTID : TYPEID ASSIGN Expresion lista_expr_let
    (56) lista_expr_let -> .
    (57) lista_expr_let -> . OBJECTID : TYPEID ASSIGN error lista_expr_let
    (58) lista_expr_let -> . , OBJECTID : TYPEID ASSIGN error lista_expr_let
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    OBJECTID        shift and go to state 79
    ,               shift and go to state 80
    IN              reduce using rule 56 (lista_expr_let -> .)

    lista_expr_let                 shift and go to state 165

state 157

    (57) lista_expr_let -> OBJECTID : TYPEID ASSIGN error . lista_expr_let
    (52) lista_expr_let -> . OBJECTID : TYPEID lista_expr_let
    (53) lista_expr_let -> . , OBJECTID : TYPEID lista_expr_let
    (54) lista_expr_let -> . OBJECTID : TYPEID ASSIGN Expresion lista_expr_let
    (55) lista_expr_let -> . , OBJECTID : TYPEID ASSIGN Expresion lista_expr_let
    (56) lista_expr_let -> .
    (57) lista_expr_let -> . OBJECTID : TYPEID ASSIGN error lista_expr_let
    (58) lista_expr_let -> . , OBJECTID : TYPEID ASSIGN error lista_expr_let
    OBJECTID        shift and go to state 79
    ,               shift and go to state 80
    IN              reduce using rule 56 (lista_expr_let -> .)

    lista_expr_let                 shift and go to state 166

state 158

    (53) lista_expr_let -> , OBJECTID : TYPEID lista_expr_let .
    IN              reduce using rule 53 (lista_expr_let -> , OBJECTID : TYPEID lista_expr_let .)


state 159

    (55) lista_expr_let -> , OBJECTID : TYPEID ASSIGN . Expresion lista_expr_let
    (58) lista_expr_let -> , OBJECTID : TYPEID ASSIGN . error lista_expr_let
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    error           shift and go to state 168
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 167

state 160

    (31) Expresion -> IF Expresion THEN Expresion ELSE Expresion . FI
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    FI              shift and go to state 169
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 161

    (35) Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .
    .               reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    @               reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    =               reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    LE              reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    <               reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    -               reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    +               reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    /               reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    *               reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    ;               reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    OF              reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    LOOP            reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    THEN            reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    )               reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    }               reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    ,               reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    POOL            reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    ELSE            reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    OBJECTID        reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    IN              reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)
    FI              reduce using rule 35 (Expresion -> Expresion . OBJECTID ( Expresion lista_expr ) .)


state 162

    (36) Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion . lista_expr )
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    (50) lista_expr -> . , Expresion lista_expr
    (51) lista_expr -> .
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    ,               shift and go to state 122
    )               reduce using rule 51 (lista_expr -> .)

    lista_expr                     shift and go to state 170

state 163

    (37) Expresion -> Expresion @ TYPEID . OBJECTID ( ) .
    .               reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    @               reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    =               reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    LE              reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    <               reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    -               reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    +               reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    /               reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    *               reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    ;               reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    OF              reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    LOOP            reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    THEN            reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    )               reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    }               reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    ,               reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    POOL            reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    ELSE            reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    OBJECTID        reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    IN              reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)
    FI              reduce using rule 37 (Expresion -> Expresion @ TYPEID . OBJECTID ( ) .)


state 164

    (59) lista_expr_case -> OBJECTID : TYPEID DARROW . error ; lista_expr_case
    (60) lista_expr_case -> OBJECTID : TYPEID DARROW . error ;
    (61) lista_expr_case -> OBJECTID : TYPEID DARROW . Expresion ; lista_expr_case
    (62) lista_expr_case -> OBJECTID : TYPEID DARROW . Expresion ;
    (20) Expresion -> . BOOL_CONST
    (21) Expresion -> . STR_CONST
    (22) Expresion -> . INT_CONST
    (23) Expresion -> . OBJECTID
    (24) Expresion -> . { error }
    (25) Expresion -> . { lista_expr_pc }
    (26) Expresion -> . NEW TYPEID
    (27) Expresion -> . CASE error OF lista_expr_case ESAC
    (28) Expresion -> . CASE Expresion OF lista_expr_case ESAC
    (29) Expresion -> . LET lista_expr_let IN Expresion
    (30) Expresion -> . WHILE Expresion LOOP Expresion POOL
    (31) Expresion -> . IF Expresion THEN Expresion ELSE Expresion FI
    (32) Expresion -> . OBJECTID ( )
    (33) Expresion -> . OBJECTID ( Expresion lista_expr )
    (34) Expresion -> . Expresion . OBJECTID ( )
    (35) Expresion -> . Expresion . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> . Expresion @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> . Expresion @ TYPEID . OBJECTID ( )
    (38) Expresion -> . ~ Expresion
    (39) Expresion -> . ISVOID Expresion
    (40) Expresion -> . NOT Expresion
    (41) Expresion -> . ( Expresion )
    (42) Expresion -> . Expresion = Expresion
    (43) Expresion -> . Expresion LE Expresion
    (44) Expresion -> . Expresion < Expresion
    (45) Expresion -> . Expresion - Expresion
    (46) Expresion -> . Expresion + Expresion
    (47) Expresion -> . Expresion / Expresion
    (48) Expresion -> . Expresion * Expresion
    (49) Expresion -> . OBJECTID ASSIGN Expresion
    error           shift and go to state 171
    BOOL_CONST      shift and go to state 43
    STR_CONST       shift and go to state 44
    INT_CONST       shift and go to state 45
    OBJECTID        shift and go to state 46
    {               shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52
    ~               shift and go to state 54
    ISVOID          shift and go to state 55
    NOT             shift and go to state 56
    (               shift and go to state 53

    Expresion                      shift and go to state 172

state 165

    (54) lista_expr_let -> OBJECTID : TYPEID ASSIGN Expresion lista_expr_let .
    IN              reduce using rule 54 (lista_expr_let -> OBJECTID : TYPEID ASSIGN Expresion lista_expr_let .)


state 166

    (57) lista_expr_let -> OBJECTID : TYPEID ASSIGN error lista_expr_let .
    IN              reduce using rule 57 (lista_expr_let -> OBJECTID : TYPEID ASSIGN error lista_expr_let .)


state 167

    (55) lista_expr_let -> , OBJECTID : TYPEID ASSIGN Expresion . lista_expr_let
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    (52) lista_expr_let -> . OBJECTID : TYPEID lista_expr_let
    (53) lista_expr_let -> . , OBJECTID : TYPEID lista_expr_let
    (54) lista_expr_let -> . OBJECTID : TYPEID ASSIGN Expresion lista_expr_let
    (55) lista_expr_let -> . , OBJECTID : TYPEID ASSIGN Expresion lista_expr_let
    (56) lista_expr_let -> .
    (57) lista_expr_let -> . OBJECTID : TYPEID ASSIGN error lista_expr_let
    (58) lista_expr_let -> . , OBJECTID : TYPEID ASSIGN error lista_expr_let
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    OBJECTID        shift and go to state 79
    ,               shift and go to state 80
    IN              reduce using rule 56 (lista_expr_let -> .)

    lista_expr_let                 shift and go to state 173

state 168

    (58) lista_expr_let -> , OBJECTID : TYPEID ASSIGN error . lista_expr_let
    (52) lista_expr_let -> . OBJECTID : TYPEID lista_expr_let
    (53) lista_expr_let -> . , OBJECTID : TYPEID lista_expr_let
    (54) lista_expr_let -> . OBJECTID : TYPEID ASSIGN Expresion lista_expr_let
    (55) lista_expr_let -> . , OBJECTID : TYPEID ASSIGN Expresion lista_expr_let
    (56) lista_expr_let -> .
    (57) lista_expr_let -> . OBJECTID : TYPEID ASSIGN error lista_expr_let
    (58) lista_expr_let -> . , OBJECTID : TYPEID ASSIGN error lista_expr_let
    OBJECTID        shift and go to state 79
    ,               shift and go to state 80
    IN              reduce using rule 56 (lista_expr_let -> .)

    lista_expr_let                 shift and go to state 174

state 169

    (31) Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .
    .               reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    @               reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    =               reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    LE              reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    <               reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    -               reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    +               reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    /               reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    *               reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    ;               reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    OF              reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    LOOP            reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    THEN            reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    )               reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    }               reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    ,               reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    POOL            reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    ELSE            reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    OBJECTID        reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    IN              reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)
    FI              reduce using rule 31 (Expresion -> IF Expresion THEN Expresion ELSE Expresion FI .)


state 170

    (36) Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr . )
    )               shift and go to state 175


state 171

    (59) lista_expr_case -> OBJECTID : TYPEID DARROW error . ; lista_expr_case
    (60) lista_expr_case -> OBJECTID : TYPEID DARROW error . ;
    ;               shift and go to state 176


state 172

    (61) lista_expr_case -> OBJECTID : TYPEID DARROW Expresion . ; lista_expr_case
    (62) lista_expr_case -> OBJECTID : TYPEID DARROW Expresion . ;
    (34) Expresion -> Expresion . . OBJECTID ( )
    (35) Expresion -> Expresion . . OBJECTID ( Expresion lista_expr )
    (36) Expresion -> Expresion . @ TYPEID . OBJECTID ( Expresion lista_expr )
    (37) Expresion -> Expresion . @ TYPEID . OBJECTID ( )
    (42) Expresion -> Expresion . = Expresion
    (43) Expresion -> Expresion . LE Expresion
    (44) Expresion -> Expresion . < Expresion
    (45) Expresion -> Expresion . - Expresion
    (46) Expresion -> Expresion . + Expresion
    (47) Expresion -> Expresion . / Expresion
    (48) Expresion -> Expresion . * Expresion
    ;               shift and go to state 177
    .               shift and go to state 61
    @               shift and go to state 62
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 173

    (55) lista_expr_let -> , OBJECTID : TYPEID ASSIGN Expresion lista_expr_let .
    IN              reduce using rule 55 (lista_expr_let -> , OBJECTID : TYPEID ASSIGN Expresion lista_expr_let .)


state 174

    (58) lista_expr_let -> , OBJECTID : TYPEID ASSIGN error lista_expr_let .
    IN              reduce using rule 58 (lista_expr_let -> , OBJECTID : TYPEID ASSIGN error lista_expr_let .)


state 175

    (36) Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .
    .               reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    @               reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    =               reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    LE              reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    <               reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    -               reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    +               reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    /               reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    *               reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    ;               reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    OF              reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    LOOP            reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    THEN            reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    )               reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    }               reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    ,               reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    POOL            reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    ELSE            reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    OBJECTID        reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    IN              reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)
    FI              reduce using rule 36 (Expresion -> Expresion @ TYPEID . OBJECTID ( Expresion lista_expr ) .)


state 176

    (59) lista_expr_case -> OBJECTID : TYPEID DARROW error ; . lista_expr_case
    (60) lista_expr_case -> OBJECTID : TYPEID DARROW error ; .
    (59) lista_expr_case -> . OBJECTID : TYPEID DARROW error ; lista_expr_case
    (60) lista_expr_case -> . OBJECTID : TYPEID DARROW error ;
    (61) lista_expr_case -> . OBJECTID : TYPEID DARROW Expresion ; lista_expr_case
    (62) lista_expr_case -> . OBJECTID : TYPEID DARROW Expresion ;
    ESAC            reduce using rule 60 (lista_expr_case -> OBJECTID : TYPEID DARROW error ; .)
    OBJECTID        shift and go to state 126

    lista_expr_case                shift and go to state 178

state 177

    (61) lista_expr_case -> OBJECTID : TYPEID DARROW Expresion ; . lista_expr_case
    (62) lista_expr_case -> OBJECTID : TYPEID DARROW Expresion ; .
    (59) lista_expr_case -> . OBJECTID : TYPEID DARROW error ; lista_expr_case
    (60) lista_expr_case -> . OBJECTID : TYPEID DARROW error ;
    (61) lista_expr_case -> . OBJECTID : TYPEID DARROW Expresion ; lista_expr_case
    (62) lista_expr_case -> . OBJECTID : TYPEID DARROW Expresion ;
    ESAC            reduce using rule 62 (lista_expr_case -> OBJECTID : TYPEID DARROW Expresion ; .)
    OBJECTID        shift and go to state 126

    lista_expr_case                shift and go to state 179

state 178

    (59) lista_expr_case -> OBJECTID : TYPEID DARROW error ; lista_expr_case .
    ESAC            reduce using rule 59 (lista_expr_case -> OBJECTID : TYPEID DARROW error ; lista_expr_case .)


state 179

    (61) lista_expr_case -> OBJECTID : TYPEID DARROW Expresion ; lista_expr_case .
    ESAC            reduce using rule 61 (lista_expr_case -> OBJECTID : TYPEID DARROW Expresion ; lista_expr_case .)


Conflicts:

shift/reduce conflict for . in state 128 resolved as shift
shift/reduce conflict for @ in state 128 resolved as shift
shift/reduce conflict for = in state 128 resolved as shift
shift/reduce conflict for LE in state 128 resolved as shift
shift/reduce conflict for < in state 128 resolved as shift
shift/reduce conflict for - in state 128 resolved as shift
shift/reduce conflict for + in state 128 resolved as shift
shift/reduce conflict for / in state 128 resolved as shift
shift/reduce conflict for * in state 128 resolved as shift