Grammar:

Rule 0     S' -> Programa
Rule 1     Programa -> Programa error
Rule 2     Programa -> Clase ;
Rule 3     Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
Rule 4     Clase -> CLASS TYPEID INHERITS TYPEID { }
Rule 5     Clase -> CLASS TYPEID { cuerpo_clase }
Rule 6     Clase -> CLASS TYPEID { }
Rule 7     cuerpo_clase -> cuerpo_clase caracteristica ;
Rule 8     cuerpo_clase -> <empty>
Rule 9     caracteristica -> Metodo ;
Rule 10    caracteristica -> Atributo ;
Rule 11    Atributo -> OBJECTID : TYPEID ASSIGN expr  [precedence=right, level=1]
Rule 12    Atributo -> OBJECTID : TYPEID
Rule 13    Metodo -> OBJECTID ( formal ) : TYPEID { expr }
Rule 14    Metodo -> OBJECTID ( ) : TYPEID { expr }
Rule 15    Metodo -> OBJECTID ( ) : TYPEID { }
Rule 16    formal -> OBJECTID : TYPEID
Rule 17    formal -> <empty>
Rule 18    expr -> BOOL_CONST
Rule 19    expr -> STR_CONST
Rule 20    expr -> INT_CONST
Rule 21    expr -> OBJECTID
Rule 22    expr -> { expr }
Rule 23    expr -> NEW TYPEID
Rule 24    expr -> CASE expr OF { cuerpo_case } ESAC
Rule 25    expr -> CASE expr OF { } ESAC
Rule 26    expr -> LET OBJECTID : TYPEID lista_inicia IN expr
Rule 27    expr -> WHILE expr LOOP expr POOL
Rule 28    expr -> IF expr THEN expr ELSE expr FI
Rule 29    expr -> OBJECTID ( )
Rule 30    expr -> OBJECTID ( expr )
Rule 31    expr -> expr @ TYPEID . OBJECTID ( expr )
Rule 32    expr -> expr @ TYPEID . OBJECTID ( )
Rule 33    expr -> ( expr )
Rule 34    expr -> ~ expr
Rule 35    expr -> ISVOID expr  [precedence=left, level=5]
Rule 36    expr -> NOT expr  [precedence=left, level=2]
Rule 37    expr -> expr = expr
Rule 38    expr -> expr LE expr
Rule 39    expr -> expr < expr
Rule 40    expr -> expr / expr  [precedence=left, level=4]
Rule 41    expr -> expr * expr  [precedence=left, level=4]
Rule 42    expr -> expr - expr  [precedence=left, level=3]
Rule 43    expr -> expr + expr  [precedence=left, level=3]
Rule 44    expr -> OBJECTID ASSIGN expr  [precedence=right, level=1]
Rule 45    lista_inicia -> OBJECTID : TYPEID
Rule 46    cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ;
Rule 47    cuerpo_case -> <empty>
Rule 48    bloque -> bloque expr ;
Rule 49    bloque -> expr ;

Unused terminals:

    NUMBER
    COMMENT_BLOQUE
    COMMENT_1LINEA
    ERROR

Terminals, with rules where they appear:

(                    : 13 14 15 29 30 31 32 33
)                    : 13 14 15 29 30 31 32 33
*                    : 41
+                    : 43
-                    : 42
.                    : 31 32
/                    : 40
:                    : 11 12 13 14 15 16 26 45 46
;                    : 2 7 9 10 46 48 49
<                    : 39
=                    : 37
@                    : 31 32
ASSIGN               : 11 44
BOOL_CONST           : 18
CASE                 : 24 25
CLASS                : 3 4 5 6
COMMENT_1LINEA       : 
COMMENT_BLOQUE       : 
DARROW               : 46
ELSE                 : 28
ERROR                : 
ESAC                 : 24 25
FI                   : 28
IF                   : 28
IN                   : 26
INHERITS             : 3 4
INT_CONST            : 20
ISVOID               : 35
LE                   : 38
LET                  : 26
LOOP                 : 27
NEW                  : 23
NOT                  : 36
NUMBER               : 
OBJECTID             : 11 12 13 14 15 16 21 26 29 30 31 32 44 45 46
OF                   : 24 25
POOL                 : 27
STR_CONST            : 19
THEN                 : 28
TYPEID               : 3 3 4 4 5 6 11 12 13 14 15 16 23 26 31 32 45 46
WHILE                : 27
error                : 1
{                    : 3 4 5 6 13 14 15 22 24 25
}                    : 3 4 5 6 13 14 15 22 24 25
~                    : 34

Nonterminals, with rules where they appear:

Atributo             : 10
Clase                : 2
Metodo               : 9
Programa             : 1 0
bloque               : 48
caracteristica       : 7
cuerpo_case          : 24 46
cuerpo_clase         : 3 5 7
expr                 : 11 13 14 22 24 25 26 27 27 28 28 28 30 31 31 32 33 34 35 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 46 48 49
formal               : 13
lista_inicia         : 26


state 0

    (0) S' -> . Programa
    (1) Programa -> . Programa error
    (2) Programa -> . Clase ;
    (3) Clase -> . CLASS TYPEID INHERITS TYPEID { cuerpo_clase }
    (4) Clase -> . CLASS TYPEID INHERITS TYPEID { }
    (5) Clase -> . CLASS TYPEID { cuerpo_clase }
    (6) Clase -> . CLASS TYPEID { }
    CLASS           shift and go to state 3

    Programa                       shift and go to state 1
    Clase                          shift and go to state 2

state 1

    (0) S' -> Programa .
    (1) Programa -> Programa . error
    error           shift and go to state 4


state 2

    (2) Programa -> Clase . ;
    ;               shift and go to state 5


state 3

    (3) Clase -> CLASS . TYPEID INHERITS TYPEID { cuerpo_clase }
    (4) Clase -> CLASS . TYPEID INHERITS TYPEID { }
    (5) Clase -> CLASS . TYPEID { cuerpo_clase }
    (6) Clase -> CLASS . TYPEID { }
    TYPEID          shift and go to state 6


state 4

    (1) Programa -> Programa error .
    error           reduce using rule 1 (Programa -> Programa error .)
    $end            reduce using rule 1 (Programa -> Programa error .)


state 5

    (2) Programa -> Clase ; .
    error           reduce using rule 2 (Programa -> Clase ; .)
    $end            reduce using rule 2 (Programa -> Clase ; .)


state 6

    (3) Clase -> CLASS TYPEID . INHERITS TYPEID { cuerpo_clase }
    (4) Clase -> CLASS TYPEID . INHERITS TYPEID { }
    (5) Clase -> CLASS TYPEID . { cuerpo_clase }
    (6) Clase -> CLASS TYPEID . { }
    INHERITS        shift and go to state 7
    {               shift and go to state 8


state 7

    (3) Clase -> CLASS TYPEID INHERITS . TYPEID { cuerpo_clase }
    (4) Clase -> CLASS TYPEID INHERITS . TYPEID { }
    TYPEID          shift and go to state 9


state 8

    (5) Clase -> CLASS TYPEID { . cuerpo_clase }
    (6) Clase -> CLASS TYPEID { . }
    (7) cuerpo_clase -> . cuerpo_clase caracteristica ;
    (8) cuerpo_clase -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 11
    OBJECTID        reduce using rule 8 (cuerpo_clase -> .)

    cuerpo_clase                   shift and go to state 10

state 9

    (3) Clase -> CLASS TYPEID INHERITS TYPEID . { cuerpo_clase }
    (4) Clase -> CLASS TYPEID INHERITS TYPEID . { }
    {               shift and go to state 12


state 10

    (5) Clase -> CLASS TYPEID { cuerpo_clase . }
    (7) cuerpo_clase -> cuerpo_clase . caracteristica ;
    (9) caracteristica -> . Metodo ;
    (10) caracteristica -> . Atributo ;
    (13) Metodo -> . OBJECTID ( formal ) : TYPEID { expr }
    (14) Metodo -> . OBJECTID ( ) : TYPEID { expr }
    (15) Metodo -> . OBJECTID ( ) : TYPEID { }
    (11) Atributo -> . OBJECTID : TYPEID ASSIGN expr
    (12) Atributo -> . OBJECTID : TYPEID
    }               shift and go to state 13
    OBJECTID        shift and go to state 17

    caracteristica                 shift and go to state 14
    Metodo                         shift and go to state 15
    Atributo                       shift and go to state 16

state 11

    (6) Clase -> CLASS TYPEID { } .
    ;               reduce using rule 6 (Clase -> CLASS TYPEID { } .)


state 12

    (3) Clase -> CLASS TYPEID INHERITS TYPEID { . cuerpo_clase }
    (4) Clase -> CLASS TYPEID INHERITS TYPEID { . }
    (7) cuerpo_clase -> . cuerpo_clase caracteristica ;
    (8) cuerpo_clase -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 19
    OBJECTID        reduce using rule 8 (cuerpo_clase -> .)

    cuerpo_clase                   shift and go to state 18

state 13

    (5) Clase -> CLASS TYPEID { cuerpo_clase } .
    ;               reduce using rule 5 (Clase -> CLASS TYPEID { cuerpo_clase } .)


state 14

    (7) cuerpo_clase -> cuerpo_clase caracteristica . ;
    ;               shift and go to state 20


state 15

    (9) caracteristica -> Metodo . ;
    ;               shift and go to state 21


state 16

    (10) caracteristica -> Atributo . ;
    ;               shift and go to state 22


state 17

    (13) Metodo -> OBJECTID . ( formal ) : TYPEID { expr }
    (14) Metodo -> OBJECTID . ( ) : TYPEID { expr }
    (15) Metodo -> OBJECTID . ( ) : TYPEID { }
    (11) Atributo -> OBJECTID . : TYPEID ASSIGN expr
    (12) Atributo -> OBJECTID . : TYPEID
    (               shift and go to state 23
    :               shift and go to state 24


state 18

    (3) Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase . }
    (7) cuerpo_clase -> cuerpo_clase . caracteristica ;
    (9) caracteristica -> . Metodo ;
    (10) caracteristica -> . Atributo ;
    (13) Metodo -> . OBJECTID ( formal ) : TYPEID { expr }
    (14) Metodo -> . OBJECTID ( ) : TYPEID { expr }
    (15) Metodo -> . OBJECTID ( ) : TYPEID { }
    (11) Atributo -> . OBJECTID : TYPEID ASSIGN expr
    (12) Atributo -> . OBJECTID : TYPEID
    }               shift and go to state 25
    OBJECTID        shift and go to state 17

    caracteristica                 shift and go to state 14
    Metodo                         shift and go to state 15
    Atributo                       shift and go to state 16

state 19

    (4) Clase -> CLASS TYPEID INHERITS TYPEID { } .
    ;               reduce using rule 4 (Clase -> CLASS TYPEID INHERITS TYPEID { } .)


state 20

    (7) cuerpo_clase -> cuerpo_clase caracteristica ; .
    }               reduce using rule 7 (cuerpo_clase -> cuerpo_clase caracteristica ; .)
    OBJECTID        reduce using rule 7 (cuerpo_clase -> cuerpo_clase caracteristica ; .)


state 21

    (9) caracteristica -> Metodo ; .
    ;               reduce using rule 9 (caracteristica -> Metodo ; .)


state 22

    (10) caracteristica -> Atributo ; .
    ;               reduce using rule 10 (caracteristica -> Atributo ; .)


state 23

    (13) Metodo -> OBJECTID ( . formal ) : TYPEID { expr }
    (14) Metodo -> OBJECTID ( . ) : TYPEID { expr }
    (15) Metodo -> OBJECTID ( . ) : TYPEID { }
    (16) formal -> . OBJECTID : TYPEID
    (17) formal -> .
  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 28
    OBJECTID        shift and go to state 26

    formal                         shift and go to state 27

state 24

    (11) Atributo -> OBJECTID : . TYPEID ASSIGN expr
    (12) Atributo -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 29


state 25

    (3) Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase } .
    ;               reduce using rule 3 (Clase -> CLASS TYPEID INHERITS TYPEID { cuerpo_clase } .)


state 26

    (16) formal -> OBJECTID . : TYPEID
    :               shift and go to state 30


state 27

    (13) Metodo -> OBJECTID ( formal . ) : TYPEID { expr }
    )               shift and go to state 31


state 28

    (14) Metodo -> OBJECTID ( ) . : TYPEID { expr }
    (15) Metodo -> OBJECTID ( ) . : TYPEID { }
    :               shift and go to state 32


state 29

    (11) Atributo -> OBJECTID : TYPEID . ASSIGN expr
    (12) Atributo -> OBJECTID : TYPEID .
    ASSIGN          shift and go to state 33
    ;               reduce using rule 12 (Atributo -> OBJECTID : TYPEID .)


state 30

    (16) formal -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 34


state 31

    (13) Metodo -> OBJECTID ( formal ) . : TYPEID { expr }
    :               shift and go to state 35


state 32

    (14) Metodo -> OBJECTID ( ) : . TYPEID { expr }
    (15) Metodo -> OBJECTID ( ) : . TYPEID { }
    TYPEID          shift and go to state 36


state 33

    (11) Atributo -> OBJECTID : TYPEID ASSIGN . expr
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 38

state 34

    (16) formal -> OBJECTID : TYPEID .
    )               reduce using rule 16 (formal -> OBJECTID : TYPEID .)


state 35

    (13) Metodo -> OBJECTID ( formal ) : . TYPEID { expr }
    TYPEID          shift and go to state 52


state 36

    (14) Metodo -> OBJECTID ( ) : TYPEID . { expr }
    (15) Metodo -> OBJECTID ( ) : TYPEID . { }
    {               shift and go to state 53


state 37

    (21) expr -> OBJECTID .
    (29) expr -> OBJECTID . ( )
    (30) expr -> OBJECTID . ( expr )
    (44) expr -> OBJECTID . ASSIGN expr
    @               reduce using rule 21 (expr -> OBJECTID .)
    =               reduce using rule 21 (expr -> OBJECTID .)
    LE              reduce using rule 21 (expr -> OBJECTID .)
    <               reduce using rule 21 (expr -> OBJECTID .)
    /               reduce using rule 21 (expr -> OBJECTID .)
    *               reduce using rule 21 (expr -> OBJECTID .)
    -               reduce using rule 21 (expr -> OBJECTID .)
    +               reduce using rule 21 (expr -> OBJECTID .)
    ;               reduce using rule 21 (expr -> OBJECTID .)
    }               reduce using rule 21 (expr -> OBJECTID .)
    OF              reduce using rule 21 (expr -> OBJECTID .)
    LOOP            reduce using rule 21 (expr -> OBJECTID .)
    THEN            reduce using rule 21 (expr -> OBJECTID .)
    )               reduce using rule 21 (expr -> OBJECTID .)
    POOL            reduce using rule 21 (expr -> OBJECTID .)
    ELSE            reduce using rule 21 (expr -> OBJECTID .)
    FI              reduce using rule 21 (expr -> OBJECTID .)
    (               shift and go to state 54
    ASSIGN          shift and go to state 55


state 38

    (11) Atributo -> OBJECTID : TYPEID ASSIGN expr .
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    ;               reduce using rule 11 (Atributo -> OBJECTID : TYPEID ASSIGN expr .)
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 39

    (18) expr -> BOOL_CONST .
    @               reduce using rule 18 (expr -> BOOL_CONST .)
    =               reduce using rule 18 (expr -> BOOL_CONST .)
    LE              reduce using rule 18 (expr -> BOOL_CONST .)
    <               reduce using rule 18 (expr -> BOOL_CONST .)
    /               reduce using rule 18 (expr -> BOOL_CONST .)
    *               reduce using rule 18 (expr -> BOOL_CONST .)
    -               reduce using rule 18 (expr -> BOOL_CONST .)
    +               reduce using rule 18 (expr -> BOOL_CONST .)
    ;               reduce using rule 18 (expr -> BOOL_CONST .)
    }               reduce using rule 18 (expr -> BOOL_CONST .)
    OF              reduce using rule 18 (expr -> BOOL_CONST .)
    LOOP            reduce using rule 18 (expr -> BOOL_CONST .)
    THEN            reduce using rule 18 (expr -> BOOL_CONST .)
    )               reduce using rule 18 (expr -> BOOL_CONST .)
    POOL            reduce using rule 18 (expr -> BOOL_CONST .)
    ELSE            reduce using rule 18 (expr -> BOOL_CONST .)
    FI              reduce using rule 18 (expr -> BOOL_CONST .)


state 40

    (19) expr -> STR_CONST .
    @               reduce using rule 19 (expr -> STR_CONST .)
    =               reduce using rule 19 (expr -> STR_CONST .)
    LE              reduce using rule 19 (expr -> STR_CONST .)
    <               reduce using rule 19 (expr -> STR_CONST .)
    /               reduce using rule 19 (expr -> STR_CONST .)
    *               reduce using rule 19 (expr -> STR_CONST .)
    -               reduce using rule 19 (expr -> STR_CONST .)
    +               reduce using rule 19 (expr -> STR_CONST .)
    ;               reduce using rule 19 (expr -> STR_CONST .)
    }               reduce using rule 19 (expr -> STR_CONST .)
    OF              reduce using rule 19 (expr -> STR_CONST .)
    LOOP            reduce using rule 19 (expr -> STR_CONST .)
    THEN            reduce using rule 19 (expr -> STR_CONST .)
    )               reduce using rule 19 (expr -> STR_CONST .)
    POOL            reduce using rule 19 (expr -> STR_CONST .)
    ELSE            reduce using rule 19 (expr -> STR_CONST .)
    FI              reduce using rule 19 (expr -> STR_CONST .)


state 41

    (20) expr -> INT_CONST .
    @               reduce using rule 20 (expr -> INT_CONST .)
    =               reduce using rule 20 (expr -> INT_CONST .)
    LE              reduce using rule 20 (expr -> INT_CONST .)
    <               reduce using rule 20 (expr -> INT_CONST .)
    /               reduce using rule 20 (expr -> INT_CONST .)
    *               reduce using rule 20 (expr -> INT_CONST .)
    -               reduce using rule 20 (expr -> INT_CONST .)
    +               reduce using rule 20 (expr -> INT_CONST .)
    ;               reduce using rule 20 (expr -> INT_CONST .)
    }               reduce using rule 20 (expr -> INT_CONST .)
    OF              reduce using rule 20 (expr -> INT_CONST .)
    LOOP            reduce using rule 20 (expr -> INT_CONST .)
    THEN            reduce using rule 20 (expr -> INT_CONST .)
    )               reduce using rule 20 (expr -> INT_CONST .)
    POOL            reduce using rule 20 (expr -> INT_CONST .)
    ELSE            reduce using rule 20 (expr -> INT_CONST .)
    FI              reduce using rule 20 (expr -> INT_CONST .)


state 42

    (22) expr -> { . expr }
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 64

state 43

    (23) expr -> NEW . TYPEID
    TYPEID          shift and go to state 65


state 44

    (24) expr -> CASE . expr OF { cuerpo_case } ESAC
    (25) expr -> CASE . expr OF { } ESAC
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 66

state 45

    (26) expr -> LET . OBJECTID : TYPEID lista_inicia IN expr
    OBJECTID        shift and go to state 67


state 46

    (27) expr -> WHILE . expr LOOP expr POOL
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 68

state 47

    (28) expr -> IF . expr THEN expr ELSE expr FI
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 69

state 48

    (33) expr -> ( . expr )
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 70

state 49

    (34) expr -> ~ . expr
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 71

state 50

    (35) expr -> ISVOID . expr
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 72

state 51

    (36) expr -> NOT . expr
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 73

state 52

    (13) Metodo -> OBJECTID ( formal ) : TYPEID . { expr }
    {               shift and go to state 74


state 53

    (14) Metodo -> OBJECTID ( ) : TYPEID { . expr }
    (15) Metodo -> OBJECTID ( ) : TYPEID { . }
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    }               shift and go to state 76
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 75

state 54

    (29) expr -> OBJECTID ( . )
    (30) expr -> OBJECTID ( . expr )
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    )               shift and go to state 77
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 78

state 55

    (44) expr -> OBJECTID ASSIGN . expr
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 79

state 56

    (31) expr -> expr @ . TYPEID . OBJECTID ( expr )
    (32) expr -> expr @ . TYPEID . OBJECTID ( )
    TYPEID          shift and go to state 80


state 57

    (37) expr -> expr = . expr
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 81

state 58

    (38) expr -> expr LE . expr
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 82

state 59

    (39) expr -> expr < . expr
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 83

state 60

    (40) expr -> expr / . expr
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 84

state 61

    (41) expr -> expr * . expr
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 85

state 62

    (42) expr -> expr - . expr
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 86

state 63

    (43) expr -> expr + . expr
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 87

state 64

    (22) expr -> { expr . }
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    }               shift and go to state 88
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 65

    (23) expr -> NEW TYPEID .
    @               reduce using rule 23 (expr -> NEW TYPEID .)
    =               reduce using rule 23 (expr -> NEW TYPEID .)
    LE              reduce using rule 23 (expr -> NEW TYPEID .)
    <               reduce using rule 23 (expr -> NEW TYPEID .)
    /               reduce using rule 23 (expr -> NEW TYPEID .)
    *               reduce using rule 23 (expr -> NEW TYPEID .)
    -               reduce using rule 23 (expr -> NEW TYPEID .)
    +               reduce using rule 23 (expr -> NEW TYPEID .)
    ;               reduce using rule 23 (expr -> NEW TYPEID .)
    }               reduce using rule 23 (expr -> NEW TYPEID .)
    OF              reduce using rule 23 (expr -> NEW TYPEID .)
    LOOP            reduce using rule 23 (expr -> NEW TYPEID .)
    THEN            reduce using rule 23 (expr -> NEW TYPEID .)
    )               reduce using rule 23 (expr -> NEW TYPEID .)
    POOL            reduce using rule 23 (expr -> NEW TYPEID .)
    ELSE            reduce using rule 23 (expr -> NEW TYPEID .)
    FI              reduce using rule 23 (expr -> NEW TYPEID .)


state 66

    (24) expr -> CASE expr . OF { cuerpo_case } ESAC
    (25) expr -> CASE expr . OF { } ESAC
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    OF              shift and go to state 89
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 67

    (26) expr -> LET OBJECTID . : TYPEID lista_inicia IN expr
    :               shift and go to state 90


state 68

    (27) expr -> WHILE expr . LOOP expr POOL
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    LOOP            shift and go to state 91
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 69

    (28) expr -> IF expr . THEN expr ELSE expr FI
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    THEN            shift and go to state 92
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 70

    (33) expr -> ( expr . )
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    )               shift and go to state 93
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 71

    (34) expr -> ~ expr .
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 34 (expr -> ~ expr .)
    }               reduce using rule 34 (expr -> ~ expr .)
    OF              reduce using rule 34 (expr -> ~ expr .)
    LOOP            reduce using rule 34 (expr -> ~ expr .)
    THEN            reduce using rule 34 (expr -> ~ expr .)
    )               reduce using rule 34 (expr -> ~ expr .)
    POOL            reduce using rule 34 (expr -> ~ expr .)
    ELSE            reduce using rule 34 (expr -> ~ expr .)
    FI              reduce using rule 34 (expr -> ~ expr .)
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 72

    (35) expr -> ISVOID expr .
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    @               reduce using rule 35 (expr -> ISVOID expr .)
    =               reduce using rule 35 (expr -> ISVOID expr .)
    LE              reduce using rule 35 (expr -> ISVOID expr .)
    <               reduce using rule 35 (expr -> ISVOID expr .)
    /               reduce using rule 35 (expr -> ISVOID expr .)
    *               reduce using rule 35 (expr -> ISVOID expr .)
    -               reduce using rule 35 (expr -> ISVOID expr .)
    +               reduce using rule 35 (expr -> ISVOID expr .)
    ;               reduce using rule 35 (expr -> ISVOID expr .)
    }               reduce using rule 35 (expr -> ISVOID expr .)
    OF              reduce using rule 35 (expr -> ISVOID expr .)
    LOOP            reduce using rule 35 (expr -> ISVOID expr .)
    THEN            reduce using rule 35 (expr -> ISVOID expr .)
    )               reduce using rule 35 (expr -> ISVOID expr .)
    POOL            reduce using rule 35 (expr -> ISVOID expr .)
    ELSE            reduce using rule 35 (expr -> ISVOID expr .)
    FI              reduce using rule 35 (expr -> ISVOID expr .)


state 73

    (36) expr -> NOT expr .
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    @               reduce using rule 36 (expr -> NOT expr .)
    =               reduce using rule 36 (expr -> NOT expr .)
    LE              reduce using rule 36 (expr -> NOT expr .)
    <               reduce using rule 36 (expr -> NOT expr .)
    ;               reduce using rule 36 (expr -> NOT expr .)
    }               reduce using rule 36 (expr -> NOT expr .)
    OF              reduce using rule 36 (expr -> NOT expr .)
    LOOP            reduce using rule 36 (expr -> NOT expr .)
    THEN            reduce using rule 36 (expr -> NOT expr .)
    )               reduce using rule 36 (expr -> NOT expr .)
    POOL            reduce using rule 36 (expr -> NOT expr .)
    ELSE            reduce using rule 36 (expr -> NOT expr .)
    FI              reduce using rule 36 (expr -> NOT expr .)
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 74

    (13) Metodo -> OBJECTID ( formal ) : TYPEID { . expr }
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 94

state 75

    (14) Metodo -> OBJECTID ( ) : TYPEID { expr . }
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    }               shift and go to state 95
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 76

    (15) Metodo -> OBJECTID ( ) : TYPEID { } .
    ;               reduce using rule 15 (Metodo -> OBJECTID ( ) : TYPEID { } .)


state 77

    (29) expr -> OBJECTID ( ) .
    @               reduce using rule 29 (expr -> OBJECTID ( ) .)
    =               reduce using rule 29 (expr -> OBJECTID ( ) .)
    LE              reduce using rule 29 (expr -> OBJECTID ( ) .)
    <               reduce using rule 29 (expr -> OBJECTID ( ) .)
    /               reduce using rule 29 (expr -> OBJECTID ( ) .)
    *               reduce using rule 29 (expr -> OBJECTID ( ) .)
    -               reduce using rule 29 (expr -> OBJECTID ( ) .)
    +               reduce using rule 29 (expr -> OBJECTID ( ) .)
    ;               reduce using rule 29 (expr -> OBJECTID ( ) .)
    }               reduce using rule 29 (expr -> OBJECTID ( ) .)
    OF              reduce using rule 29 (expr -> OBJECTID ( ) .)
    LOOP            reduce using rule 29 (expr -> OBJECTID ( ) .)
    THEN            reduce using rule 29 (expr -> OBJECTID ( ) .)
    )               reduce using rule 29 (expr -> OBJECTID ( ) .)
    POOL            reduce using rule 29 (expr -> OBJECTID ( ) .)
    ELSE            reduce using rule 29 (expr -> OBJECTID ( ) .)
    FI              reduce using rule 29 (expr -> OBJECTID ( ) .)


state 78

    (30) expr -> OBJECTID ( expr . )
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    )               shift and go to state 96
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 79

    (44) expr -> OBJECTID ASSIGN expr .
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    @               reduce using rule 44 (expr -> OBJECTID ASSIGN expr .)
    =               reduce using rule 44 (expr -> OBJECTID ASSIGN expr .)
    LE              reduce using rule 44 (expr -> OBJECTID ASSIGN expr .)
    <               reduce using rule 44 (expr -> OBJECTID ASSIGN expr .)
    ;               reduce using rule 44 (expr -> OBJECTID ASSIGN expr .)
    }               reduce using rule 44 (expr -> OBJECTID ASSIGN expr .)
    OF              reduce using rule 44 (expr -> OBJECTID ASSIGN expr .)
    LOOP            reduce using rule 44 (expr -> OBJECTID ASSIGN expr .)
    THEN            reduce using rule 44 (expr -> OBJECTID ASSIGN expr .)
    )               reduce using rule 44 (expr -> OBJECTID ASSIGN expr .)
    POOL            reduce using rule 44 (expr -> OBJECTID ASSIGN expr .)
    ELSE            reduce using rule 44 (expr -> OBJECTID ASSIGN expr .)
    FI              reduce using rule 44 (expr -> OBJECTID ASSIGN expr .)
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 80

    (31) expr -> expr @ TYPEID . . OBJECTID ( expr )
    (32) expr -> expr @ TYPEID . . OBJECTID ( )
    .               shift and go to state 97


state 81

    (37) expr -> expr = expr .
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 37 (expr -> expr = expr .)
    }               reduce using rule 37 (expr -> expr = expr .)
    OF              reduce using rule 37 (expr -> expr = expr .)
    LOOP            reduce using rule 37 (expr -> expr = expr .)
    THEN            reduce using rule 37 (expr -> expr = expr .)
    )               reduce using rule 37 (expr -> expr = expr .)
    POOL            reduce using rule 37 (expr -> expr = expr .)
    ELSE            reduce using rule 37 (expr -> expr = expr .)
    FI              reduce using rule 37 (expr -> expr = expr .)
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 82

    (38) expr -> expr LE expr .
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 38 (expr -> expr LE expr .)
    }               reduce using rule 38 (expr -> expr LE expr .)
    OF              reduce using rule 38 (expr -> expr LE expr .)
    LOOP            reduce using rule 38 (expr -> expr LE expr .)
    THEN            reduce using rule 38 (expr -> expr LE expr .)
    )               reduce using rule 38 (expr -> expr LE expr .)
    POOL            reduce using rule 38 (expr -> expr LE expr .)
    ELSE            reduce using rule 38 (expr -> expr LE expr .)
    FI              reduce using rule 38 (expr -> expr LE expr .)
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 83

    (39) expr -> expr < expr .
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 39 (expr -> expr < expr .)
    }               reduce using rule 39 (expr -> expr < expr .)
    OF              reduce using rule 39 (expr -> expr < expr .)
    LOOP            reduce using rule 39 (expr -> expr < expr .)
    THEN            reduce using rule 39 (expr -> expr < expr .)
    )               reduce using rule 39 (expr -> expr < expr .)
    POOL            reduce using rule 39 (expr -> expr < expr .)
    ELSE            reduce using rule 39 (expr -> expr < expr .)
    FI              reduce using rule 39 (expr -> expr < expr .)
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 84

    (40) expr -> expr / expr .
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    @               reduce using rule 40 (expr -> expr / expr .)
    =               reduce using rule 40 (expr -> expr / expr .)
    LE              reduce using rule 40 (expr -> expr / expr .)
    <               reduce using rule 40 (expr -> expr / expr .)
    /               reduce using rule 40 (expr -> expr / expr .)
    *               reduce using rule 40 (expr -> expr / expr .)
    -               reduce using rule 40 (expr -> expr / expr .)
    +               reduce using rule 40 (expr -> expr / expr .)
    ;               reduce using rule 40 (expr -> expr / expr .)
    }               reduce using rule 40 (expr -> expr / expr .)
    OF              reduce using rule 40 (expr -> expr / expr .)
    LOOP            reduce using rule 40 (expr -> expr / expr .)
    THEN            reduce using rule 40 (expr -> expr / expr .)
    )               reduce using rule 40 (expr -> expr / expr .)
    POOL            reduce using rule 40 (expr -> expr / expr .)
    ELSE            reduce using rule 40 (expr -> expr / expr .)
    FI              reduce using rule 40 (expr -> expr / expr .)


state 85

    (41) expr -> expr * expr .
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    @               reduce using rule 41 (expr -> expr * expr .)
    =               reduce using rule 41 (expr -> expr * expr .)
    LE              reduce using rule 41 (expr -> expr * expr .)
    <               reduce using rule 41 (expr -> expr * expr .)
    /               reduce using rule 41 (expr -> expr * expr .)
    *               reduce using rule 41 (expr -> expr * expr .)
    -               reduce using rule 41 (expr -> expr * expr .)
    +               reduce using rule 41 (expr -> expr * expr .)
    ;               reduce using rule 41 (expr -> expr * expr .)
    }               reduce using rule 41 (expr -> expr * expr .)
    OF              reduce using rule 41 (expr -> expr * expr .)
    LOOP            reduce using rule 41 (expr -> expr * expr .)
    THEN            reduce using rule 41 (expr -> expr * expr .)
    )               reduce using rule 41 (expr -> expr * expr .)
    POOL            reduce using rule 41 (expr -> expr * expr .)
    ELSE            reduce using rule 41 (expr -> expr * expr .)
    FI              reduce using rule 41 (expr -> expr * expr .)


state 86

    (42) expr -> expr - expr .
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    @               reduce using rule 42 (expr -> expr - expr .)
    =               reduce using rule 42 (expr -> expr - expr .)
    LE              reduce using rule 42 (expr -> expr - expr .)
    <               reduce using rule 42 (expr -> expr - expr .)
    -               reduce using rule 42 (expr -> expr - expr .)
    +               reduce using rule 42 (expr -> expr - expr .)
    ;               reduce using rule 42 (expr -> expr - expr .)
    }               reduce using rule 42 (expr -> expr - expr .)
    OF              reduce using rule 42 (expr -> expr - expr .)
    LOOP            reduce using rule 42 (expr -> expr - expr .)
    THEN            reduce using rule 42 (expr -> expr - expr .)
    )               reduce using rule 42 (expr -> expr - expr .)
    POOL            reduce using rule 42 (expr -> expr - expr .)
    ELSE            reduce using rule 42 (expr -> expr - expr .)
    FI              reduce using rule 42 (expr -> expr - expr .)
    /               shift and go to state 60
    *               shift and go to state 61


state 87

    (43) expr -> expr + expr .
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    @               reduce using rule 43 (expr -> expr + expr .)
    =               reduce using rule 43 (expr -> expr + expr .)
    LE              reduce using rule 43 (expr -> expr + expr .)
    <               reduce using rule 43 (expr -> expr + expr .)
    -               reduce using rule 43 (expr -> expr + expr .)
    +               reduce using rule 43 (expr -> expr + expr .)
    ;               reduce using rule 43 (expr -> expr + expr .)
    }               reduce using rule 43 (expr -> expr + expr .)
    OF              reduce using rule 43 (expr -> expr + expr .)
    LOOP            reduce using rule 43 (expr -> expr + expr .)
    THEN            reduce using rule 43 (expr -> expr + expr .)
    )               reduce using rule 43 (expr -> expr + expr .)
    POOL            reduce using rule 43 (expr -> expr + expr .)
    ELSE            reduce using rule 43 (expr -> expr + expr .)
    FI              reduce using rule 43 (expr -> expr + expr .)
    /               shift and go to state 60
    *               shift and go to state 61


state 88

    (22) expr -> { expr } .
    @               reduce using rule 22 (expr -> { expr } .)
    =               reduce using rule 22 (expr -> { expr } .)
    LE              reduce using rule 22 (expr -> { expr } .)
    <               reduce using rule 22 (expr -> { expr } .)
    /               reduce using rule 22 (expr -> { expr } .)
    *               reduce using rule 22 (expr -> { expr } .)
    -               reduce using rule 22 (expr -> { expr } .)
    +               reduce using rule 22 (expr -> { expr } .)
    ;               reduce using rule 22 (expr -> { expr } .)
    }               reduce using rule 22 (expr -> { expr } .)
    OF              reduce using rule 22 (expr -> { expr } .)
    LOOP            reduce using rule 22 (expr -> { expr } .)
    THEN            reduce using rule 22 (expr -> { expr } .)
    )               reduce using rule 22 (expr -> { expr } .)
    POOL            reduce using rule 22 (expr -> { expr } .)
    ELSE            reduce using rule 22 (expr -> { expr } .)
    FI              reduce using rule 22 (expr -> { expr } .)


state 89

    (24) expr -> CASE expr OF . { cuerpo_case } ESAC
    (25) expr -> CASE expr OF . { } ESAC
    {               shift and go to state 98


state 90

    (26) expr -> LET OBJECTID : . TYPEID lista_inicia IN expr
    TYPEID          shift and go to state 99


state 91

    (27) expr -> WHILE expr LOOP . expr POOL
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 100

state 92

    (28) expr -> IF expr THEN . expr ELSE expr FI
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 101

state 93

    (33) expr -> ( expr ) .
    @               reduce using rule 33 (expr -> ( expr ) .)
    =               reduce using rule 33 (expr -> ( expr ) .)
    LE              reduce using rule 33 (expr -> ( expr ) .)
    <               reduce using rule 33 (expr -> ( expr ) .)
    /               reduce using rule 33 (expr -> ( expr ) .)
    *               reduce using rule 33 (expr -> ( expr ) .)
    -               reduce using rule 33 (expr -> ( expr ) .)
    +               reduce using rule 33 (expr -> ( expr ) .)
    ;               reduce using rule 33 (expr -> ( expr ) .)
    }               reduce using rule 33 (expr -> ( expr ) .)
    OF              reduce using rule 33 (expr -> ( expr ) .)
    LOOP            reduce using rule 33 (expr -> ( expr ) .)
    THEN            reduce using rule 33 (expr -> ( expr ) .)
    )               reduce using rule 33 (expr -> ( expr ) .)
    POOL            reduce using rule 33 (expr -> ( expr ) .)
    ELSE            reduce using rule 33 (expr -> ( expr ) .)
    FI              reduce using rule 33 (expr -> ( expr ) .)


state 94

    (13) Metodo -> OBJECTID ( formal ) : TYPEID { expr . }
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    }               shift and go to state 102
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 95

    (14) Metodo -> OBJECTID ( ) : TYPEID { expr } .
    ;               reduce using rule 14 (Metodo -> OBJECTID ( ) : TYPEID { expr } .)


state 96

    (30) expr -> OBJECTID ( expr ) .
    @               reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    =               reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    LE              reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    <               reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    /               reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    *               reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    -               reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    +               reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    ;               reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    }               reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    OF              reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    LOOP            reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    THEN            reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    )               reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    POOL            reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    ELSE            reduce using rule 30 (expr -> OBJECTID ( expr ) .)
    FI              reduce using rule 30 (expr -> OBJECTID ( expr ) .)


state 97

    (31) expr -> expr @ TYPEID . . OBJECTID ( expr )
    (32) expr -> expr @ TYPEID . . OBJECTID ( )
    OBJECTID        shift and go to state 103


state 98

    (24) expr -> CASE expr OF { . cuerpo_case } ESAC
    (25) expr -> CASE expr OF { . } ESAC
    (46) cuerpo_case -> . cuerpo_case OBJECTID : TYPEID DARROW expr ;
    (47) cuerpo_case -> .
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 105
    OBJECTID        reduce using rule 47 (cuerpo_case -> .)

    cuerpo_case                    shift and go to state 104

state 99

    (26) expr -> LET OBJECTID : TYPEID . lista_inicia IN expr
    (45) lista_inicia -> . OBJECTID : TYPEID
    OBJECTID        shift and go to state 106

    lista_inicia                   shift and go to state 107

state 100

    (27) expr -> WHILE expr LOOP expr . POOL
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    POOL            shift and go to state 108
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 101

    (28) expr -> IF expr THEN expr . ELSE expr FI
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    ELSE            shift and go to state 109
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 102

    (13) Metodo -> OBJECTID ( formal ) : TYPEID { expr } .
    ;               reduce using rule 13 (Metodo -> OBJECTID ( formal ) : TYPEID { expr } .)


state 103

    (31) expr -> expr @ TYPEID . OBJECTID . ( expr )
    (32) expr -> expr @ TYPEID . OBJECTID . ( )
    (               shift and go to state 110


state 104

    (24) expr -> CASE expr OF { cuerpo_case . } ESAC
    (46) cuerpo_case -> cuerpo_case . OBJECTID : TYPEID DARROW expr ;
    }               shift and go to state 111
    OBJECTID        shift and go to state 112


state 105

    (25) expr -> CASE expr OF { } . ESAC
    ESAC            shift and go to state 113


state 106

    (45) lista_inicia -> OBJECTID . : TYPEID
    :               shift and go to state 114


state 107

    (26) expr -> LET OBJECTID : TYPEID lista_inicia . IN expr
    IN              shift and go to state 115


state 108

    (27) expr -> WHILE expr LOOP expr POOL .
    @               reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    =               reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    LE              reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    <               reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    /               reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    *               reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    -               reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    +               reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    ;               reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    }               reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    OF              reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    LOOP            reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    THEN            reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    )               reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    POOL            reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    ELSE            reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)
    FI              reduce using rule 27 (expr -> WHILE expr LOOP expr POOL .)


state 109

    (28) expr -> IF expr THEN expr ELSE . expr FI
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 116

state 110

    (31) expr -> expr @ TYPEID . OBJECTID ( . expr )
    (32) expr -> expr @ TYPEID . OBJECTID ( . )
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    )               shift and go to state 118
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 117

state 111

    (24) expr -> CASE expr OF { cuerpo_case } . ESAC
    ESAC            shift and go to state 119


state 112

    (46) cuerpo_case -> cuerpo_case OBJECTID . : TYPEID DARROW expr ;
    :               shift and go to state 120


state 113

    (25) expr -> CASE expr OF { } ESAC .
    @               reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    =               reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    LE              reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    <               reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    /               reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    *               reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    -               reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    +               reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    ;               reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    }               reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    OF              reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    LOOP            reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    THEN            reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    )               reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    POOL            reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    ELSE            reduce using rule 25 (expr -> CASE expr OF { } ESAC .)
    FI              reduce using rule 25 (expr -> CASE expr OF { } ESAC .)


state 114

    (45) lista_inicia -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 121


state 115

    (26) expr -> LET OBJECTID : TYPEID lista_inicia IN . expr
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 122

state 116

    (28) expr -> IF expr THEN expr ELSE expr . FI
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    FI              shift and go to state 123
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 117

    (31) expr -> expr @ TYPEID . OBJECTID ( expr . )
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    )               shift and go to state 124
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 118

    (32) expr -> expr @ TYPEID . OBJECTID ( ) .
    @               reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    =               reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LE              reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    <               reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    /               reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    *               reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    -               reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    +               reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ;               reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    }               reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    OF              reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LOOP            reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    THEN            reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    )               reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    POOL            reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ELSE            reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    FI              reduce using rule 32 (expr -> expr @ TYPEID . OBJECTID ( ) .)


state 119

    (24) expr -> CASE expr OF { cuerpo_case } ESAC .
    @               reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    =               reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    LE              reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    <               reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    /               reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    *               reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    -               reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    +               reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    ;               reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    }               reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    OF              reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    LOOP            reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    THEN            reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    )               reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    POOL            reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    ELSE            reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)
    FI              reduce using rule 24 (expr -> CASE expr OF { cuerpo_case } ESAC .)


state 120

    (46) cuerpo_case -> cuerpo_case OBJECTID : . TYPEID DARROW expr ;
    TYPEID          shift and go to state 125


state 121

    (45) lista_inicia -> OBJECTID : TYPEID .
    IN              reduce using rule 45 (lista_inicia -> OBJECTID : TYPEID .)


state 122

    (26) expr -> LET OBJECTID : TYPEID lista_inicia IN expr .
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 26 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    }               reduce using rule 26 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    OF              reduce using rule 26 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    LOOP            reduce using rule 26 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    THEN            reduce using rule 26 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    )               reduce using rule 26 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    POOL            reduce using rule 26 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    ELSE            reduce using rule 26 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    FI              reduce using rule 26 (expr -> LET OBJECTID : TYPEID lista_inicia IN expr .)
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 123

    (28) expr -> IF expr THEN expr ELSE expr FI .
    @               reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    =               reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    LE              reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    <               reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    /               reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    *               reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    -               reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    +               reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    ;               reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    }               reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    OF              reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    LOOP            reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    THEN            reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    )               reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    POOL            reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    ELSE            reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)
    FI              reduce using rule 28 (expr -> IF expr THEN expr ELSE expr FI .)


state 124

    (31) expr -> expr @ TYPEID . OBJECTID ( expr ) .
    @               reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    =               reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    LE              reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    <               reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    /               reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    *               reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    -               reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    +               reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    ;               reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    }               reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    OF              reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    LOOP            reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    THEN            reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    )               reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    POOL            reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    ELSE            reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    FI              reduce using rule 31 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)


state 125

    (46) cuerpo_case -> cuerpo_case OBJECTID : TYPEID . DARROW expr ;
    DARROW          shift and go to state 126


state 126

    (46) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW . expr ;
    (18) expr -> . BOOL_CONST
    (19) expr -> . STR_CONST
    (20) expr -> . INT_CONST
    (21) expr -> . OBJECTID
    (22) expr -> . { expr }
    (23) expr -> . NEW TYPEID
    (24) expr -> . CASE expr OF { cuerpo_case } ESAC
    (25) expr -> . CASE expr OF { } ESAC
    (26) expr -> . LET OBJECTID : TYPEID lista_inicia IN expr
    (27) expr -> . WHILE expr LOOP expr POOL
    (28) expr -> . IF expr THEN expr ELSE expr FI
    (29) expr -> . OBJECTID ( )
    (30) expr -> . OBJECTID ( expr )
    (31) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (32) expr -> . expr @ TYPEID . OBJECTID ( )
    (33) expr -> . ( expr )
    (34) expr -> . ~ expr
    (35) expr -> . ISVOID expr
    (36) expr -> . NOT expr
    (37) expr -> . expr = expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr < expr
    (40) expr -> . expr / expr
    (41) expr -> . expr * expr
    (42) expr -> . expr - expr
    (43) expr -> . expr + expr
    (44) expr -> . OBJECTID ASSIGN expr
    BOOL_CONST      shift and go to state 39
    STR_CONST       shift and go to state 40
    INT_CONST       shift and go to state 41
    OBJECTID        shift and go to state 37
    {               shift and go to state 42
    NEW             shift and go to state 43
    CASE            shift and go to state 44
    LET             shift and go to state 45
    WHILE           shift and go to state 46
    IF              shift and go to state 47
    (               shift and go to state 48
    ~               shift and go to state 49
    ISVOID          shift and go to state 50
    NOT             shift and go to state 51

    expr                           shift and go to state 127

state 127

    (46) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr . ;
    (31) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (32) expr -> expr . @ TYPEID . OBJECTID ( )
    (37) expr -> expr . = expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . < expr
    (40) expr -> expr . / expr
    (41) expr -> expr . * expr
    (42) expr -> expr . - expr
    (43) expr -> expr . + expr
    ;               shift and go to state 128
    @               shift and go to state 56
    =               shift and go to state 57
    LE              shift and go to state 58
    <               shift and go to state 59
    /               shift and go to state 60
    *               shift and go to state 61
    -               shift and go to state 62
    +               shift and go to state 63


state 128

    (46) cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ; .
    }               reduce using rule 46 (cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ; .)
    OBJECTID        reduce using rule 46 (cuerpo_case -> cuerpo_case OBJECTID : TYPEID DARROW expr ; .)


Conflicts:

shift/reduce conflict for } in state 8 resolved as shift
shift/reduce conflict for } in state 12 resolved as shift
shift/reduce conflict for ) in state 23 resolved as shift
shift/reduce conflict for @ in state 71 resolved as shift
shift/reduce conflict for = in state 71 resolved as shift
shift/reduce conflict for LE in state 71 resolved as shift
shift/reduce conflict for < in state 71 resolved as shift
shift/reduce conflict for / in state 71 resolved as shift
shift/reduce conflict for * in state 71 resolved as shift
shift/reduce conflict for - in state 71 resolved as shift
shift/reduce conflict for + in state 71 resolved as shift
shift/reduce conflict for @ in state 81 resolved as shift
shift/reduce conflict for = in state 81 resolved as shift
shift/reduce conflict for LE in state 81 resolved as shift
shift/reduce conflict for < in state 81 resolved as shift
shift/reduce conflict for / in state 81 resolved as shift
shift/reduce conflict for * in state 81 resolved as shift
shift/reduce conflict for - in state 81 resolved as shift
shift/reduce conflict for + in state 81 resolved as shift
shift/reduce conflict for @ in state 82 resolved as shift
shift/reduce conflict for = in state 82 resolved as shift
shift/reduce conflict for LE in state 82 resolved as shift
shift/reduce conflict for < in state 82 resolved as shift
shift/reduce conflict for / in state 82 resolved as shift
shift/reduce conflict for * in state 82 resolved as shift
shift/reduce conflict for - in state 82 resolved as shift
shift/reduce conflict for + in state 82 resolved as shift
shift/reduce conflict for @ in state 83 resolved as shift
shift/reduce conflict for = in state 83 resolved as shift
shift/reduce conflict for LE in state 83 resolved as shift
shift/reduce conflict for < in state 83 resolved as shift
shift/reduce conflict for / in state 83 resolved as shift
shift/reduce conflict for * in state 83 resolved as shift
shift/reduce conflict for - in state 83 resolved as shift
shift/reduce conflict for + in state 83 resolved as shift
shift/reduce conflict for } in state 98 resolved as shift
shift/reduce conflict for @ in state 122 resolved as shift
shift/reduce conflict for = in state 122 resolved as shift
shift/reduce conflict for LE in state 122 resolved as shift
shift/reduce conflict for < in state 122 resolved as shift
shift/reduce conflict for / in state 122 resolved as shift
shift/reduce conflict for * in state 122 resolved as shift
shift/reduce conflict for - in state 122 resolved as shift
shift/reduce conflict for + in state 122 resolved as shift